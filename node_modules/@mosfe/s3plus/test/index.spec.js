'use strict';

let assert = require('assert');
const path = require('path');
const { execSync } = require('child_process');
let Client = require('..');
const fileCreate = require('./filecreate');

const { privateCloud } = require('../sample/mss.config.js');
var { accessKeyId, accessKeySecret, endpoint } = require('../sample/config/server.js');
let equal = assert.equal;
const env = process.env;
describe('test Clinet', function() {
    before(function () {
        this.timeout(60000);
        this.distPath = path.join(__dirname, 'dist');
        this.fileNumber = 10;
        this.cdn =  new Client({
            accessKeyId: env.MSS_APP_KEY,
            accessKeySecret: env.MSS_APP_SECRET,
            endpoint,
            bucket: 'cdntestspec',
            deployCatalog: this.distPath,
            increment: true
        });
        fileCreate(this.fileNumber);
    });
    it('test utils', async function () {
        const a = [{
            key: '123',
            etag: '123'
        },{
            key: '12',
            etag: '12'
        }];
        const b = [{
            key: '123',
            etag: '12'
        }];
         
        const result = await this.cdn.fileDifference(a, b);
        equal(result.length, 2);
    });

    it('test Client deploy list delete Object', async function() {
        this.timeout(60000);

        const { cdn } = this;
        const status = await cdn.deploy();
        equal(status, true);

        const data = await cdn.listObject();
        equal(data.length > 0, true);

        const { success } = await cdn.deleteObject(data);
        equal(success, true);
    });

    it('test getFile', async function () {
        const { distPath, fileNumber } = this;
        const list = await this.cdn.getFile(distPath);
        equal(list.length, fileNumber);
    });

    after(async function () {
        const { cdn, distPath } = this;
        const { mss } = cdn;
        const data = await cdn.listObject();
            
        await cdn.deleteObject(data);

        await mss.deleteBucket(mss.options.bucket);

        execSync(`rm -rf ${distPath}`);
    });
});