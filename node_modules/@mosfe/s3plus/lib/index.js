const path = require('path');
const _ = require('lodash');
const proto = exports;

/**
 * 
 * @param {*} opts
 */
proto.deploy = async function (opts) {
    opts = opts || {};
    const { mss } = this;
    const { options } = mss;
    const bucketStatus = await this.bucketIsExits(options.bucket);
    if (!bucketStatus) {
        const { code, error } = await mss.createBucket(options.bucket);
        if (code !== 200) {
            this.throwError(error);
        }
        const ACL = 'public-read';
        const setBucketAcl = await mss.putBucketACL(options.bucket, ACL);
        if (setBucketAcl.code !== 200) {
            this.throwError(setBucketAcl.error);
        }
        console.log(`> set ${options.bucket} acl success`);
    }

    // 添加逻辑 检查acl 确保acl read
    const files = await this.getFile(this.deployCatalog);

    // uploadFiles 上传操作对象，保留files
    let uploadFiles = files;
    if (this.increment) {
        uploadFiles = await this.getIncrementFile(files, opts);
    }

    // 上传需要更新的objectKey
    const uploadList = await this.uploadObject(uploadFiles);

    return Promise.all(uploadList).then(async (list) => {
        const deployStatus = await this.checkDeploy(opts);
        if (deployStatus) {
            if (this.resourceRecord) {
                // 记录线上资源信息
                const status = await this.collectResources(files);
                if (!status) {
                    this.throwError('记录线上资源信息失败');
                }
                // 收集废弃资源并记录
                //  collectAbandonedResources 在 cleanStatic 前 确保clean 使用最新的废弃资源列表
                const abandonedStatus = await this.collectAbandonedResources();
                
                if (!abandonedStatus) {
                    this.throwError('收集废弃资源并记录失败');
                }
            }
            console.log('> cdn deploy success');
        } else {
            const files = list.filter((item) => {
                return item.status;
            });
            const status = await this.collectSuccessResources(files);
            if (!status) {
                this.throwError('记录线上资源信息失败');
            }
        }
        return list;
    });
};

/**
 * objectKey 上传方法
 * @param {*} files 
 */
proto.uploadObject = async function (files) {
    const { mss } = this;
    return files.map(async (file) => {
        const fileObject = {
            key: file.key,
            etag: file.etag,
            status: false
        };
        const objectKey = file.key;
        const filePath = path.join(this.deployCatalog, file.keyLocal);
        try {
            let number = 1;
            const allNumber = this.reUploadNumber;
            const reUpload = async () => {
                let options = {};
                options.headers = {};
                options.headers['Cache-Control'] = 'max-age=2592000';  //默认30天

                if (Array.isArray(this.keyMap) && this.keyMap.length > 0) {
                    this.keyMap.forEach(item => {
                        if (item.keyRegExp.test(objectKey)) {
                            options = _.cloneDeep(item.options);
                        }
                    })
                }
                console.log('-->', objectKey, options);
                const { code } = await mss.putObject(objectKey, filePath, options);
                if (code === 200) {
                    fileObject.status = true;
                    console.log(`> file ${objectKey} upload success`);
                } else if (code === 404) {
                    if(number <= allNumber) {
                        console.log(`> 第 ${number++}次重试`);
                        return await reUpload();
                    }
                    console.log(`> file ${objectKey} upload failure`);
                    console.log(`> check ${options.bucket}`);
                }
            }
            
            await reUpload();
        } catch (e) {
            throw new Error(e);
        }
        return fileObject;
    });
}


proto.checkBucketCors = async function (options) {
    const { mss } = this;
    const cors = await mss.getBucketCors(options.bucket);
    let bucketCORSRule = cors.code === 200 && cors.data && cors.data.CORSRule && cors.data.CORSRule[0] && cors.data.CORSRule[0].AllowedOrigin;
    console.log('---', bucketCORSRule);
    if (!Array.isArray(bucketCORSRule)) {
        bucketCORSRule = [bucketCORSRule];
    }
    const bucketCorsStatus = bucketCORSRule.length && bucketCORSRule.every((item) => {
        return this.allowedOrigin.indexOf(item) > -1;
    });

    // cors 未设置或者当前值不符合预期则进行重置
    if (cors.code !== 200 || !bucketCorsStatus) {
        console.log('reset bucket cors');
        if (this.CORSRule.length > 0) {
            const setBucketCors = await this.putBucketCors(options.bucket, {
                CORSRule: this.CORSRule
            });
            if (setBucketCors) {
                console.log(`> set ${options.bucket} cors success`);
            } else {
                return false;
            }
        }
    }
    return true;
}

/**
 * 获取资源访问前缀
 */
proto.pathPrefix = async function (CDNHost, tenantId) {
    CDNHost = CDNHost || this.CDNHost;
    tenantId =  tenantId || this.tenantId;
    return `${CDNHost}/v1/mss_${tenantId}`
}

proto.throwError = function (error) {
    process.exitCode = 1;
    throw new Error(`
--------------------------------------------
${JSON.stringify(error)}
--------------------------------------------
    `);
}