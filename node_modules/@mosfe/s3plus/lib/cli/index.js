'use strict';

const program = require('commander');
const path = require('path');
const fs = require('fs');
const chalk = require('chalk');
const { inquirer } = require('./commandutil');
const cli = module.exports = {};
const env = process.env;
const Client = require('../..');
const { MSS_APP_KEY, MSS_APP_SECRET } = env;
// const mssConfig = configRoots.
const cwd = process.cwd();

const mssConfig = require(path.join(cwd, './mss.config.js'));
const { root, outputDirName, cdn } = require(path.join(cwd, './bone.config'));

const { tenantId, endpoint, CDN_DEPLOY, INCREMENT } = mssConfig;

async function consoleInfo () {
    console.log('basic configuration information: ');
    console.log('------------------------------------------------------------------');
    for(let key in mssConfig) {
        console.log(`  ${key}: ${mssConfig[key] || ''}`);
    }
    console.log(`  MSS_APP_KEY: ${MSS_APP_KEY ? '******' : ''}`);
    console.log(`  MSS_APP_SECRET: ${MSS_APP_SECRET ? '******' : ''}`);
    console.log();
    console.log('Please confirm the basic configuration information. Please do it carefully.');
    console.log('------------------------------------------------------------------');
    // 是否继续。。。 
    let inquirers = [{
        type: 'confirm',
        message: 'Do you decide to continue the operation. Continue?',
        name: 'ok'
    }];
    let answers = await inquirer(inquirers);

    return answers.ok;
}

const CDNClient = new Client({
    accessKeyId: env.MSS_APP_KEY,
    accessKeySecret: env.MSS_APP_SECRET,
    tenantId,
    endpoint,
    bucket: cdn && cdn.bucket,
    deployCatalog: path.join(root, outputDirName),
    increment: INCREMENT === 'yes'
});

async function listUselessSource () {
    const { mss } = CDNClient;
    const res = await mss.getBuffer(CDNClient.uselessFileName);
    const { code, data } = res;
    if (code !== 200) {
        return false;
    }

    const result = JSON.parse(data.content);
    let resultLength = 0;
    console.log('--------------------------------- DELETE LIST ---------------------------------');
    for(let key in result) {
        resultLength++;
        const item  = result[key];
        console.log(`- Key ${key}  - Last-Modified ${item.lastModified}`);
    }
    if (resultLength === 0) {
        console.log('- There is no file to be deleted');
        return false;
    }

    return true;
}


async function listUseSource () {
    console.log('--------------------------------- SOURCE LIST ---------------------------------');
    const { mss } = CDNClient;
    const res = await mss.getBuffer(CDNClient.useFileName);
    const { code, data } = res;
    if (code !== 200) {
        return false;
    }

    const result = JSON.parse(data.content);
    for(let key in result) {
        const item  = result[key];
        console.log(`- Key ${key}`);
        //  - Last-Modified ${item.lastModified} 上传时没有这个时间
    }

    return true;
}

cli.run = () => {
    program
        .option('-v, --version')
        .version(JSON.parse(fs.readFileSync(path.join(__dirname, '../..', 'package.json'), 'utf8')).version);

    program
        .command('clean-static-all')
        .description('clean static of bucket objectKey')
        .action(async(name, cmd) => {
            const status = await consoleInfo();
            if (!status) {
                return false;
            }
            

            const listStatus = await listUselessSource();
            if (!listStatus) {
                return false;
            }

            let inquirers = [{
                type: 'confirm',
                message: 'Please confirm the delete list. Continue?',
                name: 'ok'
            }];
            const answers = await inquirer(inquirers);
            if (!answers.ok) {
                return false;
            }

            let lastInquirers = [{
                type: 'confirm',
                message: 'Delete task is ready, confirm that resources will be deleted, please confirm again. Continue?',
                name: 'ok'
            }];
            const lastAnswers = await inquirer(lastInquirers);
            if (!lastAnswers.ok) {
                return null;
            }
            const res = await CDNClient.cleanStatic();
            const { success, files } = res;
            if (success) {
                console.log('Delete resource success');
                return null;
            }

            console.log('Delete resource failure');
            console.log('failure list');
            files && files.forEach((item) => {
                console.log(`- Key ${item.key}`);
            });
        });

    program
        .command('clean-static <object-key>')
        .description('clean one object-key of bucket objectKey')
        .action(async(name, cmd) => {
            /**
             * 列举废弃资源列表及最后更改时间
             * 询问是否删除资源
             * 确定则进行删除
             */

            const initArgv = process.argv.slice(process.argv.indexOf('init') + 1);

            const objectKeyStr = initArgv[3];

            let inquirers = [{
                type: 'confirm',
                message: `Please confirm the delete ${objectKeyStr}. Continue?`,
                name: 'ok'
            }];
            const answers = await inquirer(inquirers);
            if (!answers.ok) {
                return false;
            }

            const objectKeyList = objectKeyStr.split(',').map((item) => {
                return {
                    key: item
                }
            });
            const { success, files } = await CDNClient.deleteObject(objectKeyList);
            if (!success) {
                files.forEach((item) => {
                    console.log(`Delete ${item.key} failure`); 
                });
                return false;
            }
            console.log(`Delete ${objectKeyStr} success`);
        });

    program
        .command('static <object-key>')
        .description('查询object-key')
        .action(async() => {
            
        });
    
    program
        .command('deploy-static')
        .description('部署静态资源')
        .action(async() => {
            let inquirers = [{
                type: 'confirm',
                message: 'Do you decide to redeploy static resources. Continue?',
                name: 'ok'
            }];
            const answers = await inquirer(inquirers);
            if (!answers.ok) {
                return false;
            }
            const { code } = await CDNClient.deploy();
            if (code === 200) {
                console.log('deploy done');
            }
        });

    program
        .command('list-static-useless')
        .description('列举无用资源')
        .action(async() => {
            const listStatus = await listUselessSource();

            if (!listStatus) {
                return false;
            } 
        });
    
        program
        .command('list-static-use')
        .description('列举无用资源')
        .action(async() => {
            const listStatus = await listUseSource();

            if (!listStatus) {
                return false;
            } 
        });

    // output help information on unknown commands
    program
        .arguments('<command>')
        .action((cmd) => {
            program.outputHelp();
            console.log('  ' + chalk.red(`Unknown command ${chalk.yellow(cmd)}.`));
            console.log();
        });

    // enhance common error messages
    const enhanceErrorMessages = (methodName, log) => {
        program.Command.prototype[methodName] = function(...args) {
            if (methodName === 'unknownOption' && this._allowUnknownOption) {
                return;
            }
            this.outputHelp();
            console.log('  ' + chalk.red(log(...args)));
            console.log();
            process.exit(1);
        };
    };

    enhanceErrorMessages('missingArgument', argName => {
        return `Missing required argument ${chalk.yellow(`<${argName}>`)}.`;
    });

    enhanceErrorMessages('unknownOption', optionName => {
        return `Unknown option ${chalk.yellow(optionName)}.`;
    });

    enhanceErrorMessages('optionMissingArgument', (option, flag) => {
        return `Missing required argument for option ${chalk.yellow(option.flags)}` + (
            flag ? `, got ${chalk.yellow(flag)}` : ''
        );
    });
    program.parse(process.argv);
};