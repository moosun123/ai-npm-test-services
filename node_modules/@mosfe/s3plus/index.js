'use strict';

const { debuglog } = require('util');
const merge = require('merge-descriptors');
const _ = require('lodash');

const MSS = require('mos-mss');
const pkg = require('./package.json');

const util = require('./util');
const deploy = require('./lib/index');
const clean = require('./lib/clean');

const env = process.env;

const mssPkg = require('mos-mss/package.json');
console.log('> mos-mss version: ', mssPkg.version);

/**
 * @param {Object} options
 *  @param {String} accessKeyId
 *  @param {String} accessKeySecret 
 *  @param {String} bucket
 *  @param {String} deployCatalog
 *  @param {String} endpoint
 *  @param {String} cdnHost
 *  @param {String} tenantId
 *  @param {String} increment
 *  @param {Array} CORSRule
 */

/**
[
    {
        AllowedMethod: [
            'GET'
        ],
        AllowedOrigin: [
            'http://www.example2.com',
            'http://www.example3.com'
        ],
        AllowedHeader: [
            '*'
        ],
        MaxAgeSeconds: 0
    }
]
*/
class Client {
    constructor(options) {
        console.log('s3plus version is ' + pkg.version);
        const {
            accessKeyId = env.MSS_APP_KEY,
            accessKeySecret = env.MSS_APP_SECRET,
            tenantId,
            endpoint,
            deployCatalog,
            increment,
            CORSRule,
            origin = [],
            reUploadNumber,
            customPath,
            resourceRecord,
            keyMap
            // CDNHost,
            // fuceCDN // 预热host
        } = options;
        let { bucket } = options;
        this.reUploadNumber = reUploadNumber || 3;
        this.deployCatalog = deployCatalog;
        this.tenantId = tenantId;
        this.resourceRecord = resourceRecord;
        this.keyMap = Array.isArray(keyMap) ? keyMap.filter(item => {
            return item && _.isRegExp(item.keyRegExp) && _.isObject(item.options);
        }) : [];
        // fuceCDN CDNHost undefined 情况处理
        // this.fuceCDN = fuceCDN;
        // this.CDNHost = CDNHost;
        this.increment = increment === undefined ? true : increment;
        this.allowedOrigin = origin;
        this.customPath = customPath || '';
        this.buildPath = (p) => {
            return this.customPath ? `${this.customPath}/${p}` : p;
        }
        console.log('=======@mosfe/s3plus log =======');
        console.log('================================================================');
        console.log('endpoint: ', endpoint);
        console.log('accessKeyId: ', accessKeyId);
        console.log('bucket: ', bucket);
        console.log('deployCatalog: ', this.deployCatalog);
        console.log('tenantId: ', this.tenantId);
        console.log('increment: ', this.increment);
        console.log('customPath: ', this.customPath);
        console.log('================================================================');
        this.CORSRule = CORSRule || [
            {
                AllowedMethod: [
                    'GET'
                ],
                AllowedOrigin: [
                    ...origin
                ],
                AllowedHeader: [
                    '*'
                ],
                MaxAgeSeconds: 60 * 60 * 24 * 30
            }
        ];

        // 缓存对象
        this.cache = {};
        this.mss = new MSS({
            accessKeyId,
            accessKeySecret,
            endpoint,
            bucket
        });
        
        if (bucket) {
            bucket = this.mss.options.bucket || bucket;
            const bucketMd5 = this.md5(bucket, 'hex');
            this.useFileName = this.buildPath(`use_resources_${bucketMd5}.json`);
            this.uselessFileName = this.buildPath(`useless_resources_${bucketMd5}.json`);
            this.deployFailSuccessFileName = this.buildPath(`deploy_fail_success_resources_${bucketMd5}.json`);
            this.ignoreFile = [this.useFileName, this.uselessFileName, this.deployFailSuccessFileName];
        }

    }
}

module.exports = Client;

const proto = Client.prototype;

for (let key in util) {
    const mergeObj = {};
    mergeObj[key] = util[key];
    merge(proto, mergeObj);
}

merge(proto, deploy);
merge(proto, clean);