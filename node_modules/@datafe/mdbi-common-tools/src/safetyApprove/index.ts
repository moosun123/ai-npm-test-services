import { Message, Confirm } from '@ss/mtd-vue'
import { APPROVE_ACTION, APPROVE_STATUS, NEED_APPROVE_STATUS, APPROVE_SUCCESS_STATUS } from './constant'
import { getApproveResult, toApply } from './api/approve'

interface ResourceData {
  id: number
  version?: number
}
interface ApplyParam {
  applyMis: string
  applyUserId: number
  applyQueryResultList?: ResourceData[]
  applySQLDataList?: ResourceData[]
  applyAction?: APPROVE_ACTION
  applyActionText?: string
  applyPageUrl?: string
  applyPageName?: string
}
class SafetyApprove {
  /** 当前需要审批的mis列表，对于邮报/推送，需要传入多个收件人的mis并且以,分割 */
  private applyMis = ''
  /** 当前提交审批人的userId */
  private applyUserId = 0
  private applyQueryResultList: ResourceData[] = []
  private applySQLDataList: ResourceData[] = []
  private applyAction = APPROVE_ACTION.DOWNLOAD
  private applyPageUrl = window.location.href
  private applyActionText = '下载'
  private applyDetailsUrl = ''
  private applyPageName = '魔数页面'

  /** 需要审批的提示文案 */
  get needApproveTips() {
    return `继续${this.applyActionText}该内容需要进行安全审批，是否继续${this.applyActionText}？`
  }
  /** 审批中的提示文案 */
  get approvingTips() {
    return `<div>提交触发审批流，请等待。无反应可以点击<a href="${this.applyDetailsUrl}" target="_blank">审批流管理</a>, 联系审批人咨询。</div>`
  }

  /** 初始化默认参数 */
  private init({
    applyMis,
    applyUserId,
    applyQueryResultList,
    applySQLDataList,
    applyAction,
    applyPageUrl,
    applyActionText,
    applyPageName,
  }: ApplyParam) {
    this.applyMis = applyMis || ''
    this.applyUserId = applyUserId || 0
    this.applyAction = applyAction || APPROVE_ACTION.DOWNLOAD
    this.applyQueryResultList = applyQueryResultList || []
    this.applySQLDataList = applySQLDataList || []
    this.applyPageUrl = applyPageUrl || window.location.href
    this.applyActionText = applyActionText || '下载'
    this.applyPageName = applyPageName || '魔数页面'
  }
  /** 展示审批进度提示信息 */
  private showApproveMessage(msg: string) {
    Message({
      type: 'info',
      dangerouslyUseHTMLString: true,
      message: msg,
      duration: 0,
      showClose: true,
    })
  }
  /** 展示审批确认弹窗 */
  private showApproveConfirmDialog(msg: string) {
    Confirm({
      title: '提示',
      message: msg,
      width: '430px',
      type: 'info',
      showCancelButton: true,
      onOk: () => {
        this.handleApply()
      },
    })
  }
  /** 格式化接口请求入参 */
  private getRequestParams() {
    const applyResourceList = this.applyQueryResultList.length > 0 ? this.applyQueryResultList : this.applySQLDataList
    const idList = applyResourceList.map((resource) =>
      resource.version ? `${resource.id}_${resource.version}` : String(resource.id),
    )
    const params = [
      {
        mis: this.applyMis || '',
        userId: this.applyUserId || 0,
        resources: {
          appType: 'SQL',
          subType: 'RESULT',
          id: idList.join(',') || '',
          extra: JSON.stringify({
            linkName: this.applyPageName || '魔数页面',
            linkUrl: this.applyPageUrl || window.location.href,
          }),
        },
        authAction: {
          authType: 'EXPORT',
          userAction: this.applyAction || APPROVE_ACTION.DOWNLOAD,
        },
      },
    ]
    return params
  }
  /** 获取当前资源的审批状态 */
  private async getApproveResult() {
    const params = this.getRequestParams()
    const approveData = await getApproveResult(params)
    if (approveData?.code === 0) {
      const data = approveData?.data[0]
      return {
        approveStatus: data.permissionType || APPROVE_STATUS.PENDING.CODE,
        applyDetailsUrl: data.extra || '',
      }
    }
    return {
      approveStatus: APPROVE_STATUS.PENDING.CODE,
      applyDetailsUrl: '',
    }
  }
  /** 确认审批 */
  private async handleApply() {
    const params = this.getRequestParams()
    const approveData = await toApply(params)
    if (approveData?.code === 0) {
      this.applyDetailsUrl = approveData.data.workflowUrl || ''
      this.showApproveMessage(this.approvingTips)
    }
  }
  /** 判断审批资源列表是否为空 */
  private isResourceListEmpty(resourceList: ResourceData[] = []) {
    return resourceList.length === 0
  }
  /** 去审批，对外暴露的公共方法 */
  public async canOutgoingData({
    applyMis,
    applyUserId,
    applyQueryResultList,
    applySQLDataList,
    applyAction,
    applyPageUrl,
    applyActionText,
    applyPageName,
  }: ApplyParam): Promise<boolean> {
    /** 用户传入的审批资源列表为空，则直接跳过请求接口，相当于审批通过 */
    if (this.isResourceListEmpty(applyQueryResultList || applySQLDataList)) {
      return Promise.resolve(true)
    }
    this.init({
      applyMis,
      applyUserId,
      applyQueryResultList,
      applySQLDataList,
      applyAction,
      applyPageUrl,
      applyActionText,
      applyPageName,
    })
    const { approveStatus, applyDetailsUrl } = await this.getApproveResult()
    /** 审批详情链接 */
    this.applyDetailsUrl = applyDetailsUrl || ''
    return new Promise((resolve) => {
      /** 已完成审批，不需要再次审批，包括：审批通过以及当前资源不需要审批 */
      if (APPROVE_SUCCESS_STATUS.includes(approveStatus)) {
        resolve(true)
        return
      }
      resolve(false)
      /** 需要审批 */
      if (NEED_APPROVE_STATUS.includes(approveStatus)) {
        this.showApproveConfirmDialog(this.needApproveTips)
        return
      }
      /** 审批中 */
      this.showApproveMessage(this.approvingTips)
    })
  }
}

const safetyApprove = new SafetyApprove()
const SafetyApproveConstants = {
  APPROVE_ACTION,
}

export { safetyApprove, SafetyApproveConstants }
