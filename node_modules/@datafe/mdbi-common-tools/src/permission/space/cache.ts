import { APP_TYPE } from '../auth/constants'

interface LocalStorageDataItem {
  key: string
  value: number
}

type LocalStorageData = Array<LocalStorageDataItem>

const CACHE_IN_MEMORY: Record<string, number> = {}
const STORAGE_KEY = 'SPACE_PROJECT_ID_BY_RESOURCE'
const STORAGE_COUNT_MAX = 50

function getResouceKey(resourceId: string, appType: APP_TYPE) {
  return `${resourceId}_${appType}`
}

function getProjectIdFromLocalStorage(resourceId: string, appType: APP_TYPE) {
  try {
    const localStorageDataStr = window.localStorage.getItem(STORAGE_KEY)
    if (!localStorageDataStr) {
      return null
    }

    const key = getResouceKey(resourceId, appType)
    const projectList: LocalStorageData = JSON.parse(localStorageDataStr)
    const projectInfo = projectList.find((item) => {
      return item.key === key
    })

    if (!projectInfo) {
      return null
    }

    return projectInfo.value
  } catch (error) {
    console.log('getProjectIdFromLocalStorage: ', error)
    // Iframe嵌入场景，特殊的浏览器设置可能导致localstorage操作失败
    return null
  }
}

function removeLocalStorage(resourceId: string, appType: APP_TYPE) {
  try {
    const key = getResouceKey(resourceId, appType)
    window.localStorage.removeItem(key)
  } catch (error) {
    console.log('removeLocalStorage: ', error)
    return
  }
}

function setProjectIdToLocalStorage(resourceId: string, appType: APP_TYPE, projectId: number) {
  try {
    let projectList: LocalStorageData = []
    const localStorageDataStr = window.localStorage.getItem(STORAGE_KEY)
    if (localStorageDataStr) {
      projectList = JSON.parse(localStorageDataStr)
    }

    // 如果之前存在，则先清掉
    const key = getResouceKey(resourceId, appType)
    const oldIndex = projectList.findIndex((item) => {
      return item.key === key
    })
    if (oldIndex !== -1) {
      projectList.splice(oldIndex, 1)
    }

    // 超出数量限制，去掉第一个
    if (projectList.length > STORAGE_COUNT_MAX) {
      projectList.splice(0, 1)
    }

    projectList.push({
      key: getResouceKey(resourceId, appType),
      value: projectId,
    })

    window.localStorage.setItem(STORAGE_KEY, JSON.stringify(projectList))
  } catch (error) {
    console.log('setProjectIdToLocalStorage: ', error)
    // Iframe嵌入场景，特殊的浏览器设置可能导致localstorage操作失败
    // 清除cookie
    removeLocalStorage(resourceId, appType)
    return
  }
}

function getProjectIdFromMemory(resourceId: string, appType: APP_TYPE) {
  const key = getResouceKey(resourceId, appType)
  const projectIdFromMemory = CACHE_IN_MEMORY[key]
  if (projectIdFromMemory !== undefined) {
    return projectIdFromMemory
  }
  return null
}

function setProjectIdToMemory(resourceId: string, appType: APP_TYPE, projectId: number) {
  const key = getResouceKey(resourceId, appType)
  CACHE_IN_MEMORY[key] = projectId
}

export function getProjectIdFromCache(resourceId: string, appType: APP_TYPE, useLocalStorage?: boolean) {
  const projectIdFromMemory = getProjectIdFromMemory(resourceId, appType)

  if (projectIdFromMemory !== null) {
    return projectIdFromMemory
  }

  if (useLocalStorage) {
    const projectIdFromLocalStorage = getProjectIdFromLocalStorage(resourceId, appType)
    if (projectIdFromLocalStorage !== null) {
      setProjectIdToMemory(resourceId, appType, projectIdFromLocalStorage)
    }
    return projectIdFromLocalStorage
  }

  return null
}

export function setProjectIdToCache(resourceId: string, appType: APP_TYPE, projectId: number) {
  setProjectIdToMemory(resourceId, appType, projectId)
  setProjectIdToLocalStorage(resourceId, appType, projectId)
}
