import spaceManager from '../space/index'
import { AuthResult, actionAuth, fetchAuthUser } from '../api/auth'
import { GetSafemetaInfoRes } from '../api/safemeta'
import { APP_TYPE } from './constants'
import appTypeMap from './jiangjunling/appTypeMap'
// import { APP_TYPE } from './constants'
// import jiangjunlingManager from './jiangjunling/jiangjunlingManager'

export interface AuthParam {
  /** 只支持actionMap中的值，actionMap已由本模块导出 */
  action: string
  subResources?: {
    id?: string
    /** 与资源本身强相关的非通用的参数放置在此字段下 */
    extra?: string
  }
  /** 是否验证资源的线上版本 */
  online?: boolean
  /** 资源ID，如SQL ID、Dashboard ID */
  id?: string
  /** 具体的查询信息，ID和查询信息至少要传递一个 */
  queryInfo?: {
    // 集群（dsName, hostGroup）
    hostGroup?: string
    // 数据源key
    key?: string
    // 查询引擎
    engine?: string
    // SQL就是具体的SQL语句
    statement?: string
  }
  /** 迁移动作专用，目标项目组的ID */
  targetProjectId?: number
}

export interface SafeMetaOfAuthRes extends GetSafemetaInfoRes {
  /** 当前安全仓状态非法 */
  invalid?: boolean
}

export interface AuthRes extends AuthResult {
  params: ReturnType<typeof resolveAuthParam>[number]
  safeMetaResult?: SafeMetaOfAuthRes
  subAuthResults?: AuthRes[]
}

function parseActionStr(action: string) {
  const actionInfo = action.split('-')
  return {
    appType: actionInfo[0],
    subType: actionInfo[1],
    realAction: actionInfo[2],
  }
}

function resolveAuthParam(paramList: Array<AuthParam>, mis: string) {
  return paramList.map((item) => {
    const { appType, subType, realAction } = parseActionStr(item.action)

    let resources: {
      appType: string
      subType: string
      id?: string
      subResources?: [
        {
          appType: string
          subType: string
          id?: string
          extra?: string
        },
      ]
    } | null = null

    // 如果存在子资源，则附加子资源数据
    if (item.subResources) {
      resources = {
        appType,
        subType: 'APP',
        id: item.id,
        ...item.queryInfo,
      }

      resources.subResources = [
        {
          id: item.subResources.id,
          extra: item.subResources.extra,
          appType,
          subType,
          ...item.queryInfo,
        },
      ]
    } else {
      resources = {
        appType,
        subType,
        id: item.id,
        ...item.queryInfo,
      }
    }

    return {
      mis,
      projectId: spaceManager.getProjectId(),
      targetProjectId: item.targetProjectId,
      resources,
      authAction: {
        userAction: realAction,
      },
      online: item.online,
    }
  })
}

function resolveAuthRes(paramList: ReturnType<typeof resolveAuthParam>, resData?: AuthResult[]) {
  if (!resData) {
    return []
  }

  return resData.map((item, index) => {
    const newResItem: AuthRes = {
      ...item,
      params: paramList[index],
      subAuthResults: resolveAuthRes(paramList, item.subAuthResults),
    }

    if (newResItem.safeMetaResult) {
      if (
        !newResItem.safeMetaResult.isSafeEnvironment &&
        newResItem.safeMetaResult.safeMeta &&
        newResItem.safeMetaResult.outbaseStatus !== 'OUTBASED'
      ) {
        newResItem.safeMetaResult.invalid = true
      }
    }

    return newResItem
  })
}

class AuthManager {
  /** 权限授予链接 */
  authorizationUrl = `${window.location.origin}/dacs/nav/active-authorization`
  oldMonitorAuthorizationUrl =
    window.__ENV__ === 'production' ? 'https://auth.sankuai.com/add' : 'https://auth.bi.st.sankuai.com/add'
  authManageUrl = `${window.location.origin}/dacs/nav/authorization-setting`

  parseAction(action: string) {
    return parseActionStr(action)
  }

  /**
   * 多「资源+动作」鉴权
   */
  async multiAuth(
    /** 用户Mis */
    mis: string,
    paramList: Array<AuthParam>,
  ): Promise<AuthRes[]> {
    // 确保projectId是就绪的
    await spaceManager.awaitReady()

    const apiParams = resolveAuthParam(paramList, mis)

    const res = await actionAuth(apiParams)

    return resolveAuthRes(apiParams, res.data)
  }

  /**
   * 单「资源+动作」鉴权
   *
   * @param mis
   * @param param
   */
  async singleAuth(
    /** 用户Mis */
    mis: string,
    param: AuthParam,
  ) {
    const res = await this.multiAuth(mis, [param])
    return res[0]
  }

  /**
   * 跳转到权限模块提供的无权限页面
   *
   * @param authRes auth方法返回的内容直接传过来即可，区别是auth方法返回的是数组，这里只需传数组里一个元素即可
   * @param desc 无权限页面的描述文案
   */
  goNoAuthPage(authRes: AuthRes, desc: string) {
    const { appType, id } = authRes.params.resources
    const jiangjunlingAppType = appTypeMap[appType] || appType
    const returnUrl = window.location.href
    window.location.href = `${window.location.origin}/space/no-auth?appType=${jiangjunlingAppType}&id=${id}&text=${desc}&returnUrl=${returnUrl}`
  }

  goAuthorizationPage(moshuAppType: APP_TYPE, resourceId: string | number, isMonitorOld?: boolean) {
    const appType = appTypeMap[moshuAppType] || moshuAppType
    if (isMonitorOld) {
      window.open(
        `${this.oldMonitorAuthorizationUrl}?resourceCode=mdbi_monitor_report_${resourceId}&resoucreType=报表&system=mdbi_monitor`,
        '_blank',
      )
    } else {
      window.open(`${this.authorizationUrl}?code=${appType}::${resourceId}`, '_blank')
    }
  }

  // 前往权限管控页面
  goAuthManagePage(code: string) {
    window.open(`${this.authManageUrl}?code=${code}`, '_blank')
  }

  /**
   * 申请权限。打开将军令权限申请服务
   * 将军令权限组件问题，暂时无法支持编程式打开权限申请组件
   */
  // applyPerm(params: { appType: APP_TYPE; id: string; mis: string }) {
  //   return jiangjunlingManager.applyAuth(params)
  // }

  async getUserByAction(param: AuthParam) {
    const resolvedParam = resolveAuthParam([param], '')
    const res = await fetchAuthUser(
      resolvedParam.map((item) => {
        return {
          resources: item.resources,
          authAction: item.authAction,
        }
      }),
    )
    const resData = (res.data || [])[0]
    return (resData && resData.users) || []
  }
}

export default new AuthManager()
