import { Message } from '@ss/mtd-vue'
import axios, { AxiosResponse, AxiosRequestConfig } from 'axios'
import Cookies from 'js-cookie'
import SystemSetting from '../../../utils/systemSetting'
import reLogin from '../../../reLogin/index'
import analog from '../../../analogUser'
import spaceManager from '../../space/index'
import baseURL from './baseURL'

function openReLoginMessage() {
  // 兼容两套SSO逻辑，新版window上会挂reLoginManager
  const reLoginManager = (window as any).reLoginManager
  if (reLoginManager) {
    reLoginManager.openLoginMessage()
  } else {
    reLogin.openLoginMessage()
  }
}

const { clientId } = new SystemSetting().getSystemSetting()

const config: AxiosRequestConfig = {
  baseURL,
  // 超时设置180s
  timeout: 180000,
  headers: {
    ['x-requested-with']: 'XMLHttpRequest',
    ['Cache-Control']: 'no-cache',
    ['Content-Type']: 'application/json',
  },
  validateStatus() {
    return true
  },
  responseType: 'json',
}

// 请求拦截器，可以在这里对请求做一些通用处理，比如添加通用请求头等
const request = (req: AxiosRequestConfig) => {
  const ssoid = Cookies.get(`${clientId}_ssoid`) || ''
  const analogUser = analog.get()

  ;(req.headers as any)['access-token'] = ssoid
  ;(req.headers as any)['client-id'] = clientId
  ;(req.headers as any).projectId = spaceManager.getProjectId()
  // 添加模拟用户请求头
  if (analogUser.id) {
    ;(req.headers as any)['x-analoguser'] = analogUser.id
  }

  return req
}

// 返回体拦截器，可以在这里对返回体做通用的验证、处理
const response = (res: AxiosResponse) => {
  const conf: any = res.config
  // 返回401，表示sso凭证已过期，需要退出登录，重新登录
  if (res.status === 401 || (res.data || {}).status === 401) {
    openReLoginMessage()
    return Promise.reject({
      type: 'STATUS_ERROR',
      code: 401,
      message: '登录失效, 请重新登录',
    })
  }
  if (res.status !== 200) {
    if (!conf.noToast) {
      Message({
        type: 'error',
        dangerouslyUseHTMLString: true,
        message: `<div>接口:${res.request.responseURL}</div>
          <div>状态码: ${res.status}</div>
          <div>提示信息: ${res.statusText}</div>`,
      })
    }
    throw new Error(res.statusText)
  }

  if (res.data.code !== 0) {
    if (!conf.noToast) {
      Message({
        type: 'error',
        dangerouslyUseHTMLString: true,
        message: `<div>错误提示: ${res.data.data}</div>
          <div>${res.data.message} 错误码:${res.data.code}:${res.data.traceId}</div>`,
      })
    }

    return Promise.reject(res.data)
  }
  return res.data
}
const responseError = (error) => {
  Message({
    showClose: true,
    type: 'warning',
    duration: 10000,
    message: '网络异常:' + error,
  })
  return Promise.reject({
    code: 40000,
    message: error,
    url: error && error.request && error.config.url,
  })
}

const service = axios.create(config)

service.interceptors.request.use(request)
service.interceptors.response.use(response, responseError)

export default service
