import { APP_TYPE } from '../auth/constants'
import { outbase, revokeOutbase, getSafemetaInfo, GetSafemetaInfoRes } from '../api/safemeta'

class SafemetaManager {
  /** 资源安全仓信息缓存，方便应用层使用，而不需要另外再保存信息 */
  private safemetaInfoMap: {
    // 保存Promise是为了防止多次触发
    [key: string]: Promise<GetSafemetaInfoRes | undefined>
  } = {}

  async outbase(options: { id: string; appType: APP_TYPE; message: string; mis: string; subType?: string }) {
    const params = {
      resource: {
        id: options.id,
        appType: options.appType,
        subType: options.subType || 'APP',
      },
      mis: options.mis,
      message: options.message,
    }
    const res = await outbase(params)
    return res.data
  }

  async revokeOutbase(options: { id: string; appType: APP_TYPE; mis: string; subType?: string }) {
    const params = {
      resource: {
        id: options.id,
        appType: options.appType,
        subType: options.subType || 'APP',
      },
      mis: options.mis,
    }
    const res = await revokeOutbase(params)
    return res.data
  }

  getSafemetaInfo(sourceId: string, appType: APP_TYPE) {
    const key = `${appType}-${sourceId}`

    if (this.safemetaInfoMap[key]) {
      return this.safemetaInfoMap[key]
    }

    const resPromise = getSafemetaInfo({
      id: sourceId,
      appType,
    }).then((res) => res.data)

    this.safemetaInfoMap[key] = resPromise

    return this.safemetaInfoMap[key]
  }
}

export default new SafemetaManager()
