import Vue from 'vue'
import { Notification } from '@ss/mtd-vue'
import { NotificationComponent } from '@ss/mtd-vue/types/notification'
import Cookies from 'js-cookie'
import analogUserUtil from '../analogUser'
import { setSessionStorage, getSessionStorage, removeSessionStorage } from '../utils/storage'

export interface GrayCheckOption {
  subsystem: string
  misId: string
  projectId?: number
  dashboardId?: number
  cb?: Function
  reloadPageCb?: Function
}

export interface GrayCheckConfig {
  refreshEnable?: boolean
  refresMillisec?: number
}

export interface GrayInfo {
  talosVersion: string
  cell: string
}

interface FetchGrayInfoResponse {
  appId: number
  env: string
  version: string
  cell: string
  mis: string
  projectId: string
  dashboardId: string
  grayType: string
  // 灰度id
  releaseId: string
  // 弹窗提示更新标识
  refresh: boolean
  // 弹窗提示信息
  msg: string
  subsystem: string
  whitelistStrategiesTem: any
}

const prefixs = ['webkit', 'moz', 'mos', 'o']
const isHidden = () => {
  if ('hidden' in document) return document.hidden
  for (let i = 0; i < prefixs.length; i++) {
    if (`${prefixs[i]}Hidden` in document) {
      return document[`${prefixs[i]}Hidden`]
    }
  }
  return null
}

class Gray {
  private timer = 0
  private LITE_SET = 'gray_cell'
  private SUB_SYSTEM = ''
  private watchTimer = 0
  private notify: NotificationComponent | null = null
  private grayCache: FetchGrayInfoResponse = {
    appId: 0,
    env: '',
    version: '',
    cell: '',
    mis: '',
    projectId: '',
    dashboardId: '',
    grayType: '',
    // 灰度id
    releaseId: '',
    // 弹窗提示更新标识
    refresh: false,
    // 弹窗提示信息
    msg: '',
    subsystem: '',
    whitelistStrategiesTem: '',
  }

  private get TALOS_VERSION(): string {
    return `${this.SUB_SYSTEM}_talos_version`
  }

  public async check(option: GrayCheckOption, config: GrayCheckConfig = { refreshEnable: true }) {
    const { subsystem } = option
    this.setSubsystem(subsystem)

    this.grayCache = await this.fetchGrayInfo(option)
    console.log('gray', this.grayCache)
    const grayCell = this.grayCache.cell || ''
    const talosVersion = this.grayCache.version || ''

    // 本地 session storage 缓存 set标识
    const localGrayCell = this.getGrayCellStorage()
    // 本地 cookie 缓存 talos verison 版本号
    const localTalosVersion = this.getTalosVersionCookie()

    if (localGrayCell !== grayCell) {
      this.setGrayCellStorage(grayCell)
      this.reloadPage(option)
    }
    if (localTalosVersion !== talosVersion) {
      this.setTalosVersionCookie(talosVersion)
      this.reloadPage(option)
    }

    // 默认cb
    option.cb && option.cb()
    if (config.refreshEnable) {
      // 开启灰度发版轮询
      this.watchGrayInfo(option, config)
    }
  }
  // 获取当前灰度信息
  public getGrayInfo(): GrayInfo {
    return {
      talosVersion: this.getTalosVersionCookie(),
      cell: this.getGrayCellStorage(),
    }
  }

  private setSubsystem(value: string) {
    this.SUB_SYSTEM = value
  }
  // 设置 LITE_SET 的 session storage值
  private setGrayCellStorage(value: string) {
    if (value) {
      setSessionStorage(this.LITE_SET, { cell: value })
    } else {
      removeSessionStorage(this.LITE_SET)
    }
  }
  // 获取 LITE_SET 的 session storage值
  private getGrayCellStorage(): string {
    const gray_cell = getSessionStorage(this.LITE_SET)
    return gray_cell?.cell ?? ''
  }

  // 设置 TALOS_VERSION 的 cookie值
  private setTalosVersionCookie(value: string) {
    if (value) {
      Cookies.set(this.TALOS_VERSION, value, {
        domain: window.location.hostname,
        expires: 1,
      })
    } else {
      Cookies.remove(this.TALOS_VERSION, { domain: window.location.hostname })
    }
  }
  // 获取 TALOS_VERSION 的 cookie值
  private getTalosVersionCookie() {
    return Cookies.get(this.TALOS_VERSION) || ''
  }

  private makeFetchParams(option: GrayCheckOption) {
    const url = Object.keys(option).reduce((url, key) => {
      if (url.includes('?')) {
        url += `&${key}=${option[key]}`
      } else {
        url += `?${key}=${option[key]}`
      }
      return url
    }, '/canary/api/v1/gray/cell/user')
    return url
  }

  // 获取 灰度canary信息
  private async fetchGrayInfo(option: GrayCheckOption): Promise<FetchGrayInfoResponse> {
    const headers = {
      'x-requested-with': 'XMLHttpRequest',
      'Cache-Control': 'no-cache',
      'Content-Type': 'application/json',
      'Access-Control-Allow-Origin': '*',
    }
    // 模拟用户信息
    const analogUser = analogUserUtil.get()
    if (analogUser.id) {
      Object.assign(headers, { 'x-analoguser': analogUser.id })
    }

    const url = this.makeFetchParams(option)

    const result = await window
      .fetch(url, {
        method: 'get',
        headers,
      })
      .then((response) => {
        return response.json()
      })
      .catch(() => {
        return {
          data: {
            cell: '',
            version: '',
          },
        }
        // this.setGrayCellStorage('')
        // this.setTalosVersionCookie('')
      })

    return result.data
  }

  private reloadPage(option: GrayCheckOption) {
    clearTimeout(this.timer)
    this.timer = window.setTimeout(() => {
      // 刷新页面前, 触发回调
      option.reloadPageCb && option.reloadPageCb()
      console.warn('reload page for gray')
      window.location.reload()
    })
  }

  // 轮序灰度信息,更新提示
  private watchGrayInfo(option: GrayCheckOption, config: GrayCheckConfig) {
    clearTimeout(this.watchTimer)
    this.watchTimer = window.setTimeout(async () => {
      // 切后台 自动跳过轮询检查
      if (!isHidden()) {
        const data = await this.fetchGrayInfo(option)
        if (data) {
          const { releaseId, refresh } = data
          // 当刷新提示标识refresh为true, 且releaseId发生变化时, 页面弹窗提示刷新
          if (refresh && releaseId !== this.grayCache.releaseId) {
            this.openNotify(data)
          }
        }
      }
      this.watchGrayInfo(option, config)
    }, config.refresMillisec || 1000 * 10 * 60)
  }

  // 刷新提示弹窗
  private openNotify(data: FetchGrayInfoResponse) {
    if (this.notify) {
      return
    }
    const h = new Vue().$createElement
    this.notify = Notification({
      title: '灰度发版刷新提示',
      duration: 0,
      offset: 56,
      onClose: async () => {
        this.notify = null
      },
      message: h('div', {}, [
        h('div', data.msg || '监测到当前环境存在最新发版功能, 是否现在刷新页面'),
        h('mtd-button', {
          domProps: {
            innerHTML: '现在刷新',
          },
          style: {
            marginTop: '8px',
            float: 'right',
          },
          props: {
            type: 'primary',
            size: 'small',
          },
          on: {
            click() {
              window.location.reload()
            },
          },
        }),
      ]),
    })
  }
}

export default new Gray()
