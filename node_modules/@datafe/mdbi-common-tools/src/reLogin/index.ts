import { Message } from '@ss/mtd-vue'
import Vue from 'vue'
import { getLocalStorage, setLocalStorage } from '../utils/storage'
import SystemSetting from '../utils/systemSetting'
import sso from '../sso'

const storageKey = 'Relogin'
const systemSetting = new SystemSetting('reLogin').getSystemSetting()

class ReLogin {
  private status = 'standby'
  private message
  private sso
  private SSO_TOKEN = 'com.sankuai.fetc.mdbi.home_ssoid'

  constructor() {
    this.sso = sso
    if (systemSetting.clientId) {
      this.SSO_TOKEN = systemSetting.clientId + '_ssoid'
    }
  }
  // 新标签打开登录页
  openLoginMessage() {
    // 并发请求时，只打开一个新标签
    if (this.message) {
      return
    }

    if (this.status === 'underway') return
    this.deleteSSOTokenCookie()
    this.status = 'underway'
    const h = new Vue().$createElement
    this.message = Message({
      showClose: true,
      type: 'warning',
      duration: 0,
      dangerouslyUseHTMLString: true,
      message: h('span', { style: { fontSize: '12px', marginRight: '12px' } }, [
        '登录已失效,请不要关闭当前页面。点击"',
        h(
          'a',
          {
            on: {
              click: this.openWindow.bind(this),
            },
            style: {
              cursor: 'pointer',
            },
          },
          ['登录'],
        ),
        '"后重试。',
      ]),
    })
  }
  // 关闭登录页
  closeLoginMessage() {
    if (window.opener) {
      window.opener.postMessage('RE_LOGIN_SUCCESS', `${window.location.protocol}//${window.location.host}`)
      if (getLocalStorage(storageKey).status === 'underway') {
        window.close()
        setLocalStorage(storageKey, { status: 'standby' })
      }
    }
  }

  private openLoginSuccessMessage() {
    Message({
      showClose: true,
      type: 'success',
      duration: 0,
      message: '登录成功,请重复之前的操作',
    })
  }

  private closeMessage() {
    this.message && this.message.close()
    this.message = null
  }

  private openWindow() {
    window.open(this.sso.getSSOLoginUrl(), '_blank')
    this.bindOnMessageEvent()
    setLocalStorage(storageKey, { status: 'underway' })
  }

  private bindOnMessageEvent() {
    window.addEventListener(
      'message',
      (e) => {
        if (e.data === 'RE_LOGIN_SUCCESS') {
          this.status = 'standby'
          this.closeMessage()
          this.openLoginSuccessMessage()
        }
      },
      { once: true },
    )
  }

  private deleteSSOTokenCookie() {
    const domain = window.location.hostname
    const path = '/'
    const date = new Date()
    date.setTime(date.getTime() - 10000)
    // 加domain时会清除域名为 `.${hostname}` 的cookie
    document.cookie = `${this.SSO_TOKEN}=;expires=${date.toUTCString()};domain=${domain};path=${path};`
    // 不加domian是会清除域名为 `${hostname}` 的cookie
    document.cookie = `${this.SSO_TOKEN}=;expires=${date.toUTCString()};path=${path};`
  }
}

export default new ReLogin()
