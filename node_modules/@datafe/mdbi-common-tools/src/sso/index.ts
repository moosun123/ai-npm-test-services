import { AxiosInstance } from 'axios'
import SSOWeb from '@mtfe/sso-web'
import { SSOWebConfig } from '@mtfe/sso-web/lib/types'
import SystemSetting from '../utils/systemSetting'
import { setLocalStorage } from '../utils/storage'

interface UserInfo {
  userName: string
  userId: number
  misId: string
  imageUrl: string
}

// 各子系统配置
const systemSetting = new SystemSetting('sso').getSystemSetting()

const ssoWebConfig: SSOWebConfig = Object.assign(
  {
    clientId: 'com.sankuai.fetc.mdbi.home',
    accessEnv:
      window.__ENV__ === 'production' || window.__ENV__ === 'st' || window.__ENV__ === 'staging' ? 'product' : 'test',
    callbackUrl: '/#/sso/callback',
    logoutUri: '/sso/logout',
    sameSite: false,
    rewriteLocation: '',
  },
  systemSetting,
)

class SSO {
  public ssoWeb
  private SSO_TOKEN = 'com.sankuai.fetc.mdbi.home_ssoid'
  public userInfo

  constructor(ssoWebConfig: SSOWebConfig) {
    this.ssoWeb = SSOWeb(ssoWebConfig)
    this.SSO_TOKEN = ssoWebConfig.clientId + '_ssoid'
    this.userInfo = {
      userName: '',
      userId: 0,
      misId: '',
      imageUrl: '',
    }
  }

  getSsoWeb() {
    return this.ssoWeb
  }

  getSSOLoginUrl() {
    return this.ssoWeb.getLoginUrl()
  }
  login() {
    return this.ssoWeb.login()
  }
  logout() {
    this.ssoWeb.logout().then(() => {
      location.href = this.ssoWeb.getLoginUrl()
    })
  }
  deleteSSOTokenCookie() {
    const domain = window.location.hostname
    const path = '/'
    const date = new Date()
    date.setTime(date.getTime() - 10000)
    // 加domain时会清除域名为 `.${hostname}` 的cookie
    document.cookie = `${this.SSO_TOKEN}=;expires=${date.toUTCString()};domain=${domain};path=${path};`
    // 不加domian是会清除域名为 `${hostname}` 的cookie
    document.cookie = `${this.SSO_TOKEN}=;expires=${date.toUTCString()};path=${path};`
  }
  // 获取用户信息
  async getUserInfo(instance: AxiosInstance, url?: string): Promise<UserInfo> {
    try {
      const res = await instance({
        url: url || '/api/v1/sso/userinfo',
        method: 'get',
      })
      // 格式兼容
      this.userInfo = res.data
      if (!this.userInfo.userId) {
        this.userInfo = res.data.data
      }
      // 本地缓存用户信息
      setLocalStorage('userInfo', this.userInfo)
      return this.userInfo
    } catch (err) {
      // 用户登录信息失效, userInfo接口不做弹窗提示, 直接新窗口重新登录
      if (err.code === 401) {
        this.deleteSSOTokenCookie()
        // 判断当前页面是否在iframe内访问
        if (window === top) {
          window.location.href = this.getSSOLoginUrl()
        } else {
          this.ssoRelogin()
        }
      }
      return this.userInfo
    }
  }
  private ssoRelogin() {
    window.addEventListener('message', (e) => {
      if (e.data === 'RE_LOGIN_SUCCESS') {
        window.location.reload()
      }
    })
    setLocalStorage('Relogin', { status: 'underway' })
    window.open(this.getSSOLoginUrl(), '_blank')
  }
}

export default new SSO(ssoWebConfig)
