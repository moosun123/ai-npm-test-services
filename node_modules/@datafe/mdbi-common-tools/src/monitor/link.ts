import { v4 as uuid } from 'uuid'

export interface TAGS {
  [tagName: string]: string | number
}

export class Link {
  private pointInfo: Array<{
    pointName: string
    timestamp: number
  }> = []
  private isEnd = false
  private metricInst: any
  id: string | number

  constructor(id?: string | number) {
    this.id = id || uuid()
    this.metricInst = this.getMetricInst()
  }

  private getMetricInst() {
    const owl = window.Owl || window.owl
    if (!owl) {
      return null
    }

    const owlVersion = owl.__version__ || ''
    const owlVersionSplit = owlVersion.split('.')

    // 1.8.x & 1.9.x 版本与1.10.x以上版本获取实例方式不同
    if (Number(owlVersionSplit[1]) >= 10) {
      return owl('newMetricInst')
    }

    return owl.MetricManager()
  }

  private report(metricName, value: string | number, tags?: TAGS) {
    if (!this.metricInst) {
      console.error('上报失败：Metric实例不存在，建议检查Owl版本')
      return
    }
    this.metricInst.setTags(tags || {})
    this.metricInst.setMetric(metricName, value)
  }

  add(pointName: string, tags?: TAGS) {
    if (this.isEnd) {
      return
    }
    const point = {
      pointName,
      timestamp: Date.now(),
    }
    this.pointInfo.push(point)

    // 取当前链路节点与链路初始节点的时间差为指标值
    const value = point.timestamp - this.pointInfo[0].timestamp
    try {
      this.report(pointName, value, tags)
    } catch (error) {
      console.log(error)
    }
  }

  end(pointName: string, tags?: TAGS) {
    this.add(pointName, tags)
    this.isEnd = true
  }
}
