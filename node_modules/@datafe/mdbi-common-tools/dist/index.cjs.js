'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var mtdVue = require('@ss/mtd-vue');
var Vue = require('vue');
var SSOWeb = require('@mtfe/sso-web');
var AuthApplyDynamic = require('@mt-material/datafe-auth-apply-dynamic');
var axios = require('axios');

function _interopDefaultLegacy (e) { return e && typeof e === 'object' && 'default' in e ? e : { 'default': e }; }

var Vue__default = /*#__PURE__*/_interopDefaultLegacy(Vue);
var SSOWeb__default = /*#__PURE__*/_interopDefaultLegacy(SSOWeb);
var AuthApplyDynamic__default = /*#__PURE__*/_interopDefaultLegacy(AuthApplyDynamic);
var axios__default = /*#__PURE__*/_interopDefaultLegacy(axios);

// Unique ID creation requires a high quality random # generator. In the browser we therefore
// require the crypto API and do not support built-in fallback to lower quality random number
// generators (like Math.random()).
var getRandomValues;
var rnds8 = new Uint8Array(16);
function rng() {
  // lazy load so that environments that need to polyfill have a chance to do so
  if (!getRandomValues) {
    // getRandomValues needs to be invoked in a context where "this" is a Crypto implementation. Also,
    // find the complete implementation of crypto (msCrypto) on IE11.
    getRandomValues = typeof crypto !== 'undefined' && crypto.getRandomValues && crypto.getRandomValues.bind(crypto) || typeof msCrypto !== 'undefined' && typeof msCrypto.getRandomValues === 'function' && msCrypto.getRandomValues.bind(msCrypto);

    if (!getRandomValues) {
      throw new Error('crypto.getRandomValues() not supported. See https://github.com/uuidjs/uuid#getrandomvalues-not-supported');
    }
  }

  return getRandomValues(rnds8);
}

var REGEX = /^(?:[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}|00000000-0000-0000-0000-000000000000)$/i;

function validate(uuid) {
  return typeof uuid === 'string' && REGEX.test(uuid);
}

/**
 * Convert array of 16 byte values to UUID string format of the form:
 * XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX
 */

var byteToHex = [];

for (var i = 0; i < 256; ++i) {
  byteToHex.push((i + 0x100).toString(16).substr(1));
}

function stringify(arr) {
  var offset = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0; // Note: Be careful editing this code!  It's been tuned for performance
  // and works in ways you may not expect. See https://github.com/uuidjs/uuid/pull/434

  var uuid = (byteToHex[arr[offset + 0]] + byteToHex[arr[offset + 1]] + byteToHex[arr[offset + 2]] + byteToHex[arr[offset + 3]] + '-' + byteToHex[arr[offset + 4]] + byteToHex[arr[offset + 5]] + '-' + byteToHex[arr[offset + 6]] + byteToHex[arr[offset + 7]] + '-' + byteToHex[arr[offset + 8]] + byteToHex[arr[offset + 9]] + '-' + byteToHex[arr[offset + 10]] + byteToHex[arr[offset + 11]] + byteToHex[arr[offset + 12]] + byteToHex[arr[offset + 13]] + byteToHex[arr[offset + 14]] + byteToHex[arr[offset + 15]]).toLowerCase(); // Consistency check for valid UUID.  If this throws, it's likely due to one
  // of the following:
  // - One or more input array values don't map to a hex octet (leading to
  // "undefined" in the uuid)
  // - Invalid input values for the RFC `version` or `variant` fields

  if (!validate(uuid)) {
    throw TypeError('Stringified UUID is invalid');
  }

  return uuid;
}

function v4(options, buf, offset) {
  options = options || {};
  var rnds = options.random || (options.rng || rng)(); // Per 4.4, set bits for version and `clock_seq_hi_and_reserved`

  rnds[6] = rnds[6] & 0x0f | 0x40;
  rnds[8] = rnds[8] & 0x3f | 0x80; // Copy bytes to buffer, if provided

  if (buf) {
    offset = offset || 0;

    for (var i = 0; i < 16; ++i) {
      buf[offset + i] = rnds[i];
    }

    return buf;
  }

  return stringify(rnds);
}

class Link {
    constructor(id) {
        this.pointInfo = [];
        this.isEnd = false;
        this.id = id || v4();
        this.metricInst = this.getMetricInst();
    }
    getMetricInst() {
        const owl = window.Owl || window.owl;
        if (!owl) {
            return null;
        }
        const owlVersion = owl.__version__ || '';
        const owlVersionSplit = owlVersion.split('.');
        if (Number(owlVersionSplit[1]) >= 10) {
            return owl('newMetricInst');
        }
        return owl.MetricManager();
    }
    report(metricName, value, tags) {
        if (!this.metricInst) {
            console.error('上报失败：Metric实例不存在，建议检查Owl版本');
            return;
        }
        this.metricInst.setTags(tags || {});
        this.metricInst.setMetric(metricName, value);
    }
    add(pointName, tags) {
        if (this.isEnd) {
            return;
        }
        const point = {
            pointName,
            timestamp: Date.now(),
        };
        this.pointInfo.push(point);
        const value = point.timestamp - this.pointInfo[0].timestamp;
        try {
            this.report(pointName, value, tags);
        }
        catch (error) {
            console.log(error);
        }
    }
    end(pointName, tags) {
        this.add(pointName, tags);
        this.isEnd = true;
    }
}

class LinkPool {
    constructor() {
        this.pool = {};
    }
    createLink(linkId) {
        const linkInst = new Link(linkId);
        this.pool[linkInst.id] = linkInst;
        return linkInst;
    }
    getLink(linkId) {
        return this.pool[linkId];
    }
    getOrCreateLink(linkId) {
        return this.getLink(linkId) || this.createLink(linkId);
    }
    addPoint(linkId, pointName, tags) {
        const linkInst = this.getLink(linkId);
        linkInst && linkInst.add(pointName, tags);
    }
    endPoint(linkId, pointName, tags) {
        const linkInst = this.getLink(linkId);
        linkInst && linkInst.end(pointName, tags);
    }
}

class Base {
    constructor() {
        this.owl = window.Owl || window.owl;
        this.owlVersion = this.getOwlVersion();
        this.metricInst = this.getMetricInst();
    }
    getOwlVersion() {
        const { owl } = this;
        if (!owl) {
            return '';
        }
        const owlVersion = owl.__version__ || '';
        return owlVersion;
    }
    getMetricInst() {
        const { owl, owlVersion } = this;
        if (!owl) {
            return null;
        }
        const owlVersionSplit = owlVersion.split('.');
        if (Number(owlVersionSplit[1]) >= 10) {
            return owl('newMetricInst');
        }
        return owl.MetricManager();
    }
    addError(message, config) {
        try {
            const { owl, owlVersion } = this;
            if (!owl) {
                console.error('手动上报异常失败：建议检查Owl版本');
                return;
            }
            const owlVersionSplit = owlVersion.split('.');
            if (Number(owlVersionSplit[1]) >= 10) {
                owl('addError', message, config);
            }
            owl.addError(message, config);
        }
        catch (err) {
            console.error(err);
        }
    }
}

const client = 'mdbi-common-tools';
const getStorageKey = (key) => {
    return [client, key].join('__');
};
const getLocalStorage = (key) => {
    const storageKey = getStorageKey(key);
    const data = window.localStorage.getItem(storageKey);
    return data ? JSON.parse(data) : {};
};
const setLocalStorage = (key, data) => {
    const storageKey = getStorageKey(key);
    window.localStorage.setItem(storageKey, JSON.stringify(data));
};
const getSessionStorage = (key) => {
    const storageKey = getStorageKey(key);
    const data = window.sessionStorage.getItem(storageKey);
    return data ? JSON.parse(data) : {};
};
const setSessionStorage = (key, data) => {
    const storageKey = getStorageKey(key);
    window.sessionStorage.setItem(storageKey, JSON.stringify(data));
};
const removeSessionStorage = (key) => {
    const storageKey = getStorageKey(key);
    window.sessionStorage.removeItem(storageKey);
};

const storageKey$1 = 'InfiniteRedirectURL';
const infiniteRedirectErrorKey = 'InfiniteRedirectError';
var InfiniteRedirectErrorFlag;
(function (InfiniteRedirectErrorFlag) {
    InfiniteRedirectErrorFlag["TRUE"] = "1";
    InfiniteRedirectErrorFlag["FALSE"] = "0";
})(InfiniteRedirectErrorFlag || (InfiniteRedirectErrorFlag = {}));

function isInvalidParentUrl(url) {
    return url.includes('bi.sankuai.com') || url.includes('ssosv.sankuai.com');
}
function setInfiniteRedirectErrorKey(flag) {
    setLocalStorage(infiniteRedirectErrorKey, {
        flag,
        timestamp: Date.now(),
    });
}
function getInfiniteRedirectErrorKey() {
    return (getLocalStorage(infiniteRedirectErrorKey) || {
        flag: InfiniteRedirectErrorFlag.FALSE,
    });
}
class InfiniteRedirect extends Base {
    constructor(timeThreshold = 3, countThreshold = 10) {
        super();
        this.timeThreshold = timeThreshold * 1000;
        this.countThreshold = countThreshold;
    }
    record() {
        try {
            const currentURL = window.location.origin + window.location.pathname;
            const currentTimestamp = Date.now();
            this.checkCurrentURL(currentURL, currentTimestamp);
            this.launchInfiniteRedirectFinshedTimer();
        }
        catch (err) {
            this.addError(err);
        }
    }
    launchInfiniteRedirectFinshedTimer() {
        setTimeout(() => {
            const infiniteRedirectError = getInfiniteRedirectErrorKey();
            const { misId, userId } = getLocalStorage('userInfo');
            if (infiniteRedirectError.flag === InfiniteRedirectErrorFlag.TRUE) {
                this.addError('无限重定向异常恢复', {
                    level: 'info',
                    category: 'jsError',
                    tags: {
                        timestamp: infiniteRedirectError.timestamp,
                        _misId: misId,
                        userId,
                    },
                });
                setInfiniteRedirectErrorKey(InfiniteRedirectErrorFlag.FALSE);
            }
        }, this.timeThreshold * 2);
    }
    recordParentUrl() {
        const FIRST_REFERRER_KEY = 'firstReferrer';
        let parentUrl = {
            url: '',
            timestamp: 0,
        };
        try {
            const curReferrer = window.document.referrer;
            if (isInvalidParentUrl(curReferrer)) {
                const parentUrlInfoInStorage = getLocalStorage(FIRST_REFERRER_KEY);
                parentUrl = parentUrlInfoInStorage || parentUrl;
            }
            else {
                parentUrl = {
                    url: curReferrer,
                    timestamp: Date.now(),
                };
                setLocalStorage(FIRST_REFERRER_KEY, parentUrl);
            }
        }
        catch (error) {
            parentUrl = {
                url: `获取异常: ${error.message}`,
                timestamp: 0,
            };
        }
        return parentUrl;
    }
    checkCurrentURL(currentURL, currentTimestamp) {
        const urlRecords = getSessionStorage(storageKey$1);
        const urlRecord = urlRecords[currentURL];
        const curParentUrl = this.recordParentUrl();
        let referrerList = [document.referrer];
        let _count = 1;
        if (urlRecord) {
            const { count, timestamp } = urlRecord;
            const referrerListFromStorage = urlRecord.referrerList || [];
            referrerList = [...referrerListFromStorage, document.referrer];
            if (currentTimestamp - Number(timestamp) <= this.timeThreshold) {
                _count = count + 1;
                if (_count % this.countThreshold === 0) {
                    const { misId, userId } = getLocalStorage('userInfo');
                    setInfiniteRedirectErrorKey(InfiniteRedirectErrorFlag.TRUE);
                    this.addError('无限重定向异常', {
                        level: 'warn',
                        category: 'jsError',
                        tags: {
                            count: _count,
                            timestamp: currentTimestamp,
                            referrerList,
                            _misId: misId,
                            userId,
                            currentURL,
                            parentUrl: curParentUrl.url,
                            parentUrlRecordTime: curParentUrl.timestamp,
                        },
                    });
                }
            }
        }
        urlRecords[currentURL] = {
            count: _count,
            timestamp: currentTimestamp,
            referrerList,
        };
        setSessionStorage(storageKey$1, urlRecords);
    }
}

var index$3 = /*#__PURE__*/Object.freeze({
  __proto__: null,
  Link: Link,
  LinkPool: LinkPool,
  InfiniteRedirect: InfiniteRedirect
});

function createScript() {
    const script = document.createElement('script');
    script.src =
        'https://s3plus.meituan.net/v1/mss_77a90a9e62374a14a95a15d8334bd502/sec-db-download/lib/sec_db_download.js';
    const htmlEl = window.document.querySelector('html');
    htmlEl && htmlEl.appendChild(script);
}
createScript();
function secDownload(url, misid, target) {
    try {
        if (!window.secDBDownload) {
            window.open(url, target);
            return;
        }
        window.secDBDownload.downloadFile(url, misid);
    }
    catch (error) {
        console.log(error);
        window.open(url, target);
    }
}

const settingCollect = {
    default: {
        clientId: 'com.sankuai.fetc.mdbi.home',
    },
    sso: {
        dashboard: {
            rewriteLocation: '/dashboard',
        },
        sql: {
            rewriteLocation: '/sql',
        },
        mail: {
            rewriteLocation: '/mail',
        },
        dataset: {
            rewriteLocation: '/dataset',
        },
        excel: {
            rewriteLocation: '/excel',
        },
        portal: {
            rewriteLocation: '/portal',
        },
        analysis: {
            rewriteLocation: '/analysis',
        },
        newgetdata: {
            rewriteLocation: '/newgetdata',
        },
        getdata: {
            rewriteLocation: '/getdata',
        },
        monitor: {
            rewriteLocation: '/monitor',
        },
        dacs: {
            rewriteLocation: '/dacs',
        },
        query: {
            rewriteLocation: '/query',
        },
        cube: {
            rewriteLocation: '/cube',
        },
        space: {
            rewriteLocation: '/space',
        },
        'source-manager': {
            rewriteLocation: '/source-manager',
        },
    },
};
class SystemSetting {
    constructor(module = '') {
        this.getSystemName = () => {
            const pathList = window.location.pathname.split('/');
            return pathList[1] || '';
        };
        this.systemName = this.getSystemName();
        this.module = module;
    }
    getSystemSetting() {
        const defaultSetting = settingCollect.default;
        const moduleSetting = settingCollect[this.module];
        if (!moduleSetting) {
            return defaultSetting;
        }
        return Object.assign({}, defaultSetting, moduleSetting[this.systemName]);
    }
}

/*! *****************************************************************************
Copyright (c) Microsoft Corporation.

Permission to use, copy, modify, and/or distribute this software for any
purpose with or without fee is hereby granted.

THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
PERFORMANCE OF THIS SOFTWARE.
***************************************************************************** */
function __decorate(decorators, target, key, desc) {
  var c = arguments.length,
      r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
      d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  return c > 3 && r && Object.defineProperty(target, key, r), r;
}
function __metadata(metadataKey, metadataValue) {
  if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(metadataKey, metadataValue);
}
function __awaiter(thisArg, _arguments, P, generator) {
  function adopt(value) {
    return value instanceof P ? value : new P(function (resolve) {
      resolve(value);
    });
  }

  return new (P || (P = Promise))(function (resolve, reject) {
    function fulfilled(value) {
      try {
        step(generator.next(value));
      } catch (e) {
        reject(e);
      }
    }

    function rejected(value) {
      try {
        step(generator["throw"](value));
      } catch (e) {
        reject(e);
      }
    }

    function step(result) {
      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
    }

    step((generator = generator.apply(thisArg, _arguments || [])).next());
  });
}

const systemSetting$1 = new SystemSetting('sso').getSystemSetting();
const ssoWebConfig = Object.assign({
    clientId: 'com.sankuai.fetc.mdbi.home',
    accessEnv: window.__ENV__ === 'production' || window.__ENV__ === 'st' || window.__ENV__ === 'staging' ? 'product' : 'test',
    callbackUrl: '/#/sso/callback',
    logoutUri: '/sso/logout',
    sameSite: false,
    rewriteLocation: '',
}, systemSetting$1);
class SSO {
    constructor(ssoWebConfig) {
        this.SSO_TOKEN = 'com.sankuai.fetc.mdbi.home_ssoid';
        this.ssoWeb = SSOWeb__default["default"](ssoWebConfig);
        this.SSO_TOKEN = ssoWebConfig.clientId + '_ssoid';
        this.userInfo = {
            userName: '',
            userId: 0,
            misId: '',
            imageUrl: '',
        };
    }
    getSsoWeb() {
        return this.ssoWeb;
    }
    getSSOLoginUrl() {
        return this.ssoWeb.getLoginUrl();
    }
    login() {
        return this.ssoWeb.login();
    }
    logout() {
        this.ssoWeb.logout().then(() => {
            location.href = this.ssoWeb.getLoginUrl();
        });
    }
    deleteSSOTokenCookie() {
        const domain = window.location.hostname;
        const path = '/';
        const date = new Date();
        date.setTime(date.getTime() - 10000);
        document.cookie = `${this.SSO_TOKEN}=;expires=${date.toUTCString()};domain=${domain};path=${path};`;
        document.cookie = `${this.SSO_TOKEN}=;expires=${date.toUTCString()};path=${path};`;
    }
    getUserInfo(instance, url) {
        return __awaiter(this, void 0, void 0, function* () {
            try {
                const res = yield instance({
                    url: url || '/api/v1/sso/userinfo',
                    method: 'get',
                });
                this.userInfo = res.data;
                if (!this.userInfo.userId) {
                    this.userInfo = res.data.data;
                }
                setLocalStorage('userInfo', this.userInfo);
                return this.userInfo;
            }
            catch (err) {
                if (err.code === 401) {
                    this.deleteSSOTokenCookie();
                    if (window === top) {
                        window.location.href = this.getSSOLoginUrl();
                    }
                    else {
                        this.ssoRelogin();
                    }
                }
                return this.userInfo;
            }
        });
    }
    ssoRelogin() {
        window.addEventListener('message', (e) => {
            if (e.data === 'RE_LOGIN_SUCCESS') {
                window.location.reload();
            }
        });
        setLocalStorage('Relogin', { status: 'underway' });
        window.open(this.getSSOLoginUrl(), '_blank');
    }
}
var sso = new SSO(ssoWebConfig);

const storageKey = 'Relogin';
const systemSetting = new SystemSetting('reLogin').getSystemSetting();
class ReLogin {
    constructor() {
        this.status = 'standby';
        this.SSO_TOKEN = 'com.sankuai.fetc.mdbi.home_ssoid';
        this.sso = sso;
        if (systemSetting.clientId) {
            this.SSO_TOKEN = systemSetting.clientId + '_ssoid';
        }
    }
    openLoginMessage() {
        if (this.message) {
            return;
        }
        if (this.status === 'underway')
            return;
        this.deleteSSOTokenCookie();
        this.status = 'underway';
        const h = new Vue__default["default"]().$createElement;
        this.message = mtdVue.Message({
            showClose: true,
            type: 'warning',
            duration: 0,
            dangerouslyUseHTMLString: true,
            message: h('span', { style: { fontSize: '12px', marginRight: '12px' } }, [
                '登录已失效,请不要关闭当前页面。点击"',
                h('a', {
                    on: {
                        click: this.openWindow.bind(this),
                    },
                    style: {
                        cursor: 'pointer',
                    },
                }, ['登录']),
                '"后重试。',
            ]),
        });
    }
    closeLoginMessage() {
        if (window.opener) {
            window.opener.postMessage('RE_LOGIN_SUCCESS', `${window.location.protocol}//${window.location.host}`);
            if (getLocalStorage(storageKey).status === 'underway') {
                window.close();
                setLocalStorage(storageKey, { status: 'standby' });
            }
        }
    }
    openLoginSuccessMessage() {
        mtdVue.Message({
            showClose: true,
            type: 'success',
            duration: 0,
            message: '登录成功,请重复之前的操作',
        });
    }
    closeMessage() {
        this.message && this.message.close();
        this.message = null;
    }
    openWindow() {
        window.open(this.sso.getSSOLoginUrl(), '_blank');
        this.bindOnMessageEvent();
        setLocalStorage(storageKey, { status: 'underway' });
    }
    bindOnMessageEvent() {
        window.addEventListener('message', (e) => {
            if (e.data === 'RE_LOGIN_SUCCESS') {
                this.status = 'standby';
                this.closeMessage();
                this.openLoginSuccessMessage();
            }
        }, { once: true });
    }
    deleteSSOTokenCookie() {
        const domain = window.location.hostname;
        const path = '/';
        const date = new Date();
        date.setTime(date.getTime() - 10000);
        document.cookie = `${this.SSO_TOKEN}=;expires=${date.toUTCString()};domain=${domain};path=${path};`;
        document.cookie = `${this.SSO_TOKEN}=;expires=${date.toUTCString()};path=${path};`;
    }
}
var reLogin = new ReLogin();

const KEY = 'analogUser__';
const analogUser = {
    get() {
        const obj = {};
        obj.id = localStorage.getItem(`${KEY}id`) || '';
        obj.misId = localStorage.getItem(`${KEY}misId`) || '';
        obj.name = localStorage.getItem(`${KEY}name`) || '';
        return obj;
    },
    set(val) {
        if (val && val.id && val.misId && val.name) {
            localStorage.setItem(`${KEY}id`, val.id);
            localStorage.setItem(`${KEY}misId`, val.misId);
            localStorage.setItem(`${KEY}name`, val.name);
        }
        else {
            localStorage.removeItem(`${KEY}id`);
            localStorage.removeItem(`${KEY}misId`);
            localStorage.removeItem(`${KEY}name`);
        }
    },
};

/*! js-cookie v3.0.1 | MIT */

/* eslint-disable no-var */
function assign(target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = arguments[i];

    for (var key in source) {
      target[key] = source[key];
    }
  }

  return target;
}
/* eslint-enable no-var */

/* eslint-disable no-var */


var defaultConverter = {
  read: function (value) {
    if (value[0] === '"') {
      value = value.slice(1, -1);
    }

    return value.replace(/(%[\dA-F]{2})+/gi, decodeURIComponent);
  },
  write: function (value) {
    return encodeURIComponent(value).replace(/%(2[346BF]|3[AC-F]|40|5[BDE]|60|7[BCD])/g, decodeURIComponent);
  }
};
/* eslint-enable no-var */

/* eslint-disable no-var */

function init(converter, defaultAttributes) {
  function set(key, value, attributes) {
    if (typeof document === 'undefined') {
      return;
    }

    attributes = assign({}, defaultAttributes, attributes);

    if (typeof attributes.expires === 'number') {
      attributes.expires = new Date(Date.now() + attributes.expires * 864e5);
    }

    if (attributes.expires) {
      attributes.expires = attributes.expires.toUTCString();
    }

    key = encodeURIComponent(key).replace(/%(2[346B]|5E|60|7C)/g, decodeURIComponent).replace(/[()]/g, escape);
    var stringifiedAttributes = '';

    for (var attributeName in attributes) {
      if (!attributes[attributeName]) {
        continue;
      }

      stringifiedAttributes += '; ' + attributeName;

      if (attributes[attributeName] === true) {
        continue;
      } // Considers RFC 6265 section 5.2:
      // ...
      // 3.  If the remaining unparsed-attributes contains a %x3B (";")
      //     character:
      // Consume the characters of the unparsed-attributes up to,
      // not including, the first %x3B (";") character.
      // ...


      stringifiedAttributes += '=' + attributes[attributeName].split(';')[0];
    }

    return document.cookie = key + '=' + converter.write(value, key) + stringifiedAttributes;
  }

  function get(key) {
    if (typeof document === 'undefined' || arguments.length && !key) {
      return;
    } // To prevent the for loop in the first place assign an empty array
    // in case there are no cookies at all.


    var cookies = document.cookie ? document.cookie.split('; ') : [];
    var jar = {};

    for (var i = 0; i < cookies.length; i++) {
      var parts = cookies[i].split('=');
      var value = parts.slice(1).join('=');

      try {
        var foundKey = decodeURIComponent(parts[0]);
        jar[foundKey] = converter.read(value, foundKey);

        if (key === foundKey) {
          break;
        }
      } catch (e) {}
    }

    return key ? jar[key] : jar;
  }

  return Object.create({
    set: set,
    get: get,
    remove: function (key, attributes) {
      set(key, '', assign({}, attributes, {
        expires: -1
      }));
    },
    withAttributes: function (attributes) {
      return init(this.converter, assign({}, this.attributes, attributes));
    },
    withConverter: function (converter) {
      return init(assign({}, this.converter, converter), this.attributes);
    }
  }, {
    attributes: {
      value: Object.freeze(defaultAttributes)
    },
    converter: {
      value: Object.freeze(converter)
    }
  });
}

var api = init(defaultConverter, {
  path: '/'
});

const prefixs = ['webkit', 'moz', 'mos', 'o'];
const isHidden = () => {
    if ('hidden' in document)
        return document.hidden;
    for (let i = 0; i < prefixs.length; i++) {
        if (`${prefixs[i]}Hidden` in document) {
            return document[`${prefixs[i]}Hidden`];
        }
    }
    return null;
};
class Gray {
    constructor() {
        this.timer = 0;
        this.LITE_SET = 'gray_cell';
        this.SUB_SYSTEM = '';
        this.watchTimer = 0;
        this.notify = null;
        this.grayCache = {
            appId: 0,
            env: '',
            version: '',
            cell: '',
            mis: '',
            projectId: '',
            dashboardId: '',
            grayType: '',
            releaseId: '',
            refresh: false,
            msg: '',
            subsystem: '',
            whitelistStrategiesTem: '',
        };
    }
    get TALOS_VERSION() {
        return `${this.SUB_SYSTEM}_talos_version`;
    }
    check(option, config = { refreshEnable: true }) {
        return __awaiter(this, void 0, void 0, function* () {
            const { subsystem } = option;
            this.setSubsystem(subsystem);
            this.grayCache = yield this.fetchGrayInfo(option);
            console.log('gray', this.grayCache);
            const grayCell = this.grayCache.cell || '';
            const talosVersion = this.grayCache.version || '';
            const localGrayCell = this.getGrayCellStorage();
            const localTalosVersion = this.getTalosVersionCookie();
            if (localGrayCell !== grayCell) {
                this.setGrayCellStorage(grayCell);
                this.reloadPage(option);
            }
            if (localTalosVersion !== talosVersion) {
                this.setTalosVersionCookie(talosVersion);
                this.reloadPage(option);
            }
            option.cb && option.cb();
            if (config.refreshEnable) {
                this.watchGrayInfo(option, config);
            }
        });
    }
    getGrayInfo() {
        return {
            talosVersion: this.getTalosVersionCookie(),
            cell: this.getGrayCellStorage(),
        };
    }
    setSubsystem(value) {
        this.SUB_SYSTEM = value;
    }
    setGrayCellStorage(value) {
        if (value) {
            setSessionStorage(this.LITE_SET, { cell: value });
        }
        else {
            removeSessionStorage(this.LITE_SET);
        }
    }
    getGrayCellStorage() {
        var _a;
        const gray_cell = getSessionStorage(this.LITE_SET);
        return (_a = gray_cell === null || gray_cell === void 0 ? void 0 : gray_cell.cell) !== null && _a !== void 0 ? _a : '';
    }
    setTalosVersionCookie(value) {
        if (value) {
            api.set(this.TALOS_VERSION, value, {
                domain: window.location.hostname,
                expires: 1,
            });
        }
        else {
            api.remove(this.TALOS_VERSION, { domain: window.location.hostname });
        }
    }
    getTalosVersionCookie() {
        return api.get(this.TALOS_VERSION) || '';
    }
    makeFetchParams(option) {
        const url = Object.keys(option).reduce((url, key) => {
            if (url.includes('?')) {
                url += `&${key}=${option[key]}`;
            }
            else {
                url += `?${key}=${option[key]}`;
            }
            return url;
        }, '/canary/api/v1/gray/cell/user');
        return url;
    }
    fetchGrayInfo(option) {
        return __awaiter(this, void 0, void 0, function* () {
            const headers = {
                'x-requested-with': 'XMLHttpRequest',
                'Cache-Control': 'no-cache',
                'Content-Type': 'application/json',
                'Access-Control-Allow-Origin': '*',
            };
            const analogUser$1 = analogUser.get();
            if (analogUser$1.id) {
                Object.assign(headers, { 'x-analoguser': analogUser$1.id });
            }
            const url = this.makeFetchParams(option);
            const result = yield window
                .fetch(url, {
                method: 'get',
                headers,
            })
                .then((response) => {
                return response.json();
            })
                .catch(() => {
                return {
                    data: {
                        cell: '',
                        version: '',
                    },
                };
            });
            return result.data;
        });
    }
    reloadPage(option) {
        clearTimeout(this.timer);
        this.timer = window.setTimeout(() => {
            option.reloadPageCb && option.reloadPageCb();
            console.warn('reload page for gray');
            window.location.reload();
        });
    }
    watchGrayInfo(option, config) {
        clearTimeout(this.watchTimer);
        this.watchTimer = window.setTimeout(() => __awaiter(this, void 0, void 0, function* () {
            if (!isHidden()) {
                const data = yield this.fetchGrayInfo(option);
                if (data) {
                    const { releaseId, refresh } = data;
                    if (refresh && releaseId !== this.grayCache.releaseId) {
                        this.openNotify(data);
                    }
                }
            }
            this.watchGrayInfo(option, config);
        }), config.refresMillisec || 1000 * 10 * 60);
    }
    openNotify(data) {
        if (this.notify) {
            return;
        }
        const h = new Vue__default["default"]().$createElement;
        this.notify = mtdVue.Notification({
            title: '灰度发版刷新提示',
            duration: 0,
            offset: 56,
            onClose: () => __awaiter(this, void 0, void 0, function* () {
                this.notify = null;
            }),
            message: h('div', {}, [
                h('div', data.msg || '监测到当前环境存在最新发版功能, 是否现在刷新页面'),
                h('mtd-button', {
                    domProps: {
                        innerHTML: '现在刷新',
                    },
                    style: {
                        marginTop: '8px',
                        float: 'right',
                    },
                    props: {
                        type: 'primary',
                        size: 'small',
                    },
                    on: {
                        click() {
                            window.location.reload();
                        },
                    },
                }),
            ]),
        });
    }
}
var index$2 = new Gray();

/**
  * vue-class-component v7.2.6
  * (c) 2015-present Evan You
  * @license MIT
  */

function _typeof(obj) {
  if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
    _typeof = function (obj) {
      return typeof obj;
    };
  } else {
    _typeof = function (obj) {
      return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
    };
  }

  return _typeof(obj);
}

function _defineProperty(obj, key, value) {
  if (key in obj) {
    Object.defineProperty(obj, key, {
      value: value,
      enumerable: true,
      configurable: true,
      writable: true
    });
  } else {
    obj[key] = value;
  }

  return obj;
}

function _toConsumableArray(arr) {
  return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _nonIterableSpread();
}

function _arrayWithoutHoles(arr) {
  if (Array.isArray(arr)) {
    for (var i = 0, arr2 = new Array(arr.length); i < arr.length; i++) arr2[i] = arr[i];

    return arr2;
  }
}

function _iterableToArray(iter) {
  if (Symbol.iterator in Object(iter) || Object.prototype.toString.call(iter) === "[object Arguments]") return Array.from(iter);
}

function _nonIterableSpread() {
  throw new TypeError("Invalid attempt to spread non-iterable instance");
} // The rational behind the verbose Reflect-feature check below is the fact that there are polyfills
// which add an implementation for Reflect.defineMetadata but not for Reflect.getOwnMetadataKeys.
// Without this check consumers will encounter hard to track down runtime errors.


function reflectionIsSupported() {
  return typeof Reflect !== 'undefined' && Reflect.defineMetadata && Reflect.getOwnMetadataKeys;
}

function copyReflectionMetadata(to, from) {
  forwardMetadata(to, from);
  Object.getOwnPropertyNames(from.prototype).forEach(function (key) {
    forwardMetadata(to.prototype, from.prototype, key);
  });
  Object.getOwnPropertyNames(from).forEach(function (key) {
    forwardMetadata(to, from, key);
  });
}

function forwardMetadata(to, from, propertyKey) {
  var metaKeys = propertyKey ? Reflect.getOwnMetadataKeys(from, propertyKey) : Reflect.getOwnMetadataKeys(from);
  metaKeys.forEach(function (metaKey) {
    var metadata = propertyKey ? Reflect.getOwnMetadata(metaKey, from, propertyKey) : Reflect.getOwnMetadata(metaKey, from);

    if (propertyKey) {
      Reflect.defineMetadata(metaKey, metadata, to, propertyKey);
    } else {
      Reflect.defineMetadata(metaKey, metadata, to);
    }
  });
}

var fakeArray = {
  __proto__: []
};
var hasProto = fakeArray instanceof Array;

function createDecorator(factory) {
  return function (target, key, index) {
    var Ctor = typeof target === 'function' ? target : target.constructor;

    if (!Ctor.__decorators__) {
      Ctor.__decorators__ = [];
    }

    if (typeof index !== 'number') {
      index = undefined;
    }

    Ctor.__decorators__.push(function (options) {
      return factory(options, key, index);
    });
  };
}

function isPrimitive(value) {
  var type = _typeof(value);

  return value == null || type !== 'object' && type !== 'function';
}

function warn(message) {
  if (typeof console !== 'undefined') {
    console.warn('[vue-class-component] ' + message);
  }
}

function collectDataFromConstructor(vm, Component) {
  // override _init to prevent to init as Vue instance
  var originalInit = Component.prototype._init;

  Component.prototype._init = function () {
    var _this = this; // proxy to actual vm


    var keys = Object.getOwnPropertyNames(vm); // 2.2.0 compat (props are no longer exposed as self properties)

    if (vm.$options.props) {
      for (var key in vm.$options.props) {
        if (!vm.hasOwnProperty(key)) {
          keys.push(key);
        }
      }
    }

    keys.forEach(function (key) {
      Object.defineProperty(_this, key, {
        get: function get() {
          return vm[key];
        },
        set: function set(value) {
          vm[key] = value;
        },
        configurable: true
      });
    });
  }; // should be acquired class property values


  var data = new Component(); // restore original _init to avoid memory leak (#209)

  Component.prototype._init = originalInit; // create plain data object

  var plainData = {};
  Object.keys(data).forEach(function (key) {
    if (data[key] !== undefined) {
      plainData[key] = data[key];
    }
  });

  if (process.env.NODE_ENV !== 'production') {
    if (!(Component.prototype instanceof Vue__default["default"]) && Object.keys(plainData).length > 0) {
      warn('Component class must inherit Vue or its descendant class ' + 'when class property is used.');
    }
  }

  return plainData;
}

var $internalHooks = ['data', 'beforeCreate', 'created', 'beforeMount', 'mounted', 'beforeDestroy', 'destroyed', 'beforeUpdate', 'updated', 'activated', 'deactivated', 'render', 'errorCaptured', 'serverPrefetch' // 2.6
];

function componentFactory(Component) {
  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
  options.name = options.name || Component._componentTag || Component.name; // prototype props.

  var proto = Component.prototype;
  Object.getOwnPropertyNames(proto).forEach(function (key) {
    if (key === 'constructor') {
      return;
    } // hooks


    if ($internalHooks.indexOf(key) > -1) {
      options[key] = proto[key];
      return;
    }

    var descriptor = Object.getOwnPropertyDescriptor(proto, key);

    if (descriptor.value !== void 0) {
      // methods
      if (typeof descriptor.value === 'function') {
        (options.methods || (options.methods = {}))[key] = descriptor.value;
      } else {
        // typescript decorated data
        (options.mixins || (options.mixins = [])).push({
          data: function data() {
            return _defineProperty({}, key, descriptor.value);
          }
        });
      }
    } else if (descriptor.get || descriptor.set) {
      // computed properties
      (options.computed || (options.computed = {}))[key] = {
        get: descriptor.get,
        set: descriptor.set
      };
    }
  });
  (options.mixins || (options.mixins = [])).push({
    data: function data() {
      return collectDataFromConstructor(this, Component);
    }
  }); // decorate options

  var decorators = Component.__decorators__;

  if (decorators) {
    decorators.forEach(function (fn) {
      return fn(options);
    });
    delete Component.__decorators__;
  } // find super


  var superProto = Object.getPrototypeOf(Component.prototype);
  var Super = superProto instanceof Vue__default["default"] ? superProto.constructor : Vue__default["default"];
  var Extended = Super.extend(options);
  forwardStaticMembers(Extended, Component, Super);

  if (reflectionIsSupported()) {
    copyReflectionMetadata(Extended, Component);
  }

  return Extended;
}

var reservedPropertyNames = [// Unique id
'cid', // Super Vue constructor
'super', // Component options that will be used by the component
'options', 'superOptions', 'extendOptions', 'sealedOptions', // Private assets
'component', 'directive', 'filter'];
var shouldIgnore = {
  prototype: true,
  arguments: true,
  callee: true,
  caller: true
};

function forwardStaticMembers(Extended, Original, Super) {
  // We have to use getOwnPropertyNames since Babel registers methods as non-enumerable
  Object.getOwnPropertyNames(Original).forEach(function (key) {
    // Skip the properties that should not be overwritten
    if (shouldIgnore[key]) {
      return;
    } // Some browsers does not allow reconfigure built-in properties


    var extendedDescriptor = Object.getOwnPropertyDescriptor(Extended, key);

    if (extendedDescriptor && !extendedDescriptor.configurable) {
      return;
    }

    var descriptor = Object.getOwnPropertyDescriptor(Original, key); // If the user agent does not support `__proto__` or its family (IE <= 10),
    // the sub class properties may be inherited properties from the super class in TypeScript.
    // We need to exclude such properties to prevent to overwrite
    // the component options object which stored on the extended constructor (See #192).
    // If the value is a referenced value (object or function),
    // we can check equality of them and exclude it if they have the same reference.
    // If it is a primitive value, it will be forwarded for safety.

    if (!hasProto) {
      // Only `cid` is explicitly exluded from property forwarding
      // because we cannot detect whether it is a inherited property or not
      // on the no `__proto__` environment even though the property is reserved.
      if (key === 'cid') {
        return;
      }

      var superDescriptor = Object.getOwnPropertyDescriptor(Super, key);

      if (!isPrimitive(descriptor.value) && superDescriptor && superDescriptor.value === descriptor.value) {
        return;
      }
    } // Warn if the users manually declare reserved properties


    if (process.env.NODE_ENV !== 'production' && reservedPropertyNames.indexOf(key) >= 0) {
      warn("Static property name '".concat(key, "' declared on class '").concat(Original.name, "' ") + 'conflicts with reserved property name of Vue internal. ' + 'It may cause unexpected behavior of the component. Consider renaming the property.');
    }

    Object.defineProperty(Extended, key, descriptor);
  });
}

function Component(options) {
  if (typeof options === 'function') {
    return componentFactory(options);
  }

  return function (Component) {
    return componentFactory(Component, options);
  };
}

Component.registerHooks = function registerHooks(keys) {
  $internalHooks.push.apply($internalHooks, _toConsumableArray(keys));
};

undefined && undefined.__spreadArrays || function () {
  for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;

  for (var r = Array(s), k = 0, i = 0; i < il; i++) for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++) r[k] = a[j];

  return r;
}; // Code copied from Vue/src/shared/util.js

/** @see {@link https://github.com/vuejs/vue-class-component/blob/master/src/reflect.ts} */
var reflectMetadataIsSupported = typeof Reflect !== 'undefined' && typeof Reflect.getMetadata !== 'undefined';
function applyMetadata(options, target, key) {
  if (reflectMetadataIsSupported) {
    if (!Array.isArray(options) && typeof options !== 'function' && !options.hasOwnProperty('type') && typeof options.type === 'undefined') {
      var type = Reflect.getMetadata('design:type', target, key);

      if (type !== Object) {
        options.type = type;
      }
    }
  }
}

/**
 * decorator of a prop
 * @param  options the options for the prop
 * @return PropertyDecorator | void
 */

function Prop(options) {
  if (options === void 0) {
    options = {};
  }

  return function (target, key) {
    applyMetadata(options, target, key);
    createDecorator(function (componentOptions, k) {
      (componentOptions.props || (componentOptions.props = {}))[k] = options;
    })(target, key);
  };
}

/**
 * decorator of a watch function
 * @param  path the path or the expression to observe
 * @param  WatchOption
 * @return MethodDecorator
 */

function Watch(path, options) {
  if (options === void 0) {
    options = {};
  }

  var _a = options.deep,
      deep = _a === void 0 ? false : _a,
      _b = options.immediate,
      immediate = _b === void 0 ? false : _b;
  return createDecorator(function (componentOptions, handler) {
    if (typeof componentOptions.watch !== 'object') {
      componentOptions.watch = Object.create(null);
    }

    var watch = componentOptions.watch;

    if (typeof watch[path] === 'object' && !Array.isArray(watch[path])) {
      watch[path] = [watch[path]];
    } else if (typeof watch[path] === 'undefined') {
      watch[path] = [];
    }

    watch[path].push({
      handler: handler,
      deep: deep,
      immediate: immediate
    });
  });
}

function getCookie(name) {
    name += '=';
    const cookies = (document.cookie || '').split(';');
    let cookie;
    const nameLength = name.length;
    let i = cookies.length;
    while (i--) {
        cookie = cookies[i].replace(/^\s+/, '');
        if (cookie.slice(0, nameLength) === name) {
            return decodeURIComponent(cookie.slice(nameLength)).replace(/\s+$/, '');
        }
    }
    return '';
}
let baseUrl = '/api/moshu/api/v2';
if (getCookie('request_page_from') === 'mdbi_push') {
    baseUrl = '/msapi';
}
var baseURL = baseUrl;

function openReLoginMessage$1() {
    const reLoginManager = window.reLoginManager;
    if (reLoginManager) {
        reLoginManager.openLoginMessage();
    }
    else {
        reLogin.openLoginMessage();
    }
}
const { clientId: clientId$1 } = new SystemSetting().getSystemSetting();
const config$1 = {
    baseURL,
    timeout: 180000,
    headers: {
        ['x-requested-with']: 'XMLHttpRequest',
        ['Cache-Control']: 'no-cache',
        ['Content-Type']: 'application/json',
    },
    validateStatus() {
        return true;
    },
    responseType: 'json',
};
const request$1 = (req) => {
    const ssoid = api.get(`${clientId$1}_ssoid`) || '';
    const analogUser$1 = analogUser.get();
    req.headers['access-token'] = ssoid;
    req.headers['client-id'] = clientId$1;
    req.headers.projectId = spaceManager.getProjectId();
    if (analogUser$1.id) {
        req.headers['x-analoguser'] = analogUser$1.id;
    }
    return req;
};
const response$1 = (res) => {
    const conf = res.config;
    if (res.status === 401 || (res.data || {}).status === 401) {
        openReLoginMessage$1();
        return Promise.reject({
            type: 'STATUS_ERROR',
            code: 401,
            message: '登录失效, 请重新登录',
        });
    }
    if (res.status !== 200) {
        if (!conf.noToast) {
            mtdVue.Message({
                type: 'error',
                dangerouslyUseHTMLString: true,
                message: `<div>接口:${res.request.responseURL}</div>
          <div>状态码: ${res.status}</div>
          <div>提示信息: ${res.statusText}</div>`,
            });
        }
        throw new Error(res.statusText);
    }
    if (res.data.code !== 0) {
        if (!conf.noToast) {
            mtdVue.Message({
                type: 'error',
                dangerouslyUseHTMLString: true,
                message: `<div>错误提示: ${res.data.data}</div>
          <div>${res.data.message} 错误码:${res.data.code}:${res.data.traceId}</div>`,
            });
        }
        return Promise.reject(res.data);
    }
    return res.data;
};
const responseError$1 = (error) => {
    mtdVue.Message({
        showClose: true,
        type: 'warning',
        duration: 10000,
        message: '网络异常:' + error,
    });
    return Promise.reject({
        code: 40000,
        message: error,
        url: error && error.request && error.config.url,
    });
};
const service$1 = axios__default["default"].create(config$1);
service$1.interceptors.request.use(request$1);
service$1.interceptors.response.use(response$1, responseError$1);

function getProjectId(options) {
    return service$1.post('/safe/auth/project/getProject/byResource', options);
}

const CACHE_IN_MEMORY = {};
const STORAGE_KEY = 'SPACE_PROJECT_ID_BY_RESOURCE';
const STORAGE_COUNT_MAX = 50;
function getResouceKey(resourceId, appType) {
    return `${resourceId}_${appType}`;
}
function getProjectIdFromLocalStorage(resourceId, appType) {
    try {
        const localStorageDataStr = window.localStorage.getItem(STORAGE_KEY);
        if (!localStorageDataStr) {
            return null;
        }
        const key = getResouceKey(resourceId, appType);
        const projectList = JSON.parse(localStorageDataStr);
        const projectInfo = projectList.find((item) => {
            return item.key === key;
        });
        if (!projectInfo) {
            return null;
        }
        return projectInfo.value;
    }
    catch (error) {
        console.log('getProjectIdFromLocalStorage: ', error);
        return null;
    }
}
function removeLocalStorage(resourceId, appType) {
    try {
        const key = getResouceKey(resourceId, appType);
        window.localStorage.removeItem(key);
    }
    catch (error) {
        console.log('removeLocalStorage: ', error);
        return;
    }
}
function setProjectIdToLocalStorage(resourceId, appType, projectId) {
    try {
        let projectList = [];
        const localStorageDataStr = window.localStorage.getItem(STORAGE_KEY);
        if (localStorageDataStr) {
            projectList = JSON.parse(localStorageDataStr);
        }
        const key = getResouceKey(resourceId, appType);
        const oldIndex = projectList.findIndex((item) => {
            return item.key === key;
        });
        if (oldIndex !== -1) {
            projectList.splice(oldIndex, 1);
        }
        if (projectList.length > STORAGE_COUNT_MAX) {
            projectList.splice(0, 1);
        }
        projectList.push({
            key: getResouceKey(resourceId, appType),
            value: projectId,
        });
        window.localStorage.setItem(STORAGE_KEY, JSON.stringify(projectList));
    }
    catch (error) {
        console.log('setProjectIdToLocalStorage: ', error);
        removeLocalStorage(resourceId, appType);
        return;
    }
}
function getProjectIdFromMemory(resourceId, appType) {
    const key = getResouceKey(resourceId, appType);
    const projectIdFromMemory = CACHE_IN_MEMORY[key];
    if (projectIdFromMemory !== undefined) {
        return projectIdFromMemory;
    }
    return null;
}
function setProjectIdToMemory(resourceId, appType, projectId) {
    const key = getResouceKey(resourceId, appType);
    CACHE_IN_MEMORY[key] = projectId;
}
function getProjectIdFromCache(resourceId, appType, useLocalStorage) {
    const projectIdFromMemory = getProjectIdFromMemory(resourceId, appType);
    if (projectIdFromMemory !== null) {
        return projectIdFromMemory;
    }
    if (useLocalStorage) {
        const projectIdFromLocalStorage = getProjectIdFromLocalStorage(resourceId, appType);
        if (projectIdFromLocalStorage !== null) {
            setProjectIdToMemory(resourceId, appType, projectIdFromLocalStorage);
        }
        return projectIdFromLocalStorage;
    }
    return null;
}
function setProjectIdToCache(resourceId, appType, projectId) {
    setProjectIdToMemory(resourceId, appType, projectId);
    setProjectIdToLocalStorage(resourceId, appType, projectId);
}

const PERSONAL_PROJECT_ID = 0;
function isMailOrPortal() {
    return window.location.pathname.indexOf('/mail') === 0 || window.location.pathname.indexOf('/portal') === 0;
}
class SpaceManager {
    constructor() {
        this.projectInfo = {
            id: PERSONAL_PROJECT_ID,
        };
        this.updateProjectPromise = null;
        this.router = null;
        this.curRoute = null;
    }
    getProjectIdByResource(resourceId, appType, useLocalStorage) {
        return __awaiter(this, void 0, void 0, function* () {
            const projectIdFromCache = getProjectIdFromCache(resourceId, appType, useLocalStorage);
            if (projectIdFromCache !== null) {
                return projectIdFromCache;
            }
            const res = yield getProjectId({ id: resourceId, appType: appType });
            const projectIdFromApi = res.data || 0;
            setProjectIdToCache(resourceId, appType, projectIdFromApi);
            return projectIdFromApi;
        });
    }
    saveListProjectId(to) {
        var _a;
        const meta = (to.meta || {});
        if ((_a = meta.authConfig) === null || _a === void 0 ? void 0 : _a.isRecorvery) {
            this.listPageProjectId = this.projectInfo.id;
        }
    }
    getListProjectIdForNavigationGuard(to) {
        var _a;
        const meta = (to.meta || {});
        if (!((_a = meta.authConfig) === null || _a === void 0 ? void 0 : _a.isRecorvery)) {
            return null;
        }
        if (this.listPageProjectId === undefined) {
            return null;
        }
        const listPageProjectId = this.listPageProjectId;
        this.listPageProjectId = undefined;
        return listPageProjectId;
    }
    getProjectIdByResourceForNavigationGuard(to) {
        var _a;
        const meta = (to.meta || {});
        if (!meta.resourceConfig) {
            throw new Error(`路由「${to.path}」meta中没有设置resourceConfig`);
        }
        const params = to.params;
        const reousceId = meta.resourceConfig.resourceId
            ? meta.resourceConfig.resourceId(to)
            : meta.resourceConfig.resourceIdKey
                ? params[meta.resourceConfig.resourceIdKey]
                : null;
        if (!reousceId) {
            return null;
        }
        return this.getProjectIdByResource(reousceId, meta.resourceConfig.resourceType, (_a = meta.authConfig) === null || _a === void 0 ? void 0 : _a.useLocalStorageWhenCheckResource);
    }
    updateProjectIdForNavigationGuard(newProjectId, to, next) {
        this.projectInfo.id = newProjectId;
        this.saveListProjectId(to);
        next();
    }
    wrapRouter(router) {
        router.beforeEach((to, from, next) => __awaiter(this, void 0, void 0, function* () {
            var _a;
            if (to.path === from.path) {
                next();
                return;
            }
            if (isMailOrPortal()) {
                this.updateProjectIdForNavigationGuard(PERSONAL_PROJECT_ID, to, next);
                return;
            }
            let newProjectId = this.getListProjectIdForNavigationGuard(to);
            if (newProjectId !== null) {
                this.updateProjectIdForNavigationGuard(newProjectId, to, next);
                return;
            }
            const meta = (to.meta || {});
            if ((_a = meta.authConfig) === null || _a === void 0 ? void 0 : _a.isCheckResource) {
                newProjectId = yield this.getProjectIdByResourceForNavigationGuard(to);
                if (newProjectId !== null) {
                    this.updateProjectIdForNavigationGuard(newProjectId, to, next);
                    return;
                }
            }
            newProjectId = Number(to.query.projectId);
            if (Number.isNaN(newProjectId) || newProjectId < PERSONAL_PROJECT_ID) {
                newProjectId = this.projectInfo.id || PERSONAL_PROJECT_ID;
            }
            this.updateProjectIdForNavigationGuard(newProjectId, to, next);
        }));
        router.afterEach((to) => {
            this.curRoute = to;
        });
        this.router = router;
    }
    isInPersonalSpace() {
        return this.projectInfo.id === PERSONAL_PROJECT_ID;
    }
    setProjectId(projectId) {
        if (this.projectInfo.id === projectId) {
            return;
        }
        this.projectInfo.id = projectId;
        if (!this.curRoute) {
            throw new Error('路由query参数替换失败：无法获取当前路由');
        }
        this.saveListProjectId(this.curRoute);
        if (!this.router) {
            return;
        }
        if (Number(this.curRoute.query.projectId) === projectId) {
            return;
        }
        this.router
            .replace({
            path: this.curRoute.path,
            query: Object.assign(Object.assign({}, this.curRoute.query), { projectId: `${this.projectInfo.id}` }),
        })
            .catch((err) => console.log(err));
        return true;
    }
    getProjectId() {
        return this.projectInfo.id;
    }
    getProjectInfo() {
        return this.projectInfo;
    }
    updateProjectIdByResourceId(resourceId, appType) {
        const updateProjectPromise = this.getProjectIdByResource(resourceId, appType).then((projectId) => {
            if (this.updateProjectPromise !== updateProjectPromise) {
                return;
            }
            this.projectInfo.id = projectId;
            this.updateProjectPromise = null;
        });
        this.updateProjectPromise = updateProjectPromise;
        return updateProjectPromise;
    }
    awaitReady() {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.updateProjectPromise) {
                yield this.updateProjectPromise;
            }
        });
    }
    getProjectIdAsync() {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.awaitReady();
            return this.projectInfo.id;
        });
    }
}
var spaceManager = new SpaceManager();

function actionAuth(params) {
    return service$1.post('/safe/auth/doAuth/byAction', params);
}
function fetchAuthUser(params) {
    return service$1.post('/safe/auth/queryUser', params);
}

var appTypeMap = {
    DATASET: 'TABLE',
};

function parseActionStr(action) {
    const actionInfo = action.split('-');
    return {
        appType: actionInfo[0],
        subType: actionInfo[1],
        realAction: actionInfo[2],
    };
}
function resolveAuthParam(paramList, mis) {
    return paramList.map((item) => {
        const { appType, subType, realAction } = parseActionStr(item.action);
        let resources = null;
        if (item.subResources) {
            resources = Object.assign({ appType, subType: 'APP', id: item.id }, item.queryInfo);
            resources.subResources = [
                Object.assign({ id: item.subResources.id, extra: item.subResources.extra, appType,
                    subType }, item.queryInfo),
            ];
        }
        else {
            resources = Object.assign({ appType,
                subType, id: item.id }, item.queryInfo);
        }
        return {
            mis,
            projectId: spaceManager.getProjectId(),
            targetProjectId: item.targetProjectId,
            resources,
            authAction: {
                userAction: realAction,
            },
            online: item.online,
        };
    });
}
function resolveAuthRes(paramList, resData) {
    if (!resData) {
        return [];
    }
    return resData.map((item, index) => {
        const newResItem = Object.assign(Object.assign({}, item), { params: paramList[index], subAuthResults: resolveAuthRes(paramList, item.subAuthResults) });
        if (newResItem.safeMetaResult) {
            if (!newResItem.safeMetaResult.isSafeEnvironment &&
                newResItem.safeMetaResult.safeMeta &&
                newResItem.safeMetaResult.outbaseStatus !== 'OUTBASED') {
                newResItem.safeMetaResult.invalid = true;
            }
        }
        return newResItem;
    });
}
class AuthManager {
    constructor() {
        this.authorizationUrl = `${window.location.origin}/dacs/nav/active-authorization`;
        this.oldMonitorAuthorizationUrl = window.__ENV__ === 'production' ? 'https://auth.sankuai.com/add' : 'https://auth.bi.st.sankuai.com/add';
        this.authManageUrl = `${window.location.origin}/dacs/nav/authorization-setting`;
    }
    parseAction(action) {
        return parseActionStr(action);
    }
    multiAuth(mis, paramList) {
        return __awaiter(this, void 0, void 0, function* () {
            yield spaceManager.awaitReady();
            const apiParams = resolveAuthParam(paramList, mis);
            const res = yield actionAuth(apiParams);
            return resolveAuthRes(apiParams, res.data);
        });
    }
    singleAuth(mis, param) {
        return __awaiter(this, void 0, void 0, function* () {
            const res = yield this.multiAuth(mis, [param]);
            return res[0];
        });
    }
    goNoAuthPage(authRes, desc) {
        const { appType, id } = authRes.params.resources;
        const jiangjunlingAppType = appTypeMap[appType] || appType;
        const returnUrl = window.location.href;
        window.location.href = `${window.location.origin}/space/no-auth?appType=${jiangjunlingAppType}&id=${id}&text=${desc}&returnUrl=${returnUrl}`;
    }
    goAuthorizationPage(moshuAppType, resourceId, isMonitorOld) {
        const appType = appTypeMap[moshuAppType] || moshuAppType;
        if (isMonitorOld) {
            window.open(`${this.oldMonitorAuthorizationUrl}?resourceCode=mdbi_monitor_report_${resourceId}&resoucreType=报表&system=mdbi_monitor`, '_blank');
        }
        else {
            window.open(`${this.authorizationUrl}?code=${appType}::${resourceId}`, '_blank');
        }
    }
    goAuthManagePage(code) {
        window.open(`${this.authManageUrl}?code=${code}`, '_blank');
    }
    getUserByAction(param) {
        return __awaiter(this, void 0, void 0, function* () {
            const resolvedParam = resolveAuthParam([param], '');
            const res = yield fetchAuthUser(resolvedParam.map((item) => {
                return {
                    resources: item.resources,
                    authAction: item.authAction,
                };
            }));
            const resData = (res.data || [])[0];
            return (resData && resData.users) || [];
        });
    }
}
var authManager = new AuthManager();

const actionMap = {
    DASHBOARD: {
        APP: {
            DELETE: 'DASHBOARD-APP-DELETE',
            CREATE: 'DASHBOARD-APP-CREATE',
            HANDOVER: 'DASHBOARD-APP-HANDOVER',
            GO_OFFLINE: 'DASHBOARD-APP-GO_OFFLINE',
            EDIT: 'DASHBOARD-APP-EDIT',
            VIEW: 'DASHBOARD-APP-VIEW',
            ROLLBACK: 'DASHBOARD-APP-ROLLBACK',
            GO_ONLINE: 'DASHBOARD-APP-GO_ONLINE',
            AUTH_APPLY: 'DASHBOARD-APP-AUTH_APPLY',
            AUTH_MANAGE: 'DASHBOARD-APP-AUTH_MANAGE',
            OUTBASE: 'DASHBOARD-APP-OUTBASE',
            REVOKE_OUTBASE: 'DASHBOARD-APP-REVOKE_OUTBASE',
            SYSTEM_SAFEMETA: 'DASHBOARD-APP-SYSTEM_SAFEMETA',
            EXPORT: 'DASHBOARD-APP-EXPORT',
        },
        DATASOURCE: { EXECUTION: 'DASHBOARD-DATASOURCE-EXECUTION' },
        DATAPUSH: {
            DELETE: 'DASHBOARD-DATAPUSH-DELETE',
            GO_OFFLINE: 'DASHBOARD-DATAPUSH-GO_OFFLINE',
            EDIT: 'DASHBOARD-DATAPUSH-EDIT',
            GO_ONLINE: 'DASHBOARD-DATAPUSH-GO_ONLINE',
            CREATE: 'DASHBOARD-DATAPUSH-CREATE',
            EXECUTION: 'DASHBOARD-DATAPUSH-EXECUTION',
            RECEIVE: 'DASHBOARD-DATAPUSH-RECEIVE',
        },
        COMPONENT: { VIEW: 'DASHBOARD-COMPONENT-VIEW' },
        FILTER: { VIEW: 'DASHBOARD-FILTER-VIEW' },
        TAB: { VIEW: 'DASHBOARD-TAB-VIEW' },
        SCHEDULE: {
            DELETE: 'DASHBOARD-SCHEDULE-DELETE',
            GO_OFFLINE: 'DASHBOARD-SCHEDULE-GO_OFFLINE',
            EXECUTION: 'DASHBOARD-SCHEDULE-EXECUTION',
            EDIT: 'DASHBOARD-SCHEDULE-EDIT',
            GO_ONLINE: 'DASHBOARD-SCHEDULE-GO_ONLINE',
            VIEW: 'DASHBOARD-SCHEDULE-VIEW',
        },
    },
    SQL: {
        APP: {
            CREATE: 'SQL-APP-CREATE',
            EDIT: 'SQL-APP-EDIT',
            EXECUTION: 'SQL-APP-EXECUTION',
            VIEW: 'SQL-APP-VIEW',
            AUTH_APPLY: 'SQL-APP-AUTH_APPLY',
            AUTH_MANAGE: 'SQL-APP-AUTH_MANAGE',
            DELETE: 'SQL-APP-DELETE',
            SAVE: 'SQL-APP-SAVE',
        },
        DATASOURCE: { EXECUTION: 'SQL-DATASOURCE-EXECUTION', SYSTEM_SAFEMETA: 'SQL-DATASOURCE-SYSTEM_SAFEMETA' },
        TABLE: { EXECUTION: 'SQL-TABLE-EXECUTION', SYSTEM_SAFEMETA: 'SQL-TABLE-SYSTEM_SAFEMETA' },
        RESULT: { VIEW: 'SQL-RESULT-VIEW', EXPORT: 'SQL-RESULT-EXPORT', KILL: 'SQL-RESULT-KILL' },
    },
    WORMHOLE: {
        APP: {
            CREATE: 'WORMHOLE-APP-CREATE',
            EDIT: 'WORMHOLE-APP-EDIT',
            VIEW: 'WORMHOLE-APP-VIEW',
            EXECUTION: 'WORMHOLE-APP-EXECUTION',
            DELETE: 'WORMHOLE-APP-DELETE',
            GO_ONLINE: 'WORMHOLE-APP-GO_ONLINE',
            GO_OFFLINE: 'WORMHOLE-APP-GO_OFFLINE',
            AUTH_APPLY: 'WORMHOLE-APP-AUTH_APPLY',
            AUTH_MANAGE: 'WORMHOLE-APP-AUTH_MANAGE',
        },
        DATASOURCE: { EXECUTION: 'WORMHOLE-DATASOURCE-EXECUTION' },
        RESULT: { EXPORT: 'WORMHOLE-RESULT-EXPORT', KILL: 'WORMHOLE-RESULT-KILL' },
    },
    MONITOR: {
        APP: {
            CREATE: 'MONITOR-APP-CREATE',
            EDIT: 'MONITOR-APP-EDIT',
            VIEW: 'MONITOR-APP-VIEW',
            EXECUTION: 'MONITOR-APP-EXECUTION',
            DELETE: 'MONITOR-APP-DELETE',
            GO_ONLINE: 'MONITOR-APP-GO_ONLINE',
            GO_OFFLINE: 'MONITOR-APP-GO_OFFLINE',
            AUTH_APPLY: 'MONITOR-APP-AUTH_APPLY',
            AUTH_MANAGE: 'MONITOR-APP-AUTH_MANAGE',
            RECEIVE: 'MONITOR-APP-RECEIVE',
            KILL: 'MONITOR-APP-KILL',
        },
        DATASOURCE: { EXECUTION: 'MONITOR-DATASOURCE-EXECUTION' },
    },
    PORTAL: {
        APP: {
            CREATE: 'PORTAL-APP-CREATE',
            EDIT: 'PORTAL-APP-EDIT',
            VIEW: 'PORTAL-APP-VIEW',
            DELETE: 'PORTAL-APP-DELETE',
            GO_ONLINE: 'PORTAL-APP-GO_ONLINE',
            GO_OFFLINE: 'PORTAL-APP-GO_OFFLINE',
            AUTH_APPLY: 'PORTAL-APP-AUTH_APPLY',
            AUTH_MANAGE: 'PORTAL-APP-AUTH_MANAGE',
        },
        TREE: {
            VIEW: 'PORTAL-TREE-VIEW',
        },
    },
    DATASET: {
        APP: {
            EDIT: 'DATASET-APP-EDIT',
            VIEW: 'DATASET-APP-VIEW',
            EXECUTION: 'DATASET-APP-EXECUTION',
            DELETE: 'DATASET-APP-DELETE',
            VIEW_SQL: 'DATASET-APP-VIEW_SQL',
            REFRESH: 'DATASET-APP-REFRESH',
            AUTH_APPLY: 'DATASET-APP-AUTH_APPLY',
            AUTH_MANAGE: 'DATASET-APP-AUTH_MANAGE',
        },
        DATASOURCE: {
            EXECUTION: 'DATASET-DATASOURCE-EXECUTION',
        },
    },
    LID: {
        SAFEMETA: {
            CHECK: 'LID-SAFEMETA-CHECK',
        },
    },
    NOT: { FOUND: { NOT_FOUND: 'NOT-FOUND-NOT_FOUND' } },
};
var ApplyStatus;
(function (ApplyStatus) {
    ApplyStatus["SUCCESS"] = "success";
    ApplyStatus["FAIL"] = "fail";
    ApplyStatus["NO_OPERATE"] = "no-operate";
})(ApplyStatus || (ApplyStatus = {}));

var constants = /*#__PURE__*/Object.freeze({
  __proto__: null,
  actionMap: actionMap,
  get ApplyStatus () { return ApplyStatus; }
});

Vue__default["default"].use(AuthApplyDynamic__default["default"]);
let JiangjunlingApplyModal = class JiangjunlingApplyModal extends Vue__default["default"] {
    constructor() {
        super(...arguments);
        this.status = ApplyStatus.NO_OPERATE;
    }
    get jiangjunlingAppType() {
        return appTypeMap[this.appType] || this.appType;
    }
    get env() {
        return window.__ENV__ === 'st' ? 'staging' : window.__ENV__;
    }
    get params() {
        if (this.isMonitorOld) {
            return {
                system: 'mdbi_monitor',
                resourceCode: [`mdbi_monitor_report_${this.id}`],
                misId: this.misId,
            };
        }
        return {
            system: 'MOSHU',
            resourceCode: [`MOSHU::${this.jiangjunlingAppType}::${this.id}`],
            misId: this.misId,
        };
    }
    get $value() {
        return this.value;
    }
    set $value(v) {
        this.$emit('update:value', v);
    }
    handleInput(v) {
        if (!v) {
            this.emitFinishEvent();
        }
    }
    handleStatus(v) {
        this.status = v;
    }
    handleInitFail() {
        this.status = ApplyStatus.FAIL;
        this.emitFinishEvent();
    }
    emitFinishEvent() {
        if (this.status === ApplyStatus.SUCCESS) {
            this.$mtd.message({
                message: '申请已发起，请等待审批通过',
                type: 'success',
            });
        }
        this.$emit('finish', this.status);
    }
};
__decorate([
    Prop({
        type: String,
        required: true,
    }),
    __metadata("design:type", String)
], JiangjunlingApplyModal.prototype, "appType", void 0);
__decorate([
    Prop({
        type: String,
        required: true,
    }),
    __metadata("design:type", String)
], JiangjunlingApplyModal.prototype, "misId", void 0);
__decorate([
    Prop({
        type: String,
        required: true,
    }),
    __metadata("design:type", String)
], JiangjunlingApplyModal.prototype, "id", void 0);
__decorate([
    Prop({
        type: Boolean,
        default: false,
    }),
    __metadata("design:type", Boolean)
], JiangjunlingApplyModal.prototype, "isMonitorOld", void 0);
__decorate([
    Prop({
        type: Boolean,
        required: true,
    }),
    __metadata("design:type", Boolean)
], JiangjunlingApplyModal.prototype, "value", void 0);
JiangjunlingApplyModal = __decorate([
    Component
], JiangjunlingApplyModal);
var script$3 = JiangjunlingApplyModal;

function normalizeComponent(template, style, script, scopeId, isFunctionalTemplate, moduleIdentifier
/* server only */
, shadowMode, createInjector, createInjectorSSR, createInjectorShadow) {
  if (typeof shadowMode !== 'boolean') {
    createInjectorSSR = createInjector;
    createInjector = shadowMode;
    shadowMode = false;
  } // Vue.extend constructor export interop.


  const options = typeof script === 'function' ? script.options : script; // render functions

  if (template && template.render) {
    options.render = template.render;
    options.staticRenderFns = template.staticRenderFns;
    options._compiled = true; // functional template

    if (isFunctionalTemplate) {
      options.functional = true;
    }
  } // scopedId


  if (scopeId) {
    options._scopeId = scopeId;
  }

  let hook;

  if (moduleIdentifier) {
    // server build
    hook = function (context) {
      // 2.3 injection
      context = context || // cached call
      this.$vnode && this.$vnode.ssrContext || // stateful
      this.parent && this.parent.$vnode && this.parent.$vnode.ssrContext; // functional
      // 2.2 with runInNewContext: true

      if (!context && typeof __VUE_SSR_CONTEXT__ !== 'undefined') {
        context = __VUE_SSR_CONTEXT__;
      } // inject component styles


      if (style) {
        style.call(this, createInjectorSSR(context));
      } // register component module identifier for async chunk inference


      if (context && context._registeredComponents) {
        context._registeredComponents.add(moduleIdentifier);
      }
    }; // used by ssr in case component is cached and beforeCreate
    // never gets called


    options._ssrRegister = hook;
  } else if (style) {
    hook = shadowMode ? function (context) {
      style.call(this, createInjectorShadow(context, this.$root.$options.shadowRoot));
    } : function (context) {
      style.call(this, createInjector(context));
    };
  }

  if (hook) {
    if (options.functional) {
      // register for functional component in vue file
      const originalRender = options.render;

      options.render = function renderWithStyleInjection(h, context) {
        hook.call(context);
        return originalRender(h, context);
      };
    } else {
      // inject component registration as beforeCreate hook
      const existing = options.beforeCreate;
      options.beforeCreate = existing ? [].concat(existing, hook) : [hook];
    }
  }

  return script;
}

const isOldIE = typeof navigator !== 'undefined' && /msie [6-9]\\b/.test(navigator.userAgent.toLowerCase());

function createInjector(context) {
  return (id, style) => addStyle(id, style);
}

let HEAD;
const styles = {};

function addStyle(id, css) {
  const group = isOldIE ? css.media || 'default' : id;
  const style = styles[group] || (styles[group] = {
    ids: new Set(),
    styles: []
  });

  if (!style.ids.has(id)) {
    style.ids.add(id);
    let code = css.source;

    if (css.map) {
      // https://developer.chrome.com/devtools/docs/javascript-debugging
      // this makes source maps inside style tags work properly in Chrome
      code += '\n/*# sourceURL=' + css.map.sources[0] + ' */'; // http://stackoverflow.com/a/26603875

      code += '\n/*# sourceMappingURL=data:application/json;base64,' + btoa(unescape(encodeURIComponent(JSON.stringify(css.map)))) + ' */';
    }

    if (!style.element) {
      style.element = document.createElement('style');
      style.element.type = 'text/css';
      if (css.media) style.element.setAttribute('media', css.media);

      if (HEAD === undefined) {
        HEAD = document.head || document.getElementsByTagName('head')[0];
      }

      HEAD.appendChild(style.element);
    }

    if ('styleSheet' in style.element) {
      style.styles.push(code);
      style.element.styleSheet.cssText = style.styles.filter(Boolean).join('\n');
    } else {
      const index = style.ids.size - 1;
      const textNode = document.createTextNode(code);
      const nodes = style.element.childNodes;
      if (nodes[index]) style.element.removeChild(nodes[index]);
      if (nodes.length) style.element.insertBefore(textNode, nodes[index]);else style.element.appendChild(textNode);
    }
  }
}

/* script */
const __vue_script__$3 = script$3;

/* template */
var __vue_render__$3 = function () {
  var _vm = this;
  var _h = _vm.$createElement;
  var _c = _vm._self._c || _h;
  return _c("AuthApplyDynamic", {
    attrs: { env: _vm.env, params: _vm.params },
    on: {
      input: _vm.handleInput,
      status: _vm.handleStatus,
      initFail: _vm.handleInitFail,
    },
    model: {
      value: _vm.$value,
      callback: function ($$v) {
        _vm.$value = $$v;
      },
      expression: "$value",
    },
  })
};
var __vue_staticRenderFns__$3 = [];
__vue_render__$3._withStripped = true;

  /* style */
  const __vue_inject_styles__$3 = function (inject) {
    if (!inject) return
    inject("data-v-04218e9c_0", { source: "\n\n/*# sourceMappingURL=JiangjunlingApplyModal.vue.map */", map: {"version":3,"sources":["JiangjunlingApplyModal.vue"],"names":[],"mappings":";;AAEA,qDAAqD","file":"JiangjunlingApplyModal.vue"}, media: undefined });

  };
  /* scoped */
  const __vue_scope_id__$3 = "data-v-04218e9c";
  /* module identifier */
  const __vue_module_identifier__$3 = undefined;
  /* functional template */
  const __vue_is_functional_template__$3 = false;
  /* style inject SSR */
  
  /* style inject shadow dom */
  

  
  const __vue_component__$3 = /*#__PURE__*/normalizeComponent(
    { render: __vue_render__$3, staticRenderFns: __vue_staticRenderFns__$3 },
    __vue_inject_styles__$3,
    __vue_script__$3,
    __vue_scope_id__$3,
    __vue_is_functional_template__$3,
    __vue_module_identifier__$3,
    false,
    createInjector,
    undefined,
    undefined
  );

var AuthStatus;
(function (AuthStatus) {
    AuthStatus[AuthStatus["WAIT"] = 0] = "WAIT";
    AuthStatus[AuthStatus["LOADING"] = 1] = "LOADING";
    AuthStatus[AuthStatus["FINISH"] = 2] = "FINISH";
})(AuthStatus || (AuthStatus = {}));
var FailTreatType;
(function (FailTreatType) {
    FailTreatType["HIDE"] = "hide";
    FailTreatType["TOOLTIP"] = "tooltip";
})(FailTreatType || (FailTreatType = {}));
var PermissionType;
(function (PermissionType) {
    PermissionType[PermissionType["NO"] = 0] = "NO";
    PermissionType["ALL"] = "ALL";
    PermissionType["PART"] = "PART";
})(PermissionType || (PermissionType = {}));
var InvalidSlot;
(function (InvalidSlot) {
    InvalidSlot["AUTH_TOOLTIP_CONTENT"] = "auth-tooltip-content";
})(InvalidSlot || (InvalidSlot = {}));
var NoPermissionType;
(function (NoPermissionType) {
    NoPermissionType[NoPermissionType["NONE"] = 0] = "NONE";
    NoPermissionType[NoPermissionType["SAFEMETA"] = 1] = "SAFEMETA";
    NoPermissionType[NoPermissionType["TABLE"] = 2] = "TABLE";
    NoPermissionType[NoPermissionType["RESOURCE"] = 3] = "RESOURCE";
})(NoPermissionType || (NoPermissionType = {}));
let AuthWrapper = class AuthWrapper extends Vue__default["default"] {
    constructor() {
        super(...arguments);
        this.tooltipVisible = false;
        this.authStatus = AuthStatus.WAIT;
        this.permissionType = PermissionType.ALL;
        this.showApplyModal = false;
        this.noPermissionText = '';
        this.noPermissionType = NoPermissionType.NONE;
    }
    get appType() {
        if (!this.options || !this.options.action) {
            return '';
        }
        const { appType } = authManager.parseAction(this.options.action);
        return appType || '';
    }
    get authDisabled() {
        return !this.hasPermission && this.authStatus !== AuthStatus.WAIT;
    }
    get realFailTreatType() {
        return this.options.failTreatType || FailTreatType.TOOLTIP;
    }
    get realNeedPermissionType() {
        return this.options.needPermissionType === undefined ? PermissionType.PART : this.options.needPermissionType;
    }
    get hasPermission() {
        return this.realNeedPermissionType === PermissionType.PART
            ? [PermissionType.PART, PermissionType.ALL].includes(this.permissionType)
            : this.permissionType === PermissionType.ALL;
    }
    get isLoading() {
        return this.authStatus === AuthStatus.LOADING;
    }
    get tooltipDisabled() {
        return this.authStatus !== AuthStatus.FINISH || this.hasPermission;
    }
    get isShow() {
        if (this.realFailTreatType === FailTreatType.TOOLTIP) {
            return true;
        }
        if (this.authStatus !== AuthStatus.FINISH) {
            return false;
        }
        return this.hasPermission;
    }
    get showResourceApplyBtn() {
        return this.noPermissionType === NoPermissionType.RESOURCE;
    }
    get isAuthManageAction() {
        const { actionMap } = constants;
        const authManageList = [
            actionMap.DASHBOARD.APP.AUTH_MANAGE,
            actionMap.SQL.APP.AUTH_MANAGE,
            actionMap.WORMHOLE.APP.AUTH_MANAGE,
            actionMap.MONITOR.APP.AUTH_MANAGE,
            actionMap.PORTAL.APP.AUTH_MANAGE
        ];
        return authManageList.includes(this.options.action);
    }
    onOptionsChange() {
        this.reset();
    }
    reset() {
        this.authStatus = AuthStatus.WAIT;
        this.permissionType = PermissionType.ALL;
    }
    auth() {
        return __awaiter(this, void 0, void 0, function* () {
            try {
                this.authStatus = AuthStatus.LOADING;
                this.permissionType = PermissionType.NO;
                const res = yield authManager.singleAuth(this.options.mis, this.options);
                this.resolveAuthRes(res);
                this.authStatus = AuthStatus.FINISH;
                if (!this.hasPermission) {
                    this.tooltipVisible = true;
                }
                this.emitAuthClickEvent();
            }
            catch (error) {
                this.reset();
                throw error;
            }
        });
    }
    handleApply() {
        return __awaiter(this, void 0, void 0, function* () {
            this.showApplyModal = true;
        });
    }
    handleClick() {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.disabled) {
                return;
            }
            if (this.isLoading || !this.hasPermission) {
                return;
            }
            if (!this.optionsIsValid()) {
                this.permissionType = PermissionType.ALL;
                this.emitAuthClickEvent();
                return;
            }
            this.auth();
        });
    }
    emitAuthClickEvent() {
        if (this.hasPermission) {
            this.$emit('auth-click');
        }
    }
    optionsIsValid() {
        if (this.options.noOptionsCheck) {
            return true;
        }
        const { id, action, mis } = this.options;
        return id && action && mis;
    }
    resolveAuthResItem(res) {
        if (res.hasPermission) {
            const childResList = (res.subAuthResults || []);
            for (let childRes of childResList) {
                const resolvedInfoOfChild = this.resolveAuthResItem(childRes);
                if (resolvedInfoOfChild) {
                    return resolvedInfoOfChild;
                }
            }
            return null;
        }
        const permissionType = PermissionType.NO;
        let noPermissionType = NoPermissionType.NONE;
        const noPermissionTextList = [];
        if ((res === null || res === void 0 ? void 0 : res.safeMetaResult) && (res === null || res === void 0 ? void 0 : res.safeMetaResult.invalid)) {
            noPermissionType = NoPermissionType.SAFEMETA;
            noPermissionTextList.push('当前资源使用了安全底表，请登录金融堡垒机操作（<a href="https://km.sankuai.com/page/143144616" target="_blank">堡垒机使用第一篇</a>）');
        }
        else if ((res === null || res === void 0 ? void 0 : res.tableAuthResults) && res.tableAuthResults.length > 0) {
            noPermissionType = NoPermissionType.TABLE;
            noPermissionTextList.push('无以下库表权限，请申请：');
            noPermissionTextList.push(...res.tableAuthResults.map((item) => {
                return `${item.db}.${item.table} ${item.url}`;
            }));
        }
        else if (res.authCode && !this.isAuthManageAction) {
            noPermissionType = NoPermissionType.RESOURCE;
            noPermissionTextList.push('无该资源的操作权限');
        }
        else {
            noPermissionType = NoPermissionType.NONE;
            noPermissionTextList.push('无该资源的操作权限');
        }
        return {
            permissionType,
            noPermissionType,
            noPermissionText: noPermissionTextList.join('<br>')
        };
    }
    resolveAuthRes(res) {
        const resolvedInfo = this.resolveAuthResItem(res);
        if (!resolvedInfo) {
            this.permissionType = (res.permissionType || PermissionType.ALL);
            this.noPermissionType = NoPermissionType.NONE;
            return;
        }
        this.permissionType = resolvedInfo.permissionType;
        this.noPermissionType = resolvedInfo.noPermissionType;
        this.noPermissionText = resolvedInfo.noPermissionText;
    }
};
__decorate([
    Prop(Object),
    __metadata("design:type", Object)
], AuthWrapper.prototype, "options", void 0);
__decorate([
    Prop(Boolean),
    __metadata("design:type", Boolean)
], AuthWrapper.prototype, "disabled", void 0);
__decorate([
    Watch('options', { immediate: true }),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", []),
    __metadata("design:returntype", void 0)
], AuthWrapper.prototype, "onOptionsChange", null);
AuthWrapper = __decorate([
    Component({
        components: {
            JiangjunlingApplyModal: __vue_component__$3,
        },
    })
], AuthWrapper);
var script$2 = AuthWrapper;

/* script */
const __vue_script__$2 = script$2;

/* template */
var __vue_render__$2 = function () {
  var _vm = this;
  var _h = _vm.$createElement;
  var _c = _vm._self._c || _h;
  return _c(
    "div",
    {
      directives: [
        {
          name: "show",
          rawName: "v-show",
          value: _vm.isShow,
          expression: "isShow",
        },
      ],
      staticClass: "auth-wrapper",
    },
    [
      _c(
        "mtd-tooltip",
        {
          attrs: {
            disabled: _vm.tooltipDisabled,
            "popper-class": "auth-wrapper-popper",
            placement: "top",
          },
          nativeOn: {
            "!click": function ($event) {
              return _vm.handleClick.apply(null, arguments)
            },
          },
          scopedSlots: _vm._u(
            [
              {
                key: "content",
                fn: function () {
                  return [
                    _vm._t("auth-tooltip-content", function () {
                      return [
                        _c("span", {
                          staticStyle: { "white-space": "normal" },
                          domProps: { innerHTML: _vm._s(_vm.noPermissionText) },
                        }),
                        _vm._v(" "),
                        _vm.showResourceApplyBtn
                          ? _c(
                              "mtd-button",
                              {
                                directives: [
                                  {
                                    name: "show",
                                    rawName: "v-show",
                                    value: !_vm.isLoading,
                                    expression: "!isLoading",
                                  },
                                ],
                                staticClass: "appy-btn",
                                attrs: { type: "text", size: "small" },
                                on: { click: _vm.handleApply },
                              },
                              [_vm._v("\n          点击申请\n        ")]
                            )
                          : _vm._e(),
                      ]
                    }),
                  ]
                },
                proxy: true,
              },
            ],
            null,
            true
          ),
          model: {
            value: _vm.tooltipVisible,
            callback: function ($$v) {
              _vm.tooltipVisible = $$v;
            },
            expression: "tooltipVisible",
          },
        },
        [
          _c(
            "span",
            { staticClass: "wrapper__inner" },
            [
              _vm._t("default", null, {
                loading: _vm.isLoading,
                disabled: _vm.authDisabled,
              }),
              _vm._v(" "),
              _c("div", {
                directives: [
                  {
                    name: "show",
                    rawName: "v-show",
                    value: !_vm.tooltipDisabled,
                    expression: "!tooltipDisabled",
                  },
                ],
                staticClass: "mask",
              }),
            ],
            2
          ),
        ]
      ),
      _vm._v(" "),
      _vm.showApplyModal
        ? _c("JiangjunlingApplyModal", {
            attrs: {
              appType: _vm.appType,
              misId: _vm.options && _vm.options.mis,
              id: _vm.options && "" + _vm.options.id,
              isMonitorOld: _vm.options && _vm.options.isMonitorOld,
              value: _vm.showApplyModal,
            },
            on: {
              "update:value": function ($event) {
                _vm.showApplyModal = $event;
              },
            },
          })
        : _vm._e(),
    ],
    1
  )
};
var __vue_staticRenderFns__$2 = [];
__vue_render__$2._withStripped = true;

  /* style */
  const __vue_inject_styles__$2 = function (inject) {
    if (!inject) return
    inject("data-v-74424562_0", { source: ".auth-wrapper[data-v-74424562] {\n  display: inline-block;\n  position: relative;\n  font-size: 0;\n}\n.auth-wrapper .wrapper__inner[data-v-74424562] {\n  display: inline-block;\n  font-size: 14px;\n}\n.auth-wrapper .mask[data-v-74424562] {\n  position: absolute;\n  inset: 0;\n  opacity: 0;\n}\n\n/*# sourceMappingURL=AuthWrapper.vue.map */", map: {"version":3,"sources":["/Users/liusai/workSpace/mt/mdbi-common-tools/src/permission/auth/AuthWrapper.vue","AuthWrapper.vue"],"names":[],"mappings":"AA+TA;EACA,qBAAA;EACA,kBAAA;EACA,YAAA;AC9TA;ADgUA;EACA,qBAAA;EACA,eAAA;AC9TA;ADiUA;EACA,kBAAA;EACA,QAAA;EACA,UAAA;AC/TA;;AAEA,0CAA0C","file":"AuthWrapper.vue","sourcesContent":["<template>\n  <div v-show=\"isShow\" class=\"auth-wrapper\">\n    <mtd-tooltip\n      v-model=\"tooltipVisible\"\n      :disabled=\"tooltipDisabled\"\n      popper-class=\"auth-wrapper-popper\"\n      placement=\"top\"\n      @click.native.capture=\"handleClick\"\n    >\n      <span class=\"wrapper__inner\">\n        <slot :loading=\"isLoading\" :disabled=\"authDisabled\"></slot>\n        <div v-show=\"!tooltipDisabled\" class=\"mask\"></div>\n      </span>\n      <template #content>\n        <slot name=\"auth-tooltip-content\">\n          <span style=\"white-space: normal\" v-html=\"noPermissionText\"></span>\n          <mtd-button\n            v-if=\"showResourceApplyBtn\"\n            v-show=\"!isLoading\"\n            class=\"appy-btn\"\n            type=\"text\"\n            size=\"small\"\n            @click=\"handleApply\"\n          >\n            点击申请\n          </mtd-button>\n        </slot>\n      </template>\n    </mtd-tooltip>\n    <JiangjunlingApplyModal\n      v-if=\"showApplyModal\"\n      :appType=\"appType\"\n      :misId=\"options && options.mis\"\n      :id=\"options && `${options.id}`\"\n      :isMonitorOld=\"options && options.isMonitorOld\"\n      :value.sync=\"showApplyModal\"\n    ></JiangjunlingApplyModal>\n  </div>\n</template>\n\n<script lang=\"ts\">\nimport Vue from 'vue'\nimport { Component, Prop, Watch } from 'vue-property-decorator'\nimport { constants } from '.'\nimport authManager, { AuthRes } from './authManager'\nimport JiangjunlingApplyModal from './jiangjunling/JiangjunlingApplyModal.vue'\n\nenum AuthStatus {\n  WAIT,\n  LOADING,\n  FINISH,\n}\n\nexport interface Options {\n  id: string\n  online: boolean\n  action: string\n  mis: string\n  subResources?: {\n    id?: string\n    extra?: string\n  }\n  /** 需要什么级别的权限才认为是有权限，默认「部分有权限」，权限类型：无权限、部分有权限、全部有权限 */\n  needPermissionType?: PermissionType\n  /** 迁移动作专用，目标项目的ID */\n  targetProjectId?: number\n  /** 鉴权触发方式，默认hover */\n  triggerType?: string\n  /** 鉴权不通过处理方式，默认tooltip提示 */\n  failTreatType?: FailTreatType\n  isMonitorOld?: boolean\n  /** 默认情况下，当id、action、mis为空时不鉴权，设置此参数为true则不验证参数 */\n  noOptionsCheck?: boolean\n}\n\nexport enum FailTreatType {\n  HIDE = 'hide',\n  TOOLTIP = 'tooltip',\n}\n\nexport enum PermissionType {\n  NO,\n  ALL = 'ALL',\n  PART = 'PART',\n}\n\nexport enum InvalidSlot {\n  AUTH_TOOLTIP_CONTENT = 'auth-tooltip-content',\n}\n\nexport enum NoPermissionType {\n  NONE,\n  SAFEMETA,\n  TABLE,\n  RESOURCE,\n}\n\n@Component({\n  components: {\n    JiangjunlingApplyModal,\n  },\n})\nexport default class AuthWrapper extends Vue {\n  @Prop(Object)\n  options: Options\n\n  /** 鉴权不可用，该项为true，则不会触发鉴权，也不会触发auth-click */\n  @Prop(Boolean)\n  disabled?: boolean\n\n  tooltipVisible = false\n\n  authStatus = AuthStatus.WAIT\n  permissionType = PermissionType.ALL\n\n  showApplyModal = false\n  noPermissionText = ''\n  noPermissionType = NoPermissionType.NONE\n\n  get appType() {\n    if (!this.options || !this.options.action) {\n      return ''\n    }\n\n    const { appType } = authManager.parseAction(this.options.action)\n\n    return appType || ''\n  }\n\n  get authDisabled() {\n    return !this.hasPermission && this.authStatus !== AuthStatus.WAIT\n  }\n\n  get realFailTreatType() {\n    return this.options.failTreatType || FailTreatType.TOOLTIP\n  }\n\n  get realNeedPermissionType() {\n    return this.options.needPermissionType === undefined ? PermissionType.PART : this.options.needPermissionType\n  }\n\n  /** 是否有权限 */\n  get hasPermission() {\n    // 实际需要的权限是部分权限，则全部、部分都认为有权限，否则只有全部有权限才认为有权限\n    return this.realNeedPermissionType === PermissionType.PART\n      ? [PermissionType.PART, PermissionType.ALL].includes(this.permissionType)\n      : this.permissionType === PermissionType.ALL\n  }\n\n  get isLoading() {\n    return this.authStatus === AuthStatus.LOADING\n  }\n\n  get tooltipDisabled() {\n    return this.authStatus !== AuthStatus.FINISH || this.hasPermission\n  }\n\n  get isShow() {\n    if (this.realFailTreatType === FailTreatType.TOOLTIP) {\n      return true\n    }\n\n    // 如果还在验证中，则先隐藏\n    if (this.authStatus !== AuthStatus.FINISH) {\n      return false\n    }\n\n    return this.hasPermission\n  }\n\n  get showResourceApplyBtn() {\n    return this.noPermissionType === NoPermissionType.RESOURCE\n  }\n\n  /** 基于动作判断，是否可申请资源权限 */\n  get isAuthManageAction() {\n    const { actionMap } = constants\n    const authManageList: string[] = [\n      actionMap.DASHBOARD.APP.AUTH_MANAGE,\n      actionMap.SQL.APP.AUTH_MANAGE,\n      actionMap.WORMHOLE.APP.AUTH_MANAGE,\n      actionMap.MONITOR.APP.AUTH_MANAGE,\n      actionMap.PORTAL.APP.AUTH_MANAGE\n    ]\n    return authManageList.includes(this.options.action)\n  }\n\n  /** 参数变化重置所有鉴权状态 */\n  @Watch('options', { immediate: true })\n  onOptionsChange() {\n    this.reset()\n  }\n\n  reset() {\n    this.authStatus = AuthStatus.WAIT\n    this.permissionType = PermissionType.ALL\n  }\n\n  async auth() {\n    try {\n      this.authStatus = AuthStatus.LOADING\n      this.permissionType = PermissionType.NO\n      const res = await authManager.singleAuth(this.options.mis, this.options)\n      this.resolveAuthRes(res)\n      this.authStatus = AuthStatus.FINISH\n      if (!this.hasPermission) {\n        this.tooltipVisible = true\n      }\n      this.emitAuthClickEvent()\n    } catch (error) {\n      this.reset()\n      throw error\n    }\n  }\n\n  async handleApply() {\n    this.showApplyModal = true\n  }\n\n  async handleClick() {\n    if (this.disabled) {\n      return\n    }\n\n    if (this.isLoading || !this.hasPermission) {\n      return\n    }\n\n    // 鉴权参数不合法，则认为有权限，直接抛出事件\n    if (!this.optionsIsValid()) {\n      this.permissionType = PermissionType.ALL\n      this.emitAuthClickEvent()\n      return\n    }\n\n    this.auth()\n  }\n\n  emitAuthClickEvent() {\n    if (this.hasPermission) {\n      this.$emit('auth-click')\n    }\n  }\n\n  optionsIsValid() {\n    if (this.options.noOptionsCheck) {\n      return true\n    }\n\n    const { id, action, mis } = this.options\n    return id && action && mis\n  }\n\n  resolveAuthResItem(res: AuthRes): {\n    permissionType: PermissionType\n    noPermissionType: NoPermissionType\n    noPermissionText: string\n  } | null {\n    // 鉴权结果是个树结构，如果根节点有权限，则判断子节点是否有权限\n    if (res.hasPermission) {\n      const childResList = (res.subAuthResults || [])\n      for (let childRes of childResList) {\n        const resolvedInfoOfChild = this.resolveAuthResItem(childRes)\n        if (resolvedInfoOfChild) {\n          return resolvedInfoOfChild\n        }\n      }\n      // 如果子节点都有权限，则返回null\n      return null\n    }\n\n    // 如果当前节点无权限，则构建无权限对象\n    const permissionType = PermissionType.NO\n    let noPermissionType = NoPermissionType.NONE\n    const noPermissionTextList: string[] = []\n    if (res?.safeMetaResult && res?.safeMetaResult.invalid) {\n      noPermissionType = NoPermissionType.SAFEMETA\n      noPermissionTextList.push(\n        '当前资源使用了安全底表，请登录金融堡垒机操作（<a href=\"https://km.sankuai.com/page/143144616\" target=\"_blank\">堡垒机使用第一篇</a>）',\n      )\n    } else if (res?.tableAuthResults && res.tableAuthResults.length > 0) {\n      noPermissionType = NoPermissionType.TABLE\n      noPermissionTextList.push('无以下库表权限，请申请：')\n      noPermissionTextList.push(\n        ...res.tableAuthResults.map((item) => {\n          return `${item.db}.${item.table} ${item.url}`\n        }),\n      )\n    } else if (res.authCode && !this.isAuthManageAction) {\n      noPermissionType = NoPermissionType.RESOURCE\n      noPermissionTextList.push('无该资源的操作权限')\n    } else {\n      noPermissionType = NoPermissionType.NONE\n      noPermissionTextList.push('无该资源的操作权限')\n    }\n\n    return {\n      permissionType,\n      noPermissionType,\n      noPermissionText: noPermissionTextList.join('<br>')\n    }\n  }\n\n  resolveAuthRes(res: AuthRes) {\n    const resolvedInfo = this.resolveAuthResItem(res)\n\n    if (!resolvedInfo) {\n      this.permissionType = (res.permissionType || PermissionType.ALL) as PermissionType\n      this.noPermissionType = NoPermissionType.NONE\n      return\n    }\n\n    this.permissionType = resolvedInfo.permissionType\n    this.noPermissionType = resolvedInfo.noPermissionType\n    this.noPermissionText = resolvedInfo.noPermissionText\n  }\n}\n</script>\n<style lang=\"scss\" scoped>\n.auth-wrapper {\n  display: inline-block;\n  position: relative;\n  font-size: 0;\n\n  .wrapper__inner {\n    display: inline-block;\n    font-size: 14px;\n  }\n\n  .mask {\n    position: absolute;\n    inset: 0;\n    opacity: 0;\n  }\n}\n</style>\n<style lang=\"scss\">\n.auth-wrapper-popper {\n  .appy-btn {\n    color: #fff;\n    text-decoration: underline;\n\n    &:hover {\n      color: #0a70f5;\n    }\n  }\n  white-space: nowrap;\n}\n</style>\n",".auth-wrapper {\n  display: inline-block;\n  position: relative;\n  font-size: 0;\n}\n.auth-wrapper .wrapper__inner {\n  display: inline-block;\n  font-size: 14px;\n}\n.auth-wrapper .mask {\n  position: absolute;\n  inset: 0;\n  opacity: 0;\n}\n\n/*# sourceMappingURL=AuthWrapper.vue.map */"]}, media: undefined })
,inject("data-v-74424562_1", { source: ".auth-wrapper-popper {\n  white-space: nowrap;\n}\n.auth-wrapper-popper .appy-btn {\n  color: #fff;\n  text-decoration: underline;\n}\n.auth-wrapper-popper .appy-btn:hover {\n  color: #0a70f5;\n}\n\n/*# sourceMappingURL=AuthWrapper.vue.map */", map: {"version":3,"sources":["/Users/liusai/workSpace/mt/mdbi-common-tools/src/permission/auth/AuthWrapper.vue","AuthWrapper.vue"],"names":[],"mappings":"AAiVA;EASA,mBAAA;ACxVA;ADgVA;EACA,WAAA;EACA,0BAAA;AC9UA;ADgVA;EACA,cAAA;AC9UA;;AAEA,0CAA0C","file":"AuthWrapper.vue","sourcesContent":["<template>\n  <div v-show=\"isShow\" class=\"auth-wrapper\">\n    <mtd-tooltip\n      v-model=\"tooltipVisible\"\n      :disabled=\"tooltipDisabled\"\n      popper-class=\"auth-wrapper-popper\"\n      placement=\"top\"\n      @click.native.capture=\"handleClick\"\n    >\n      <span class=\"wrapper__inner\">\n        <slot :loading=\"isLoading\" :disabled=\"authDisabled\"></slot>\n        <div v-show=\"!tooltipDisabled\" class=\"mask\"></div>\n      </span>\n      <template #content>\n        <slot name=\"auth-tooltip-content\">\n          <span style=\"white-space: normal\" v-html=\"noPermissionText\"></span>\n          <mtd-button\n            v-if=\"showResourceApplyBtn\"\n            v-show=\"!isLoading\"\n            class=\"appy-btn\"\n            type=\"text\"\n            size=\"small\"\n            @click=\"handleApply\"\n          >\n            点击申请\n          </mtd-button>\n        </slot>\n      </template>\n    </mtd-tooltip>\n    <JiangjunlingApplyModal\n      v-if=\"showApplyModal\"\n      :appType=\"appType\"\n      :misId=\"options && options.mis\"\n      :id=\"options && `${options.id}`\"\n      :isMonitorOld=\"options && options.isMonitorOld\"\n      :value.sync=\"showApplyModal\"\n    ></JiangjunlingApplyModal>\n  </div>\n</template>\n\n<script lang=\"ts\">\nimport Vue from 'vue'\nimport { Component, Prop, Watch } from 'vue-property-decorator'\nimport { constants } from '.'\nimport authManager, { AuthRes } from './authManager'\nimport JiangjunlingApplyModal from './jiangjunling/JiangjunlingApplyModal.vue'\n\nenum AuthStatus {\n  WAIT,\n  LOADING,\n  FINISH,\n}\n\nexport interface Options {\n  id: string\n  online: boolean\n  action: string\n  mis: string\n  subResources?: {\n    id?: string\n    extra?: string\n  }\n  /** 需要什么级别的权限才认为是有权限，默认「部分有权限」，权限类型：无权限、部分有权限、全部有权限 */\n  needPermissionType?: PermissionType\n  /** 迁移动作专用，目标项目的ID */\n  targetProjectId?: number\n  /** 鉴权触发方式，默认hover */\n  triggerType?: string\n  /** 鉴权不通过处理方式，默认tooltip提示 */\n  failTreatType?: FailTreatType\n  isMonitorOld?: boolean\n  /** 默认情况下，当id、action、mis为空时不鉴权，设置此参数为true则不验证参数 */\n  noOptionsCheck?: boolean\n}\n\nexport enum FailTreatType {\n  HIDE = 'hide',\n  TOOLTIP = 'tooltip',\n}\n\nexport enum PermissionType {\n  NO,\n  ALL = 'ALL',\n  PART = 'PART',\n}\n\nexport enum InvalidSlot {\n  AUTH_TOOLTIP_CONTENT = 'auth-tooltip-content',\n}\n\nexport enum NoPermissionType {\n  NONE,\n  SAFEMETA,\n  TABLE,\n  RESOURCE,\n}\n\n@Component({\n  components: {\n    JiangjunlingApplyModal,\n  },\n})\nexport default class AuthWrapper extends Vue {\n  @Prop(Object)\n  options: Options\n\n  /** 鉴权不可用，该项为true，则不会触发鉴权，也不会触发auth-click */\n  @Prop(Boolean)\n  disabled?: boolean\n\n  tooltipVisible = false\n\n  authStatus = AuthStatus.WAIT\n  permissionType = PermissionType.ALL\n\n  showApplyModal = false\n  noPermissionText = ''\n  noPermissionType = NoPermissionType.NONE\n\n  get appType() {\n    if (!this.options || !this.options.action) {\n      return ''\n    }\n\n    const { appType } = authManager.parseAction(this.options.action)\n\n    return appType || ''\n  }\n\n  get authDisabled() {\n    return !this.hasPermission && this.authStatus !== AuthStatus.WAIT\n  }\n\n  get realFailTreatType() {\n    return this.options.failTreatType || FailTreatType.TOOLTIP\n  }\n\n  get realNeedPermissionType() {\n    return this.options.needPermissionType === undefined ? PermissionType.PART : this.options.needPermissionType\n  }\n\n  /** 是否有权限 */\n  get hasPermission() {\n    // 实际需要的权限是部分权限，则全部、部分都认为有权限，否则只有全部有权限才认为有权限\n    return this.realNeedPermissionType === PermissionType.PART\n      ? [PermissionType.PART, PermissionType.ALL].includes(this.permissionType)\n      : this.permissionType === PermissionType.ALL\n  }\n\n  get isLoading() {\n    return this.authStatus === AuthStatus.LOADING\n  }\n\n  get tooltipDisabled() {\n    return this.authStatus !== AuthStatus.FINISH || this.hasPermission\n  }\n\n  get isShow() {\n    if (this.realFailTreatType === FailTreatType.TOOLTIP) {\n      return true\n    }\n\n    // 如果还在验证中，则先隐藏\n    if (this.authStatus !== AuthStatus.FINISH) {\n      return false\n    }\n\n    return this.hasPermission\n  }\n\n  get showResourceApplyBtn() {\n    return this.noPermissionType === NoPermissionType.RESOURCE\n  }\n\n  /** 基于动作判断，是否可申请资源权限 */\n  get isAuthManageAction() {\n    const { actionMap } = constants\n    const authManageList: string[] = [\n      actionMap.DASHBOARD.APP.AUTH_MANAGE,\n      actionMap.SQL.APP.AUTH_MANAGE,\n      actionMap.WORMHOLE.APP.AUTH_MANAGE,\n      actionMap.MONITOR.APP.AUTH_MANAGE,\n      actionMap.PORTAL.APP.AUTH_MANAGE\n    ]\n    return authManageList.includes(this.options.action)\n  }\n\n  /** 参数变化重置所有鉴权状态 */\n  @Watch('options', { immediate: true })\n  onOptionsChange() {\n    this.reset()\n  }\n\n  reset() {\n    this.authStatus = AuthStatus.WAIT\n    this.permissionType = PermissionType.ALL\n  }\n\n  async auth() {\n    try {\n      this.authStatus = AuthStatus.LOADING\n      this.permissionType = PermissionType.NO\n      const res = await authManager.singleAuth(this.options.mis, this.options)\n      this.resolveAuthRes(res)\n      this.authStatus = AuthStatus.FINISH\n      if (!this.hasPermission) {\n        this.tooltipVisible = true\n      }\n      this.emitAuthClickEvent()\n    } catch (error) {\n      this.reset()\n      throw error\n    }\n  }\n\n  async handleApply() {\n    this.showApplyModal = true\n  }\n\n  async handleClick() {\n    if (this.disabled) {\n      return\n    }\n\n    if (this.isLoading || !this.hasPermission) {\n      return\n    }\n\n    // 鉴权参数不合法，则认为有权限，直接抛出事件\n    if (!this.optionsIsValid()) {\n      this.permissionType = PermissionType.ALL\n      this.emitAuthClickEvent()\n      return\n    }\n\n    this.auth()\n  }\n\n  emitAuthClickEvent() {\n    if (this.hasPermission) {\n      this.$emit('auth-click')\n    }\n  }\n\n  optionsIsValid() {\n    if (this.options.noOptionsCheck) {\n      return true\n    }\n\n    const { id, action, mis } = this.options\n    return id && action && mis\n  }\n\n  resolveAuthResItem(res: AuthRes): {\n    permissionType: PermissionType\n    noPermissionType: NoPermissionType\n    noPermissionText: string\n  } | null {\n    // 鉴权结果是个树结构，如果根节点有权限，则判断子节点是否有权限\n    if (res.hasPermission) {\n      const childResList = (res.subAuthResults || [])\n      for (let childRes of childResList) {\n        const resolvedInfoOfChild = this.resolveAuthResItem(childRes)\n        if (resolvedInfoOfChild) {\n          return resolvedInfoOfChild\n        }\n      }\n      // 如果子节点都有权限，则返回null\n      return null\n    }\n\n    // 如果当前节点无权限，则构建无权限对象\n    const permissionType = PermissionType.NO\n    let noPermissionType = NoPermissionType.NONE\n    const noPermissionTextList: string[] = []\n    if (res?.safeMetaResult && res?.safeMetaResult.invalid) {\n      noPermissionType = NoPermissionType.SAFEMETA\n      noPermissionTextList.push(\n        '当前资源使用了安全底表，请登录金融堡垒机操作（<a href=\"https://km.sankuai.com/page/143144616\" target=\"_blank\">堡垒机使用第一篇</a>）',\n      )\n    } else if (res?.tableAuthResults && res.tableAuthResults.length > 0) {\n      noPermissionType = NoPermissionType.TABLE\n      noPermissionTextList.push('无以下库表权限，请申请：')\n      noPermissionTextList.push(\n        ...res.tableAuthResults.map((item) => {\n          return `${item.db}.${item.table} ${item.url}`\n        }),\n      )\n    } else if (res.authCode && !this.isAuthManageAction) {\n      noPermissionType = NoPermissionType.RESOURCE\n      noPermissionTextList.push('无该资源的操作权限')\n    } else {\n      noPermissionType = NoPermissionType.NONE\n      noPermissionTextList.push('无该资源的操作权限')\n    }\n\n    return {\n      permissionType,\n      noPermissionType,\n      noPermissionText: noPermissionTextList.join('<br>')\n    }\n  }\n\n  resolveAuthRes(res: AuthRes) {\n    const resolvedInfo = this.resolveAuthResItem(res)\n\n    if (!resolvedInfo) {\n      this.permissionType = (res.permissionType || PermissionType.ALL) as PermissionType\n      this.noPermissionType = NoPermissionType.NONE\n      return\n    }\n\n    this.permissionType = resolvedInfo.permissionType\n    this.noPermissionType = resolvedInfo.noPermissionType\n    this.noPermissionText = resolvedInfo.noPermissionText\n  }\n}\n</script>\n<style lang=\"scss\" scoped>\n.auth-wrapper {\n  display: inline-block;\n  position: relative;\n  font-size: 0;\n\n  .wrapper__inner {\n    display: inline-block;\n    font-size: 14px;\n  }\n\n  .mask {\n    position: absolute;\n    inset: 0;\n    opacity: 0;\n  }\n}\n</style>\n<style lang=\"scss\">\n.auth-wrapper-popper {\n  .appy-btn {\n    color: #fff;\n    text-decoration: underline;\n\n    &:hover {\n      color: #0a70f5;\n    }\n  }\n  white-space: nowrap;\n}\n</style>\n",".auth-wrapper-popper {\n  white-space: nowrap;\n}\n.auth-wrapper-popper .appy-btn {\n  color: #fff;\n  text-decoration: underline;\n}\n.auth-wrapper-popper .appy-btn:hover {\n  color: #0a70f5;\n}\n\n/*# sourceMappingURL=AuthWrapper.vue.map */"]}, media: undefined });

  };
  /* scoped */
  const __vue_scope_id__$2 = "data-v-74424562";
  /* module identifier */
  const __vue_module_identifier__$2 = undefined;
  /* functional template */
  const __vue_is_functional_template__$2 = false;
  /* style inject SSR */
  
  /* style inject shadow dom */
  

  
  const __vue_component__$2 = /*#__PURE__*/normalizeComponent(
    { render: __vue_render__$2, staticRenderFns: __vue_staticRenderFns__$2 },
    __vue_inject_styles__$2,
    __vue_script__$2,
    __vue_scope_id__$2,
    __vue_is_functional_template__$2,
    __vue_module_identifier__$2,
    false,
    createInjector,
    undefined,
    undefined
  );

let AuthRouterLink = class AuthRouterLink extends Vue__default["default"] {
    handleClick() {
        this.$emit('click');
        if (!this.to) {
            return;
        }
        const newRoute = typeof this.to === 'string'
            ? this.to
            : {
                name: this.to.name || undefined,
                path: this.to.path,
                hash: this.to.hash,
                query: this.to.query,
                params: this.to.params,
            };
        this.$router.push(newRoute);
    }
};
__decorate([
    Prop({
        type: [Object, String]
    }),
    __metadata("design:type", Object)
], AuthRouterLink.prototype, "to", void 0);
__decorate([
    Prop(Object),
    __metadata("design:type", Object)
], AuthRouterLink.prototype, "options", void 0);
AuthRouterLink = __decorate([
    Component({
        components: {
            AuthWrapper: __vue_component__$2
        }
    })
], AuthRouterLink);
var script$1 = AuthRouterLink;

/* script */
const __vue_script__$1 = script$1;

/* template */
var __vue_render__$1 = function () {
  var _vm = this;
  var _h = _vm.$createElement;
  var _c = _vm._self._c || _h;
  return _c("AuthWrapper", {
    attrs: { options: _vm.options },
    on: { "auth-click": _vm.handleClick },
    scopedSlots: _vm._u(
      [
        {
          key: "default",
          fn: function (ref) {
            var loading = ref.loading;
            var disabled = ref.disabled;
            return [
              _c(
                "mtd-button",
                {
                  staticClass: "auth-router-link",
                  attrs: { type: "text", loading: loading, disabled: disabled },
                },
                [_vm._t("default")],
                2
              ),
            ]
          },
        },
      ],
      null,
      true
    ),
  })
};
var __vue_staticRenderFns__$1 = [];
__vue_render__$1._withStripped = true;

  /* style */
  const __vue_inject_styles__$1 = function (inject) {
    if (!inject) return
    inject("data-v-61e9f21d_0", { source: ".auth-router-link[data-v-61e9f21d] {\n  color: #0a70f5;\n  padding: 0;\n  text-align: left;\n  white-space: normal;\n  height: unset;\n}\n.auth-router-link[data-v-61e9f21d]:hover {\n  text-decoration: underline;\n}\n\n/*# sourceMappingURL=AuthRouterLink.vue.map */", map: {"version":3,"sources":["/Users/liusai/workSpace/mt/mdbi-common-tools/src/permission/auth/AuthRouterLink.vue","AuthRouterLink.vue"],"names":[],"mappings":"AAsDA;EACA,cAAA;EACA,UAAA;EACA,gBAAA;EACA,mBAAA;EACA,aAAA;ACrDA;ADuDA;EACA,0BAAA;ACrDA;;AAEA,6CAA6C","file":"AuthRouterLink.vue","sourcesContent":["<template>\n  <AuthWrapper :options=\"options\" @auth-click=\"handleClick\">\n    <template #default=\"{ loading, disabled }\">\n      <mtd-button class=\"auth-router-link\" type=\"text\" :loading=\"loading\" :disabled=\"disabled\">\n        <slot></slot>\n      </mtd-button>\n    </template>\n  </AuthWrapper>\n</template>\n\n<script lang=\"ts\">\nimport Vue from 'vue'\nimport { Component, Prop } from 'vue-property-decorator'\nimport { Route } from 'vue-router'\nimport AuthWrapper from './AuthWrapper.vue'\n\n@Component({\n  components: {\n    AuthWrapper\n  }\n})\nexport default class AuthRouterLink extends Vue {\n  @Prop({\n    type: [Object, String]\n  })\n  to: Route | string\n\n  /** 类型和AuthWrapper保持一致 */\n  @Prop(Object)\n  options: any\n\n  handleClick() {\n    this.$emit('click')\n\n    if (!this.to) {\n      return\n    }\n\n    const newRoute =\n      typeof this.to === 'string'\n        ? this.to\n        : {\n            name: this.to.name || undefined,\n            path: this.to.path,\n            hash: this.to.hash,\n            query: this.to.query,\n            params: this.to.params,\n          }\n\n    this.$router.push(newRoute)\n  }\n}\n</script>\n<style lang=\"scss\" scoped>\n.auth-router-link {\n  color: #0a70f5;\n  padding: 0;\n  text-align: left;\n  white-space: normal;\n  height: unset;\n\n  &:hover {\n    text-decoration: underline;\n  }\n}\n</style>\n<style lang=\"scss\">\n.auth-router-link {\n  .mtd-btn-spin {\n    height: 22px;\n    line-height: 22px;\n  }\n\n  .mtd-btn>span {\n    line-height: 22px;\n  }\n}\n</style>\n",".auth-router-link {\n  color: #0a70f5;\n  padding: 0;\n  text-align: left;\n  white-space: normal;\n  height: unset;\n}\n.auth-router-link:hover {\n  text-decoration: underline;\n}\n\n/*# sourceMappingURL=AuthRouterLink.vue.map */"]}, media: undefined })
,inject("data-v-61e9f21d_1", { source: ".auth-router-link .mtd-btn-spin {\n  height: 22px;\n  line-height: 22px;\n}\n.auth-router-link .mtd-btn > span {\n  line-height: 22px;\n}\n\n/*# sourceMappingURL=AuthRouterLink.vue.map */", map: {"version":3,"sources":["/Users/liusai/workSpace/mt/mdbi-common-tools/src/permission/auth/AuthRouterLink.vue","AuthRouterLink.vue"],"names":[],"mappings":"AAoEA;EACA,YAAA;EACA,iBAAA;ACnEA;ADsEA;EACA,iBAAA;ACpEA;;AAEA,6CAA6C","file":"AuthRouterLink.vue","sourcesContent":["<template>\n  <AuthWrapper :options=\"options\" @auth-click=\"handleClick\">\n    <template #default=\"{ loading, disabled }\">\n      <mtd-button class=\"auth-router-link\" type=\"text\" :loading=\"loading\" :disabled=\"disabled\">\n        <slot></slot>\n      </mtd-button>\n    </template>\n  </AuthWrapper>\n</template>\n\n<script lang=\"ts\">\nimport Vue from 'vue'\nimport { Component, Prop } from 'vue-property-decorator'\nimport { Route } from 'vue-router'\nimport AuthWrapper from './AuthWrapper.vue'\n\n@Component({\n  components: {\n    AuthWrapper\n  }\n})\nexport default class AuthRouterLink extends Vue {\n  @Prop({\n    type: [Object, String]\n  })\n  to: Route | string\n\n  /** 类型和AuthWrapper保持一致 */\n  @Prop(Object)\n  options: any\n\n  handleClick() {\n    this.$emit('click')\n\n    if (!this.to) {\n      return\n    }\n\n    const newRoute =\n      typeof this.to === 'string'\n        ? this.to\n        : {\n            name: this.to.name || undefined,\n            path: this.to.path,\n            hash: this.to.hash,\n            query: this.to.query,\n            params: this.to.params,\n          }\n\n    this.$router.push(newRoute)\n  }\n}\n</script>\n<style lang=\"scss\" scoped>\n.auth-router-link {\n  color: #0a70f5;\n  padding: 0;\n  text-align: left;\n  white-space: normal;\n  height: unset;\n\n  &:hover {\n    text-decoration: underline;\n  }\n}\n</style>\n<style lang=\"scss\">\n.auth-router-link {\n  .mtd-btn-spin {\n    height: 22px;\n    line-height: 22px;\n  }\n\n  .mtd-btn>span {\n    line-height: 22px;\n  }\n}\n</style>\n",".auth-router-link .mtd-btn-spin {\n  height: 22px;\n  line-height: 22px;\n}\n.auth-router-link .mtd-btn > span {\n  line-height: 22px;\n}\n\n/*# sourceMappingURL=AuthRouterLink.vue.map */"]}, media: undefined });

  };
  /* scoped */
  const __vue_scope_id__$1 = "data-v-61e9f21d";
  /* module identifier */
  const __vue_module_identifier__$1 = undefined;
  /* functional template */
  const __vue_is_functional_template__$1 = false;
  /* style inject SSR */
  
  /* style inject shadow dom */
  

  
  const __vue_component__$1 = /*#__PURE__*/normalizeComponent(
    { render: __vue_render__$1, staticRenderFns: __vue_staticRenderFns__$1 },
    __vue_inject_styles__$1,
    __vue_script__$1,
    __vue_scope_id__$1,
    __vue_is_functional_template__$1,
    __vue_module_identifier__$1,
    false,
    createInjector,
    undefined,
    undefined
  );

let ActionButtons = class ActionButtons extends Vue__default["default"] {
    constructor() {
        super(...arguments);
        this.dropdownVisible = false;
    }
    get tiledList() {
        return this.actions.slice(0, this.maxTiledCount);
    }
    get moreList() {
        return this.actions.slice(this.maxTiledCount);
    }
    getOptions(item) {
        return Object.assign(Object.assign({}, this.authOptions), { action: item.actionType, id: item.id || this.authOptions.id });
    }
    handleAuthClick(item) {
        if (item.click) {
            item.click();
        }
    }
};
__decorate([
    Prop({
        type: Array,
        default() {
            return [];
        },
    }),
    __metadata("design:type", Array)
], ActionButtons.prototype, "actions", void 0);
__decorate([
    Prop({
        type: Object,
        required: true,
    }),
    __metadata("design:type", Object)
], ActionButtons.prototype, "authOptions", void 0);
__decorate([
    Prop({
        type: Number,
        default: 2,
    }),
    __metadata("design:type", Number)
], ActionButtons.prototype, "maxTiledCount", void 0);
__decorate([
    Prop({
        type: String,
        default: '14px',
    }),
    __metadata("design:type", String)
], ActionButtons.prototype, "fontSize", void 0);
ActionButtons = __decorate([
    Component({
        components: {
            AuthWrapper: __vue_component__$2,
        },
    })
], ActionButtons);
var script = ActionButtons;

/* script */
const __vue_script__ = script;

/* template */
var __vue_render__ = function () {
  var _vm = this;
  var _h = _vm.$createElement;
  var _c = _vm._self._c || _h;
  return _c(
    "div",
    { staticClass: "auth-action-buttons" },
    [
      _vm._l(_vm.tiledList, function (item, index) {
        return _c("AuthWrapper", {
          key: index,
          attrs: { options: _vm.getOptions(item) },
          on: {
            "auth-click": function ($event) {
              return _vm.handleAuthClick(item)
            },
          },
          scopedSlots: _vm._u(
            [
              {
                key: "default",
                fn: function (scoped) {
                  return [
                    _c(
                      "mtd-button",
                      {
                        staticClass: "tiled-btn",
                        style: { "font-size": _vm.fontSize },
                        attrs: {
                          type: "text",
                          loading: scoped.loading,
                          disabled: scoped.disabled,
                        },
                      },
                      [_vm._v("\n        " + _vm._s(item.text) + "\n      ")]
                    ),
                  ]
                },
              },
            ],
            null,
            true
          ),
        })
      }),
      _vm._v(" "),
      _vm.moreList.length > 0
        ? _c(
            "mtd-dropdown",
            {
              staticClass: "more-dropdown",
              attrs: { "popper-class": "auth-action-buttons-dropdown" },
            },
            [
              _c(
                "mtd-button",
                {
                  staticClass: "more-btn",
                  style: { "font-size": _vm.fontSize },
                  attrs: { type: "text" },
                },
                [_vm._v("更多")]
              ),
              _vm._v(" "),
              _c(
                "mtd-dropdown-menu",
                { attrs: { slot: "dropdown" }, slot: "dropdown" },
                _vm._l(_vm.moreList, function (item, index) {
                  return _c("AuthWrapper", {
                    key: index,
                    staticClass: "more-auth-wrapper",
                    attrs: { options: _vm.getOptions(item) },
                    on: {
                      "auth-click": function ($event) {
                        return _vm.handleAuthClick(item)
                      },
                    },
                    scopedSlots: _vm._u(
                      [
                        {
                          key: "default",
                          fn: function (scoped) {
                            return [
                              _c(
                                "mtd-dropdown-menu-item",
                                {
                                  nativeOn: {
                                    "!click": function ($event) {
                                      $event.stopPropagation();
                                    },
                                  },
                                },
                                [
                                  _c(
                                    "mtd-button",
                                    {
                                      staticClass: "more-dropdown-item__btn",
                                      style: { "font-size": _vm.fontSize },
                                      attrs: {
                                        type: "text",
                                        loading: scoped.loading,
                                        disabled: scoped.disabled,
                                      },
                                    },
                                    [
                                      _vm._v(
                                        "\n              " +
                                          _vm._s(item.text) +
                                          "\n            "
                                      ),
                                    ]
                                  ),
                                ],
                                1
                              ),
                            ]
                          },
                        },
                      ],
                      null,
                      true
                    ),
                  })
                }),
                1
              ),
            ],
            1
          )
        : _vm._e(),
    ],
    2
  )
};
var __vue_staticRenderFns__ = [];
__vue_render__._withStripped = true;

  /* style */
  const __vue_inject_styles__ = function (inject) {
    if (!inject) return
    inject("data-v-6b1b60cd_0", { source: ".auth-action-buttons .tiled-btn[data-v-6b1b60cd] {\n  padding: 0 12px 0 0;\n  color: #0a70f5;\n}\n.auth-action-buttons .more-dropdown[data-v-6b1b60cd] {\n  vertical-align: top;\n}\n.auth-action-buttons .more-dropdown .more-btn[data-v-6b1b60cd] {\n  padding: 0 12px 0 0;\n  color: #0a70f5;\n}\n\n/*# sourceMappingURL=AuthActionButtons.vue.map */", map: {"version":3,"sources":["/Users/liusai/workSpace/mt/mdbi-common-tools/src/permission/auth/AuthActionButtons.vue","AuthActionButtons.vue"],"names":[],"mappings":"AAwIA;EACA,mBAAA;EACA,cAAA;ACvIA;AD0IA;EACA,mBAAA;ACxIA;AD0IA;EACA,mBAAA;EACA,cAAA;ACxIA;;AAEA,gDAAgD","file":"AuthActionButtons.vue","sourcesContent":["<template>\n  <div class=\"auth-action-buttons\">\n    <AuthWrapper\n      v-for=\"(item, index) in tiledList\"\n      :key=\"index\"\n      :options=\"getOptions(item)\"\n      @auth-click=\"handleAuthClick(item)\"\n    >\n      <template #default=\"scoped\">\n        <mtd-button\n          class=\"tiled-btn\"\n          :style=\"{ 'font-size': fontSize }\"\n          type=\"text\"\n          :loading=\"scoped.loading\"\n          :disabled=\"scoped.disabled\"\n        >\n          {{ item.text }}\n        </mtd-button>\n      </template>\n    </AuthWrapper>\n    <mtd-dropdown v-if=\"moreList.length > 0\" class=\"more-dropdown\" popper-class=\"auth-action-buttons-dropdown\">\n      <mtd-button type=\"text\" class=\"more-btn\" :style=\"{ 'font-size': fontSize }\">更多</mtd-button>\n      <mtd-dropdown-menu slot=\"dropdown\">\n        <AuthWrapper\n          v-for=\"(item, index) in moreList\"\n          :key=\"index\"\n          class=\"more-auth-wrapper\"\n          :options=\"getOptions(item)\"\n          @auth-click=\"handleAuthClick(item)\"\n        >\n          <template #default=\"scoped\">\n            <mtd-dropdown-menu-item @click.native.capture.stop>\n              <mtd-button\n                type=\"text\"\n                class=\"more-dropdown-item__btn\"\n                :style=\"{ 'font-size': fontSize }\"\n                :loading=\"scoped.loading\"\n                :disabled=\"scoped.disabled\"\n              >\n                {{ item.text }}\n              </mtd-button>\n            </mtd-dropdown-menu-item>\n          </template>\n        </AuthWrapper>\n      </mtd-dropdown-menu>\n    </mtd-dropdown>\n  </div>\n</template>\n\n<script lang=\"ts\">\nimport Vue from 'vue'\nimport { Component, Prop } from 'vue-property-decorator'\nimport AuthWrapper from './AuthWrapper.vue'\n\ninterface Action {\n  /** 仅支持actionMap中的值 */\n  actionType: string\n  id?: string\n  subResources?: {\n    id: string\n  }\n  icon?: string\n  text?: string\n  click: () => void\n}\n\n@Component({\n  components: {\n    AuthWrapper,\n  },\n})\nexport default class ActionButtons extends Vue {\n  @Prop({\n    type: Array,\n    default() {\n      return []\n    },\n  })\n  actions: Array<Action>\n\n  @Prop({\n    type: Object,\n    required: true,\n  })\n  authOptions: {\n    id: string\n    mis: string\n    online?: boolean\n    /** 迁移动作专用，目标项目组的ID */\n    targetProjectId?: number\n    subResources?: {\n      id: string\n    }\n    isMonitorOld?: boolean\n  }\n\n  /** 平铺的最大数量，多余的操作项会收拢到更多中 */\n  @Prop({\n    type: Number,\n    default: 2,\n  })\n  maxTiledCount: number\n\n  @Prop({\n    type: String,\n    default: '14px',\n  })\n  fontSize: string\n\n  dropdownVisible = false\n\n  get tiledList() {\n    return this.actions.slice(0, this.maxTiledCount)\n  }\n\n  get moreList() {\n    return this.actions.slice(this.maxTiledCount)\n  }\n\n  getOptions(item: Action) {\n    return {\n      ...this.authOptions,\n      action: item.actionType,\n      id: item.id || this.authOptions.id,\n    }\n  }\n\n  handleAuthClick(item: Action) {\n    if (item.click) {\n      item.click()\n    }\n  }\n}\n</script>\n<style lang=\"scss\" scoped>\n.auth-action-buttons {\n  .tiled-btn {\n    padding: 0 12px 0 0;\n    color: #0a70f5;\n  }\n\n  .more-dropdown {\n    vertical-align: top;\n\n    .more-btn {\n      padding: 0 12px 0 0;\n      color: #0a70f5;\n    }\n  }\n}\n</style>\n<style lang=\"scss\">\n.auth-action-buttons-dropdown {\n  .more-auth-wrapper {\n    display: block !important;\n\n    .wrapper__inner {\n      width: 100%;\n    }\n\n    .more-dropdown-item__btn {\n      width: 100%;\n      text-align: left;\n      padding: 0;\n    }\n  }\n}\n</style>\n",".auth-action-buttons .tiled-btn {\n  padding: 0 12px 0 0;\n  color: #0a70f5;\n}\n.auth-action-buttons .more-dropdown {\n  vertical-align: top;\n}\n.auth-action-buttons .more-dropdown .more-btn {\n  padding: 0 12px 0 0;\n  color: #0a70f5;\n}\n\n/*# sourceMappingURL=AuthActionButtons.vue.map */"]}, media: undefined })
,inject("data-v-6b1b60cd_1", { source: ".auth-action-buttons-dropdown .more-auth-wrapper {\n  display: block !important;\n}\n.auth-action-buttons-dropdown .more-auth-wrapper .wrapper__inner {\n  width: 100%;\n}\n.auth-action-buttons-dropdown .more-auth-wrapper .more-dropdown-item__btn {\n  width: 100%;\n  text-align: left;\n  padding: 0;\n}\n\n/*# sourceMappingURL=AuthActionButtons.vue.map */", map: {"version":3,"sources":["/Users/liusai/workSpace/mt/mdbi-common-tools/src/permission/auth/AuthActionButtons.vue","AuthActionButtons.vue"],"names":[],"mappings":"AAyJA;EACA,yBAAA;ACxJA;AD0JA;EACA,WAAA;ACxJA;AD2JA;EACA,WAAA;EACA,gBAAA;EACA,UAAA;ACzJA;;AAEA,gDAAgD","file":"AuthActionButtons.vue","sourcesContent":["<template>\n  <div class=\"auth-action-buttons\">\n    <AuthWrapper\n      v-for=\"(item, index) in tiledList\"\n      :key=\"index\"\n      :options=\"getOptions(item)\"\n      @auth-click=\"handleAuthClick(item)\"\n    >\n      <template #default=\"scoped\">\n        <mtd-button\n          class=\"tiled-btn\"\n          :style=\"{ 'font-size': fontSize }\"\n          type=\"text\"\n          :loading=\"scoped.loading\"\n          :disabled=\"scoped.disabled\"\n        >\n          {{ item.text }}\n        </mtd-button>\n      </template>\n    </AuthWrapper>\n    <mtd-dropdown v-if=\"moreList.length > 0\" class=\"more-dropdown\" popper-class=\"auth-action-buttons-dropdown\">\n      <mtd-button type=\"text\" class=\"more-btn\" :style=\"{ 'font-size': fontSize }\">更多</mtd-button>\n      <mtd-dropdown-menu slot=\"dropdown\">\n        <AuthWrapper\n          v-for=\"(item, index) in moreList\"\n          :key=\"index\"\n          class=\"more-auth-wrapper\"\n          :options=\"getOptions(item)\"\n          @auth-click=\"handleAuthClick(item)\"\n        >\n          <template #default=\"scoped\">\n            <mtd-dropdown-menu-item @click.native.capture.stop>\n              <mtd-button\n                type=\"text\"\n                class=\"more-dropdown-item__btn\"\n                :style=\"{ 'font-size': fontSize }\"\n                :loading=\"scoped.loading\"\n                :disabled=\"scoped.disabled\"\n              >\n                {{ item.text }}\n              </mtd-button>\n            </mtd-dropdown-menu-item>\n          </template>\n        </AuthWrapper>\n      </mtd-dropdown-menu>\n    </mtd-dropdown>\n  </div>\n</template>\n\n<script lang=\"ts\">\nimport Vue from 'vue'\nimport { Component, Prop } from 'vue-property-decorator'\nimport AuthWrapper from './AuthWrapper.vue'\n\ninterface Action {\n  /** 仅支持actionMap中的值 */\n  actionType: string\n  id?: string\n  subResources?: {\n    id: string\n  }\n  icon?: string\n  text?: string\n  click: () => void\n}\n\n@Component({\n  components: {\n    AuthWrapper,\n  },\n})\nexport default class ActionButtons extends Vue {\n  @Prop({\n    type: Array,\n    default() {\n      return []\n    },\n  })\n  actions: Array<Action>\n\n  @Prop({\n    type: Object,\n    required: true,\n  })\n  authOptions: {\n    id: string\n    mis: string\n    online?: boolean\n    /** 迁移动作专用，目标项目组的ID */\n    targetProjectId?: number\n    subResources?: {\n      id: string\n    }\n    isMonitorOld?: boolean\n  }\n\n  /** 平铺的最大数量，多余的操作项会收拢到更多中 */\n  @Prop({\n    type: Number,\n    default: 2,\n  })\n  maxTiledCount: number\n\n  @Prop({\n    type: String,\n    default: '14px',\n  })\n  fontSize: string\n\n  dropdownVisible = false\n\n  get tiledList() {\n    return this.actions.slice(0, this.maxTiledCount)\n  }\n\n  get moreList() {\n    return this.actions.slice(this.maxTiledCount)\n  }\n\n  getOptions(item: Action) {\n    return {\n      ...this.authOptions,\n      action: item.actionType,\n      id: item.id || this.authOptions.id,\n    }\n  }\n\n  handleAuthClick(item: Action) {\n    if (item.click) {\n      item.click()\n    }\n  }\n}\n</script>\n<style lang=\"scss\" scoped>\n.auth-action-buttons {\n  .tiled-btn {\n    padding: 0 12px 0 0;\n    color: #0a70f5;\n  }\n\n  .more-dropdown {\n    vertical-align: top;\n\n    .more-btn {\n      padding: 0 12px 0 0;\n      color: #0a70f5;\n    }\n  }\n}\n</style>\n<style lang=\"scss\">\n.auth-action-buttons-dropdown {\n  .more-auth-wrapper {\n    display: block !important;\n\n    .wrapper__inner {\n      width: 100%;\n    }\n\n    .more-dropdown-item__btn {\n      width: 100%;\n      text-align: left;\n      padding: 0;\n    }\n  }\n}\n</style>\n",".auth-action-buttons-dropdown .more-auth-wrapper {\n  display: block !important;\n}\n.auth-action-buttons-dropdown .more-auth-wrapper .wrapper__inner {\n  width: 100%;\n}\n.auth-action-buttons-dropdown .more-auth-wrapper .more-dropdown-item__btn {\n  width: 100%;\n  text-align: left;\n  padding: 0;\n}\n\n/*# sourceMappingURL=AuthActionButtons.vue.map */"]}, media: undefined });

  };
  /* scoped */
  const __vue_scope_id__ = "data-v-6b1b60cd";
  /* module identifier */
  const __vue_module_identifier__ = undefined;
  /* functional template */
  const __vue_is_functional_template__ = false;
  /* style inject SSR */
  
  /* style inject shadow dom */
  

  
  const __vue_component__ = /*#__PURE__*/normalizeComponent(
    { render: __vue_render__, staticRenderFns: __vue_staticRenderFns__ },
    __vue_inject_styles__,
    __vue_script__,
    __vue_scope_id__,
    __vue_is_functional_template__,
    __vue_module_identifier__,
    false,
    createInjector,
    undefined,
    undefined
  );

function outbase(options) {
    return service$1.post('/safe/safemeta/outbase', options);
}
function revokeOutbase(options) {
    return service$1.post('/safe/safemeta/revokeOutbase', options);
}
function getSafemetaInfo(options) {
    return service$1.post('/safe/safemeta/safeInfo', options);
}

class SafemetaManager {
    constructor() {
        this.safemetaInfoMap = {};
    }
    outbase(options) {
        return __awaiter(this, void 0, void 0, function* () {
            const params = {
                resource: {
                    id: options.id,
                    appType: options.appType,
                    subType: options.subType || 'APP',
                },
                mis: options.mis,
                message: options.message,
            };
            const res = yield outbase(params);
            return res.data;
        });
    }
    revokeOutbase(options) {
        return __awaiter(this, void 0, void 0, function* () {
            const params = {
                resource: {
                    id: options.id,
                    appType: options.appType,
                    subType: options.subType || 'APP',
                },
                mis: options.mis,
            };
            const res = yield revokeOutbase(params);
            return res.data;
        });
    }
    getSafemetaInfo(sourceId, appType) {
        const key = `${appType}-${sourceId}`;
        if (this.safemetaInfoMap[key]) {
            return this.safemetaInfoMap[key];
        }
        const resPromise = getSafemetaInfo({
            id: sourceId,
            appType,
        }).then((res) => res.data);
        this.safemetaInfoMap[key] = resPromise;
        return this.safemetaInfoMap[key];
    }
}
var safemetaManager = new SafemetaManager();

var index$1 = /*#__PURE__*/Object.freeze({
  __proto__: null,
  authManager: authManager,
  AuthWrapper: __vue_component__$2,
  spaceManager: spaceManager,
  authConstants: constants,
  AuthRouterLink: __vue_component__$1,
  JiangjunlingApplyModal: __vue_component__$3,
  AuthActionButtons: __vue_component__,
  safemetaManager: safemetaManager
});

var APPROVE_ACTION;
(function (APPROVE_ACTION) {
    APPROVE_ACTION["DOWNLOAD"] = "DOWNLOAD_APPROVE";
    APPROVE_ACTION["DATAPUSH"] = "DATAPUSH_APPROVE";
})(APPROVE_ACTION || (APPROVE_ACTION = {}));
const APPROVE_STATUS = {
    NOT_NEED: {
        CODE: 'NO_NEED',
        TEXT: '无需审批',
    },
    PENDING: {
        CODE: 'NO',
        TEXT: '待发起审批',
    },
    APPROVING: {
        CODE: 'APPROVING',
        TEXT: '审批中',
    },
    PASSED: {
        CODE: 'ALL',
        TEXT: '审批通过',
    },
    REJECT: {
        CODE: 'REJECT',
        TEXT: '驳回审批',
    },
    REVOKE: {
        CODE: 'CANCEL ',
        TEXT: '撤销审批',
    },
};
const NEED_APPROVE_STATUS = [APPROVE_STATUS.PENDING.CODE, APPROVE_STATUS.REJECT.CODE, APPROVE_STATUS.REVOKE.CODE];
const APPROVE_SUCCESS_STATUS = [APPROVE_STATUS.PASSED.CODE, APPROVE_STATUS.NOT_NEED.CODE];

function openReLoginMessage() {
    const reLoginManager = window.reLoginManager;
    if (reLoginManager) {
        reLoginManager.openLoginMessage();
    }
    else {
        reLogin.openLoginMessage();
    }
}
const { clientId } = new SystemSetting().getSystemSetting();
const config = {
    baseURL: '/api/moshu/api/v2',
    timeout: 180000,
    headers: {
        ['x-requested-with']: 'XMLHttpRequest',
        ['Cache-Control']: 'no-cache',
        ['Content-Type']: 'application/json',
    },
    validateStatus() {
        return true;
    },
    responseType: 'json',
};
const request = (req) => {
    const ssoid = api.get(`${clientId}_ssoid`) || '';
    const analogUser$1 = analogUser.get();
    req.headers['access-token'] = ssoid;
    req.headers['client-id'] = clientId;
    req.headers.projectId = spaceManager.getProjectId();
    if (analogUser$1.id) {
        req.headers['x-analoguser'] = analogUser$1.id;
    }
    return req;
};
const response = (res) => {
    const conf = res.config;
    if (res.status === 401 || (res.data || {}).status === 401) {
        openReLoginMessage();
        Promise.reject({
            type: 'STATUS_ERROR',
            status: 401,
            message: '登录失效, 请重新登录',
        });
    }
    if (res.status !== 200) {
        if (!conf.noToast) {
            mtdVue.Message({
                type: 'error',
                dangerouslyUseHTMLString: true,
                message: `<div>接口:${res.request.responseURL}</div>
          <div>状态码: ${res.status}</div>
          <div>提示信息: ${res.statusText}</div>`,
            });
        }
        throw new Error(res.statusText);
    }
    if (res.data.code !== 0) {
        if (!conf.noToast) {
            mtdVue.Message({
                type: 'error',
                dangerouslyUseHTMLString: true,
                message: `<div>错误提示:${res.data.message} 错误码:${res.data.code}:${res.data.traceId}</div>`,
            });
        }
        return Promise.reject(res.data);
    }
    return res.data;
};
const responseError = (error) => {
    mtdVue.Message({
        showClose: true,
        type: 'warning',
        duration: 10000,
        message: '网络异常:' + error,
    });
    return Promise.reject({
        code: 40000,
        message: error,
        url: error && error.request && error.config.url,
    });
};
const service = axios__default["default"].create(config);
service.interceptors.request.use(request);
service.interceptors.response.use(response, responseError);

function getApproveResult(params) {
    return service.post('/safe/auth/doAuth/byAction', params);
}
function toApply(params) {
    return service.post('/approveLink/submit', params);
}

class SafetyApprove {
    constructor() {
        this.applyMis = '';
        this.applyUserId = 0;
        this.applyQueryResultList = [];
        this.applySQLDataList = [];
        this.applyAction = APPROVE_ACTION.DOWNLOAD;
        this.applyPageUrl = window.location.href;
        this.applyActionText = '下载';
        this.applyDetailsUrl = '';
        this.applyPageName = '魔数页面';
    }
    get needApproveTips() {
        return `继续${this.applyActionText}该内容需要进行安全审批，是否继续${this.applyActionText}？`;
    }
    get approvingTips() {
        return `<div>提交触发审批流，请等待。无反应可以点击<a href="${this.applyDetailsUrl}" target="_blank">审批流管理</a>, 联系审批人咨询。</div>`;
    }
    init({ applyMis, applyUserId, applyQueryResultList, applySQLDataList, applyAction, applyPageUrl, applyActionText, applyPageName, }) {
        this.applyMis = applyMis || '';
        this.applyUserId = applyUserId || 0;
        this.applyAction = applyAction || APPROVE_ACTION.DOWNLOAD;
        this.applyQueryResultList = applyQueryResultList || [];
        this.applySQLDataList = applySQLDataList || [];
        this.applyPageUrl = applyPageUrl || window.location.href;
        this.applyActionText = applyActionText || '下载';
        this.applyPageName = applyPageName || '魔数页面';
    }
    showApproveMessage(msg) {
        mtdVue.Message({
            type: 'info',
            dangerouslyUseHTMLString: true,
            message: msg,
            duration: 0,
            showClose: true,
        });
    }
    showApproveConfirmDialog(msg) {
        mtdVue.Confirm({
            title: '提示',
            message: msg,
            width: '430px',
            type: 'info',
            showCancelButton: true,
            onOk: () => {
                this.handleApply();
            },
        });
    }
    getRequestParams() {
        const applyResourceList = this.applyQueryResultList.length > 0 ? this.applyQueryResultList : this.applySQLDataList;
        const idList = applyResourceList.map((resource) => resource.version ? `${resource.id}_${resource.version}` : String(resource.id));
        const params = [
            {
                mis: this.applyMis || '',
                userId: this.applyUserId || 0,
                resources: {
                    appType: 'SQL',
                    subType: 'RESULT',
                    id: idList.join(',') || '',
                    extra: JSON.stringify({
                        linkName: this.applyPageName || '魔数页面',
                        linkUrl: this.applyPageUrl || window.location.href,
                    }),
                },
                authAction: {
                    authType: 'EXPORT',
                    userAction: this.applyAction || APPROVE_ACTION.DOWNLOAD,
                },
            },
        ];
        return params;
    }
    getApproveResult() {
        return __awaiter(this, void 0, void 0, function* () {
            const params = this.getRequestParams();
            const approveData = yield getApproveResult(params);
            if ((approveData === null || approveData === void 0 ? void 0 : approveData.code) === 0) {
                const data = approveData === null || approveData === void 0 ? void 0 : approveData.data[0];
                return {
                    approveStatus: data.permissionType || APPROVE_STATUS.PENDING.CODE,
                    applyDetailsUrl: data.extra || '',
                };
            }
            return {
                approveStatus: APPROVE_STATUS.PENDING.CODE,
                applyDetailsUrl: '',
            };
        });
    }
    handleApply() {
        return __awaiter(this, void 0, void 0, function* () {
            const params = this.getRequestParams();
            const approveData = yield toApply(params);
            if ((approveData === null || approveData === void 0 ? void 0 : approveData.code) === 0) {
                this.applyDetailsUrl = approveData.data.workflowUrl || '';
                this.showApproveMessage(this.approvingTips);
            }
        });
    }
    isResourceListEmpty(resourceList = []) {
        return resourceList.length === 0;
    }
    canOutgoingData({ applyMis, applyUserId, applyQueryResultList, applySQLDataList, applyAction, applyPageUrl, applyActionText, applyPageName, }) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.isResourceListEmpty(applyQueryResultList || applySQLDataList)) {
                return Promise.resolve(true);
            }
            this.init({
                applyMis,
                applyUserId,
                applyQueryResultList,
                applySQLDataList,
                applyAction,
                applyPageUrl,
                applyActionText,
                applyPageName,
            });
            const { approveStatus, applyDetailsUrl } = yield this.getApproveResult();
            this.applyDetailsUrl = applyDetailsUrl || '';
            return new Promise((resolve) => {
                if (APPROVE_SUCCESS_STATUS.includes(approveStatus)) {
                    resolve(true);
                    return;
                }
                resolve(false);
                if (NEED_APPROVE_STATUS.includes(approveStatus)) {
                    this.showApproveConfirmDialog(this.needApproveTips);
                    return;
                }
                this.showApproveMessage(this.approvingTips);
            });
        });
    }
}
const safetyApprove = new SafetyApprove();
const SafetyApproveConstants = {
    APPROVE_ACTION,
};

var index = /*#__PURE__*/Object.freeze({
  __proto__: null,
  safetyApprove: safetyApprove,
  SafetyApproveConstants: SafetyApproveConstants
});

exports.OutgoingData = index;
exports.analog = analogUser;
exports.gray = index$2;
exports.monitor = index$3;
exports.permission = index$1;
exports.reLogin = reLogin;
exports.secDownload = secDownload;
exports.sso = sso;
