import { AuthResult } from '../api/auth';
import { GetSafemetaInfoRes } from '../api/safemeta';
import { APP_TYPE } from './constants';
export interface AuthParam {
    action: string;
    subResources?: {
        id?: string;
        extra?: string;
    };
    online?: boolean;
    id?: string;
    queryInfo?: {
        hostGroup?: string;
        key?: string;
        engine?: string;
        statement?: string;
    };
    targetProjectId?: number;
}
export interface SafeMetaOfAuthRes extends GetSafemetaInfoRes {
    invalid?: boolean;
}
export interface AuthRes extends AuthResult {
    params: ReturnType<typeof resolveAuthParam>[number];
    safeMetaResult?: SafeMetaOfAuthRes;
    subAuthResults?: AuthRes[];
}
declare function resolveAuthParam(paramList: Array<AuthParam>, mis: string): {
    mis: string;
    projectId: number;
    targetProjectId: number | undefined;
    resources: {
        appType: string;
        subType: string;
        id?: string | undefined;
        subResources?: [{
            appType: string;
            subType: string;
            id?: string | undefined;
            extra?: string | undefined;
        }] | undefined;
    };
    authAction: {
        userAction: string;
    };
    online: boolean | undefined;
}[];
declare class AuthManager {
    authorizationUrl: string;
    oldMonitorAuthorizationUrl: string;
    authManageUrl: string;
    parseAction(action: string): {
        appType: string;
        subType: string;
        realAction: string;
    };
    multiAuth(mis: string, paramList: Array<AuthParam>): Promise<AuthRes[]>;
    singleAuth(mis: string, param: AuthParam): Promise<AuthRes>;
    goNoAuthPage(authRes: AuthRes, desc: string): void;
    goAuthorizationPage(moshuAppType: APP_TYPE, resourceId: string | number, isMonitorOld?: boolean): void;
    goAuthManagePage(code: string): void;
    getUserByAction(param: AuthParam): Promise<{
        userId: number;
        misId: string;
        userName: string;
        role: string;
    }[]>;
}
declare const _default: AuthManager;
export default _default;
