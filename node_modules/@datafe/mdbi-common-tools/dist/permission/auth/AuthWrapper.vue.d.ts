import Vue from 'vue';
import { AuthRes } from './authManager';
declare enum AuthStatus {
    WAIT = 0,
    LOADING = 1,
    FINISH = 2
}
export interface Options {
    id: string;
    online: boolean;
    action: string;
    mis: string;
    subResources?: {
        id?: string;
        extra?: string;
    };
    needPermissionType?: PermissionType;
    targetProjectId?: number;
    triggerType?: string;
    failTreatType?: FailTreatType;
    isMonitorOld?: boolean;
    noOptionsCheck?: boolean;
}
export declare enum FailTreatType {
    HIDE = "hide",
    TOOLTIP = "tooltip"
}
export declare enum PermissionType {
    NO = 0,
    ALL = "ALL",
    PART = "PART"
}
export declare enum InvalidSlot {
    AUTH_TOOLTIP_CONTENT = "auth-tooltip-content"
}
export declare enum NoPermissionType {
    NONE = 0,
    SAFEMETA = 1,
    TABLE = 2,
    RESOURCE = 3
}
export default class AuthWrapper extends Vue {
    options: Options;
    disabled?: boolean;
    tooltipVisible: boolean;
    authStatus: AuthStatus;
    permissionType: PermissionType;
    showApplyModal: boolean;
    noPermissionText: string;
    noPermissionType: NoPermissionType;
    get appType(): string;
    get authDisabled(): boolean;
    get realFailTreatType(): FailTreatType | FailTreatType.TOOLTIP;
    get realNeedPermissionType(): PermissionType | PermissionType.PART;
    get hasPermission(): boolean;
    get isLoading(): boolean;
    get tooltipDisabled(): boolean;
    get isShow(): boolean;
    get showResourceApplyBtn(): boolean;
    get isAuthManageAction(): boolean;
    onOptionsChange(): void;
    reset(): void;
    auth(): Promise<void>;
    handleApply(): Promise<void>;
    handleClick(): Promise<void>;
    emitAuthClickEvent(): void;
    optionsIsValid(): string | true;
    resolveAuthResItem(res: AuthRes): {
        permissionType: PermissionType;
        noPermissionType: NoPermissionType;
        noPermissionText: string;
    } | null;
    resolveAuthRes(res: AuthRes): void;
}
export {};
