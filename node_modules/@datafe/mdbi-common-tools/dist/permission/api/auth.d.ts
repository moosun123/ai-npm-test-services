import { GetSafemetaInfoRes } from './safemeta';
interface Resource {
    appType: string;
    subType: string;
    id?: string;
    hostGroup?: string;
    key?: string;
    engine?: string;
    statement?: string;
    extra?: string;
    subResources?: Resource[];
}
interface AuthAction {
    authType?: string;
    userAction?: string;
}
export interface AuthParams {
    mis: string;
    projectId: number;
    targetProjectId?: number;
    resources: Resource;
    authAction: AuthAction;
    online?: boolean;
}
interface PermissionValue {
    name: string;
    value: string;
    isAll: number;
    items: PermissionValue[];
}
interface TableAuthResult {
    dsType?: string;
    ds?: string;
    db?: string;
    table?: string;
    col?: string[];
    rowCtrlMsg?: string;
    url?: string;
}
export interface AuthResult {
    hasPermission: boolean;
    permissionType?: string;
    permissionValues?: PermissionValue;
    permissionDetail?: string[];
    authCode?: string;
    solution?: string;
    tableAuthResults?: TableAuthResult[];
    extra?: string;
    subAuthResults?: AuthResult[];
    safeMetaResult?: GetSafemetaInfoRes;
}
export declare function actionAuth(params: AuthParams[]): Promise<{
    code: number;
    message: string;
    data?: AuthResult[];
}>;
export declare function fetchAuthUser(params: Array<{
    resources: Resource;
    authAction: AuthAction;
}>): Promise<{
    code: number;
    message: string;
    data?: Array<{
        resource: Resource;
        users: Array<{
            userId: number;
            misId: string;
            userName: string;
            role: string;
        }>;
    }>;
}>;
export {};
