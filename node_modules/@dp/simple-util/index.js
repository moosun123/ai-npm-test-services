'use strict'

/**
 * 保证fn主体函数只会被调用一次，并且多次调用拿到同一个结果
 * @param {function} fn
 * @return {function}
 */
exports.once = function(fn) {
    let called = false
    let res = null
    return function() {
        if (called) {
            return res
        }
        called = true
        res = fn.apply(null, arguments)
        return res
    }
}

/**
 * 设定一个定时器,
 * @param {function} fn 定时执行的函数
 * @param {*} time 执行的时间间隔 , 单位s
 * @param {*} isImmediate 是否立刻执行
 */
exports.interval = (fn, time, isImmediate) => {
    let active = true
    time = time * 1000
    let timer = null
    let next = () => (timer = setTimeout(run, time))
    let run = () => {
        let res = fn()
        res instanceof Promise ? (res.then(() => next(), () => next())) : next()
    }
    next()
    isImmediate && fn()
    return {
        // 清除
        pause: () => {
            clearTimeout(timer)
            active = false
        },
        /**
         * 恢复interval
         * @param {isImmediate} 是否立刻执行一次
         */
        resume: (isImmediate) => {
            if (!active) {
                active = true
                next()
                isImmediate && fn()
            }
        }
    }
}
