const Constants = require('../config/Constants')
const Debug = require('debug')('PatriotSDK')

const KMS = require('../kms/index')
const Logger = require('../logger')

const SimpleUtil = require('@dp/simple-util')

const tokens = {}

function refreshToken() {
    let promiseArr = []
    for (let key in tokens) {
        promiseArr.push(new Promise((resolve, reject) => {
            updateToken(key).then(newToken => {
                if (newToken && newToken !== tokens[key].value) {
                    tokens[key] = {
                        value: newToken,
                        access: true,
                        timestamp: Date.now()
                    }
                }
                if (!tokens[key].access) {
                    delete tokens[key]
                }
            })
        }))
    }
    return Promise.all(promiseArr)
}

SimpleUtil.interval(() => {
    refreshToken().catch(err => Logger.error('[Node PatriotSDK] refreshToken error', err))
}, 60)

function updateToken(key) {
    let arr = key.split('|')
    return new Promise(resolve => {
        return KMS.getKeyByName(arr[0], arr[1]).then(res => {
            let tokenStr = JSON.parse(res).pop()
            resolve(tokenStr)
        }).catch(err => {
            Debug('[Node PatriotSDK] KMS.getKeyByName', err)
            resolve(null)
        })
    })
}
class KmsTokenImpl {
    getTokenSignature(namespace, name, type, context) {
        let signature = type.signature

        let m1 = {}
        m1[Constants.ALGORITHM_KEY] = type.type
        m1[Constants.TYPE_KEY] = 'patriot'
        m1.time = Date.now() + ''

        let s1 = Buffer.from(JSON.stringify(m1)).toString('base64')
        Debug(`m1 : ${JSON.stringify(m1)},s1 : ${s1}`)

        // let ts = Date.now()
        let m2 = {}
        m2[Constants.NAMESPACE_KEY] = namespace
        m2[Constants.NAME_KEY] = name
        // m2[Constants.TIME_KEY] = '' + ts
        Object.assign(m2, context)

        let s2 = Buffer.from(JSON.stringify(m2)).toString('base64')
        Debug(`m2 : ${JSON.stringify(m2)},s2 : ${s2}`)

        return this.getToken(namespace, 'auth_client_' + name).then(token => {
            return s1 + '.' + s2 + '.' + signature.signature(token, s2)
        })
    }

    getToken(namespace, name) {
        let key = namespace + Constants.SEP + name
        let tokenEntry = tokens[key]
        if (!tokenEntry) {
            return new Promise((resolve, reject) => {
                KMS.getKeyByName(namespace, name).then(tokenList => {
                    let tokenStr
                    try {
                        tokenStr = JSON.parse(tokenList).pop()
                    } catch (e) {
                        reject(new Error('没有获取到kms数据或者kms数据错误'))
                        return
                    }
                    tokens[key] = {
                        value: tokenStr,
                        access: true,
                        timestamp: Date.now()
                    }
                    resolve(tokenStr)
                }).catch(err => {
                    tokens[key] = {
                        value: null,
                        access: false,
                        timestamp: Date.now()
                    }
                    // todo TokenException
                    Debug('[Node PatriotSDK] namespace ' + namespace + ', name ' + name, err)
                    reject(err)
                })
            })
        } else {
            return Promise.resolve(tokenEntry.value)
        }
    }
}

module.exports = KmsTokenImpl
