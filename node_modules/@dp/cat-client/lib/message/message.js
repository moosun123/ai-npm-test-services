'use strict'

var logger = require('../logger.js')('message')
/**
 * Get an instance of a basic message.
 *
 * @param {object} options Message options for initialization.
 */
class Message {
    constructor(options) {
        options = options || {}
        this.type = options.type || undefined
        this.name = options.name || undefined
        this.status = options.status || '0'
        this.beginTime = +options.beginTime || Date.now()
        this.endTime = +options.endTime || Date.now()
        this.data = options.data || ''

        this.duration = parseInt(options.duration) || 0

        this.children = options.children || []
        // this.parent = null
        //    this.uid = options.uid || undefined;
        //    this.uid = rand.generate();
        // this.isBegin = options.isBegin || false
        this.isBegin = true
        this.isEnd = options.isEnd || false
        // this.tree = null // 如果作为tree的根节点，这个属性作为索引
        //    this.puid = options.puid || undefined;
        this.messageType = 'message' // 子类复写
    }

    ensureStringMember() {
        if (typeof this.type !== 'string') {
            logger.error('message type is not string: ' + this.type)
            this.type = String(this.type)
        }
        if (typeof this.name !== 'string') {
            logger.error('message name is not string: ' + this.name)
            this.name = String(this.name)
        }
        if (typeof this.status !== 'string') {
            logger.error('message status is not string: ' + this.status)
            this.status = String(this.status)
        }
        if (typeof this.data !== 'string') {
            logger.error('message data is not string: ' + this.data)
            this.data = String(this.data)
        }
    }

    end(maxTime) {
        if (this.isEnd) {
            return
        }

        this.isEnd = true

        if (this.duration) {
            this.endTime = this.beginTime + this.duration
            return
        }

        let now = Date.now()
        if (maxTime) {
            if (now - this.beginTime > maxTime) {
                this.endTime = this.beginTime + maxTime
            } else {
                this.endTime = now
            }
        } else {
            this.endTime = now
        }
        this.duration = this.endTime - this.beginTime
    }

    /**
     * 为了性能这里直接重新赋值了children，但是要保证下新的都本来就是子节点
     * 这里的主要用处是set原来的子集
     * @param {[]Message} children
     */
    resetChildren(children) {
        this.children = children || []
    }

    addChild(message) {
        this.children.push(message)
        // message.parent = this
    }

    /**
     * 子类复写
     * */
    toBuffer() {
        return null
    }
}

module.exports = Message
