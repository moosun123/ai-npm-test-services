'use strict'

const net = require('net')
const logger = require('../../logger.js')('sender')
const debug = require('debug')('cat:sender')
const util = require('util')
const path = require('path')
const fs = require('fs')
const CAT_HOME = process.env.CAT_HOME || '/data/appdatas/cat/'
const CLIENT_CONFIG_FILE = path.join(CAT_HOME, 'client.xml')
const xml = require('xml2js')
const once = require('@dp/simple-util').once
const config = require('../../config')()
const request = require('request')

const HALF = 32
const MAX = 10000
const SINGLE = 100
const MAX_NONE_CONNECTION_LENGTH = 10000 // 失去连接时最大的消息缓存量
var currentClient
var clientPool = []
var messageQueue = [] // 消息队列
var sample = 1 // 采样比例
var inited = false // 是否调用过初始化
var immediate = null
/**
 * execute messageQueue
 * */
var execute = function() {
    if (!currentClient) {
        return
    }
    let length = messageQueue.length
    if (length > MAX) {
        length = Math.floor(length / HALF)
    } else {
        if (length > SINGLE) {
            length = SINGLE
        }
    }
    for (let i = 0; i < length; i++) {
        debug('send data')
        currentClient.write(messageQueue.shift().serialize())
    }

    if (messageQueue.length) {
        immediate = setImmediate(execute)
    } else {
        immediate = null
    }
}

var createConnection = function(port, ip, isMain) {
    let address = ip + ':' + port
    // logger.info('try to connect to ' + address)
    var client = net.connect(port, ip)
    client.setKeepAlive(true)
    var reconnect = function() {
        if (currentClient === client) {
            // logger.info('reconnect ' + address)
        }
        client.removeAllListeners()
        // 移除自己
        var index = clientPool.indexOf(client)
        if (index > -1) {
            clientPool.splice(index, 1)
        }
        if (currentClient === client) {
            currentClient = nextClient()
            logger.info('current:  ' + address)
        }
        createConnection(port, ip, isMain)
    }

    client.on('error', (e) => {
        if (currentClient === client) {
            logger.info('error with cat server:' + address)
        }
    })
    client.on('close', () => {
        if (currentClient === client) {
            logger.info(address + ' close')
        }
        setTimeout(reconnect, 3000)
    })

    client.once('connect', () => {
        // logger.info('success connect to cat server ' + address)
        if (isMain) {
            // 主服务器连上之后
            currentClient = client
            logger.info('currentServer:' + address)
            execute()
        }
        clientPool.push(client)
    })
}
var nextClient = function() {
    return clientPool[0]
}
var catRouter = function(server) {
    var port = ':' + (server['http-port'] ? server['http-port'] : '8080')
    if (port === ':80') {
        port = ''
    }
    var url = 'http://' + server.ip + port + '/cat/s/router?domain=' + config.domain + '&op=json&ip=' + config.ip
    request(url, function(error, response, body) {
        logger.info('request cat router: ' + url)
        if (!error && response.statusCode === 200) {
            try {
                logger.info('router body: ' + body)
                let cfg = JSON.parse(body).kvs
                sample = (+cfg.sample) || 1
                logger.info('get sample ' + sample)
                let routers = cfg.routers

                if (!routers) {
                    return
                }
                logger.info('get routers ' + routers)
                routers.split(';').forEach((ipStr, i) => {
                    var arr = ipStr.split(':')
                    if (arr[0] && arr[1]) {
                        createConnection(arr[1], arr[0], i === 0)
                    }
                })
            } catch (e) {
                logger.info('parse cat router response fail')
            }
        }
    })
}

/**
 * init sender
 */
exports.init = once(function() {
    inited = true
    if (!fs.existsSync(CLIENT_CONFIG_FILE)) {
        logger.error(util.format('Cannot read cat config from ' + CLIENT_CONFIG_FILE + '.'))
        return
    }
    let promise = new Promise((resolve, reject) => {
        try {
            var content = fs.readFileSync(CLIENT_CONFIG_FILE)
            xml.parseString(content.toString(), function(err, result) {
                if (result && result.config && result.config.servers) {
                    // ip and port
                    let server = result.config.servers[0].server[0].$
                    logger.info('Set cat server ' + JSON.stringify(server))
                    resolve(server)
                }
                resolve(null)
            })
        } catch (e) {
            logger.error('Read File ' + CLIENT_CONFIG_FILE + ' Fail')
            resolve(null)
        }
    })

    promise.then((server) => {
        if (!server) {
            logger.info('No cat server address configed for client.')
            return
        }
        /**
         * 连接配置的默认
         * 然后请求 http://默认ip:8080/cat/s/router?domain=应用名&op=json&ip=当前应用机器ip
         * 读取服务器列表 ，列表的第一个ip作为主服务器，其他备用
         * */
        createConnection(server.port, server.ip, true)
        catRouter(server)

        setInterval(function() {
            if (messageQueue.length) {
                logger.info('Cat Message Queue Rest ' + messageQueue.length)
            }
        }, 65000)
    })
})

/**
 * @param {Tree} tree
 */
exports.send = function(tree) {
    if (!inited) {
        logger.info('call Cat.init({appName:yourAppName}) before send()')
        return
    }
    if (Math.random() > sample) {
        return
    }
    if (!currentClient && messageQueue.length > MAX_NONE_CONNECTION_LENGTH) {
        logger.info('lost connection and too much message , drop..')
        return
    }
    messageQueue.push(tree)
    if (immediate == null) {
        immediate = setImmediate(execute)
    }
}
