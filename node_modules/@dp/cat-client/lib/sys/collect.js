'use strict'
const SystemInfo = require('./SystemBaseInfo')
const os = require('os')
const catVersion = require('../../package.json').version
const START_TIME = Date.now()

var userName = ''
if (os.userInfo) {
    userName = os.userInfo().username
} else {
    userName = require('child_process').execSync('whoami', {encoding: 'utf8', timeout: 1000}).replace('\n', '')
}

function getCustomInfos() {
    const runtime = {
        'start-time': START_TIME,
        'up-time': os.uptime(),
        'node-version': process.version,
        'node-cat-version': catVersion,
        'user-name': userName,
        'os-ame': os.type(),
        'os-arch': os.arch()
    }

    let customInfos = []
    for (let key in runtime) {
        customInfos.push(new SystemInfo('customInfo', {
            key: key,
            value: runtime[key]
        }))
    }

    return customInfos
}

/**
 * There is a format rule for the heartbeat infos.
 * One simple example is as follows:
 *
 * <status>
 *     <extension id="os">
 *         <extensionDetail id="available-processors" value="12" />
 *     </extension>
 *     <customInfo key="start-time" value="1603339681179" />
 * </status>
 *
 * The root is the status label; extension and customInfo are its children.
 * There can be multiple `extension` and `customInfo` blocks there; they are
 * not nested, and are on the same level.
 *
 * One thing to note that the value in the `extensionDetail` should be able to
 * be converted to double. Otherwise, it should be put in the `customInfo` section.
 * @return {SystemInfo} base system info
 */
exports.collectSysInfo = async function() {
    // status is root node
    const status = new SystemInfo('status')

    // runtime
    const customInfos = getCustomInfos()
    for (let i = 0; i < customInfos.length; ++i) {
        status.addChild(customInfos[i])
    }

    return status
}

