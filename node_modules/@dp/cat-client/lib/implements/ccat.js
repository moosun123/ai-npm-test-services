
'use strict'
/**
 * ccat implement
 * http://docs.sankuai.com/doc/arch_dp/cat/integration/c/
 */
const os = require('os')
const platform = os.platform()
const Event = require('../message/event')
let CCatApi

let nodeVer = process.versions.node
if (platform === 'darwin') {
    CCatApi = require('../../build_darwin/Release/catapi')
} else if (platform === 'linux') {
    CCatApi = require('../../build_linux/Release/catapi')
}

exports.init = (appKey) => {
    CCatApi.init(appKey, 'nodejs', nodeVer)
    process.on('exit', (code) => {
        try {
            CCatApi.destroy()
        } catch (e) { }
    })
}

/**
 * log metric
 * @param {string} name
 * @param {number} quantity
 * @param {object} [tags]
 */
exports.logMetricForCount = (name, quantity, tags) => {
    if (tags) {
        CCatApi.logMetricForCount(name, quantity, tags)
    } else {
        CCatApi.logMetricForCount(name, quantity)
    }
}
/**
 * log metric
 * @param {string} name
 * @param {number} duration
 * @param {object} tags
 */
exports.logMetricForDuration = (name, duration, tags) => {
    if (tags) {
        CCatApi.logMetricForDuration(name, duration, tags)
    } else {
        CCatApi.logMetricForDuration(name, duration)
    }
}

exports.logError = (name, errString) => {
    CCatApi.logError(name, errString)
}

function countTree(message) {
    let count = 1
    message.children.forEach(child => (count += countTree(child)))
    return count
}
function position(count) {
    const array = [200, 500, 1000]
    for (let i = 0; i < array.length; i++) {
        if (count < array[i]) {
            return '<' + array[i]
        }
    }
    return '>' + array[array.length - 1]
}

exports.sendTree = (tree) => {
    if (tree.root.messageType === 'transaction') {
        let count = countTree(tree.root)
        let event = new Event({
            type: 'TreeCount',
            name: position(count),
            data: '' + count,
            status: '0'
        })
        tree.root.addChild(event)
    }
    CCatApi.sendTree(tree)
}
