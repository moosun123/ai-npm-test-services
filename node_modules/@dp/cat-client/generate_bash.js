#! /usr/bin/env node

// 根据package.json中的ccat_version字段，生成构建需要的配置文件

const path = require('path')
const fs = require('fs')
const pkg = require('./package.json')
const ccatVersion = pkg.ccat_version
const catGlobalLibDir = pkg.ccat_global_lib_dir
const catLocalLibDir = pkg.ccat_local_lib_dir
const SCRIPTS_PATH = path.join(__dirname, './scripts')

// 不要随意修改, 在lib/adapter.js中也使用了
const GLOBAL_LIB_PATH = `${catGlobalLibDir}/libcatclient-${ccatVersion}.a`
const CCAT_VERSION_PATH = path.join(__dirname, `${catLocalLibDir}/../version`)
const MAC_LOCAL_PATH = path.join(__dirname, `${catLocalLibDir}/libcatclient-darwin.a`)
const LINUX_LOCAL_PATH = path.join(__dirname, `${catLocalLibDir}/libcatclient-linux.a`)

// binding.gyp 文件
const binding = `{
    "targets": [
        {
            "target_name": "catapi",
            "sources": ["src/api.cc", "src/transaction_wrap.cc"],
            "include_dirs": [
                "include", "src/ccat/include","src/ccat/src",
                "<!@(node -p \\"require('node-addon-api').include\\")"
            ],
            'dependencies': [
                "<!(node -p \\"require('node-addon-api').gyp\\")"
            ],
            'defines': [ 'NAPI_DISABLE_CPP_EXCEPTIONS' ],
            "libraries": ["${GLOBAL_LIB_PATH}"]
        }
    ]
}`

// scripts都放在${SCRIPTS_PATH}目录下，进到这个目录下执行

// 在linux上构建的脚本
const linuxSH = `
# !!!不要手动修改这个文件的脚本，修改generate_bash.js中的模板!!!
set -x
set -e

rm -rf ${GLOBAL_LIB_PATH}
rm -rf ${LINUX_LOCAL_PATH}
cd ../src/ccat
pwd
mkdir -p cmake
cd cmake && cmake .. && make
make -p /data/appdatas/cat
cp ./libcatclient.a ${LINUX_LOCAL_PATH}
cp ./libcatclient.a ${GLOBAL_LIB_PATH}
cp ../version ${CCAT_VERSION_PATH}

# gyp
cd ../../..
pwd
rm -rf build_linux/
rm -rf build/
node-gyp configure
node-gyp build
mv build build_linux
`

// 构建mac版本的库
const macSH = `
# !!!不要手动修改这个文件的脚本，修改generate_bash.js中的模板!!!
set -x
set -e

# mac开发本地build链接库出来 cmake版本2.4以上，brew install cmake
rm -rf ${GLOBAL_LIB_PATH}
rm -rf ${MAC_LOCAL_PATH}
cd ../src/ccat
pwd
mkdir -p cmake
cd cmake && cmake .. && make
make -p ${catGlobalLibDir}
cp ./libcatclient.a ${GLOBAL_LIB_PATH}
cp ./libcatclient.a ${MAC_LOCAL_PATH}
cp ../version ${CCAT_VERSION_PATH}

# gyp
cd ../../..
pwd
rm -rf build_darwin/
rm -rf build/
node-gyp configure 
node-gyp build
mv build build_darwin
`

fs.writeFileSync(path.join(__dirname, `./binding.gyp`), binding)
fs.writeFileSync(path.join(SCRIPTS_PATH, './mac_build.sh'), macSH)
fs.writeFileSync(path.join(SCRIPTS_PATH, './linux_build.sh'), linuxSH)
