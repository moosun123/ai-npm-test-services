export enum STATUS {
    SUCCESS = '0',
    FAIL = '1'
}

export class TransactionHandler {
    setStatus(status: STATUS):void
    setName(name: string):void
    complete(maxTime?: number) : void
    addData(key: string, value?: string) : void
    logEvent(type: string, name: string, status?: STATUS, data?: string) : void
    logError(name: string | Error, error?: Error) : void
    newTransaction(type: string, name: string, duration?: number) : TransactionHandler
}

export class Cat {
    STATUS: typeof STATUS
    constructor(threadMode: boolean);
    init(options: { appName: string }) : void
    logEvent(type: string, name: string, status?: STATUS, data?: string) : void
    logError(name: string | Error, error?: Error) : void
    newTransaction(type: string, name: string, duration?: number) : TransactionHandler
    logMetricForCount(name: string, quantity?: number, tags?: { [key: string]: string }) : void
    logMetricForDuration(name: string, duration: number, tags?: { [key: string]: string }) : void
}

declare let cat: Cat

export default cat
export function middleware(ctx:any,next:any):Promise<any>
export function expressMiddleware(req:any, res:any, next:any):void
