#ifndef CAT_CLIENT_C_CLIENT_H
#define CAT_CLIENT_C_CLIENT_H

#include "client_common.h"
#include "heartbeat.h"
#include "event.h"
#include "trace.h"
#include "metric.h"
#include "metric_helper.h"
#include "transaction.h"

#ifdef __cplusplus
extern "C" {
#endif

#define CAT_LOG_INFO 1u
#define CAT_LOG_DEBUG  1u<<1u

typedef void (*loggerFunction)(const char *format, ...);

typedef struct _CatLogger {
    loggerFunction info;
    loggerFunction error;
    loggerFunction warning;
    loggerFunction debug;
} CatLogger;

typedef struct _CatClientConfig {
    uint32_t encoderType;
    uint8_t enableHeartbeat;
    uint8_t enableSampling;
    uint8_t enableMultiprocessing;
    uint8_t enableAutoInitialize;
    uint32_t loggingLevelConfig;
    CatLogger* logger;
    char* componentSwitch;
    uint32_t transactionBatchQueueCapacity;
    uint32_t eventBatchQueueCapacity;
} CatClientConfig;

extern CatClientConfig DEFAULT_CCAT_CONFIG;

/**
 * Client APIs
 */

int catClientInit(const char *domain);

int catClientInitWithConfig(const char *domain, CatClientConfig* config);

int catClientDestroy();

const char* catVersion();

/**
 * Transaction APIs
 */

CatTransaction *newTransaction(const char *type, const char *name);

CatTransaction *newTransactionWithDuration(const char *type, const char *name, unsigned long long durationMs);

void newCompletedTransactionWithDuration(const char *type, const char*name, unsigned long long durationMs);

void logTransaction(const char *type, const char *name, const char *status, const char *nameValuePairs, unsigned long long durationMs);

void logBatchTransaction(const char *type, const char *name, int count, int error, unsigned long long sum);

/**
 * Event APIs
 */

CatEvent *newEvent(const char *type, const char *name);

void logEvent(const char *type, const char *name, const char *status, const char *nameValuePairs);

void logBatchEvent(const char *type, const char *name, int count, int error);

void logEventWithTime(const char *type, const char *name, const char *status, const char *nameValuePairs, unsigned long long durationMs);

void logError(const char *msg, const char *errStr);

/**
 * @deprecated DO NOT use this API in your code.
 */
CatHeartBeat *newHeartBeat(const char *type, const char *name);

/**
 * Trace APIs
 */

#define logTrace(type, name, status, nameValuePairs) logTraceWithCodeLocation((type), (name), (status), (nameValuePairs), \
    __FILE__, __FUNCTION__, __LINE__)

void logTraceWithCodeLocation(const char *type, const char *name, const char *status,
                                               const char *nameValuePairs, const char *fileName,
                                               const char *functionName, int lineNo);

#define logErrorTrace(type, name, data) logErrorWithCodeLocation((type), (name), (data), \
    __FILE__, __FUNCTION__, __LINE__)

void logErrorWithCodeLocation(const char *type, const char *name,
                                               const char *data, const char *fileName, const char *functionName,
                                               int lineNo);

/**
 * Metric APIs
 */

CatMetric *newMetric(const char *type, const char *name);

void logMetricForCount(const char *name);

void logMetricForCountQuantity(const char *name, int quantity);

void logMetricForDuration(const char *name, unsigned long long durationMs);

void logMetricForLatestValue(const char *name, int quantity);

/**
 * Message Id APIs
 */

char *createMessageId();

char *createRemoteServerMessageId(const char *domain);

char *getThreadLocalMessageTreeId();

char *getThreadLocalMessageTreeRootId();

char *getThreadLocalMessageTreeParentId();

void setThreadLocalMessageTreeId(const char *messageId, const char *rootMessageId, const char *parentMessageId);

/**
 * Deprecated APIs.
 */

/**
 * @deprecated
 */
int catSetLanguageBinding(const char* language, const char* client_version);

/**
 * @deprecated
 */
int catDisableHeartbeat();

/**
 * @deprecated
 */
void catClientInitWithSingleProcessModel(); // for nodejs

/**
 * @deprecated
 */
void setTransactionStatus(CatTransaction *transaction, const char *status);

/**
 * @deprecated
 */
void setTransactionTimestamp(CatTransaction *transaction, unsigned long long timestampMs);

/**
 * @deprecated
 */
void completeTransaction(CatTransaction *transaction);

/**
 * @deprecated
 */
void addTransactionDataPair(CatTransaction *transaction, const char *data);

/**
 * @deprecated
 */
void setMessageStatus(CatMessage *message, const char *status);

/**
 * @deprecated
 */
void setMessageTimestamp(CatMessage *message, unsigned long long timestampMs);

/**
 * @deprecated
 */
void completeMessage(CatMessage *message);

/**
 * @deprecated
 */
void addMessageData(CatHeartBeat *message, const char *data);

/**
 * @deprecated
 */
void inline setHeartbeatStatus(CatHeartBeat *heartBeat, const char *status) {
    setMessageStatus(heartBeat, status);
}

/**
 * @deprecated
 */
void inline completeHeartbeat(CatHeartBeat *heartBeat) {
    completeMessage(heartBeat);
}

/**
 * @deprecated
 */
void inline addHeartbeatDataPair(CatHeartBeat *heartBeat, const char *data) {
    addMessageData(heartBeat, data);
}

/**
 * @deprecated
 */
void addMetricTag(CatMetricHelper *pHelper, const char *key, const char *val);

/**
 * @deprecated
 */
void addMetricName(CatMetricHelper *pHelper, const char *name);

/**
 * @deprecated
 */
void addMetricCount(CatMetricHelper *pHelper, int count);

/**
 * @deprecated
 */
void addMetricDuration(CatMetricHelper *pHelper, unsigned long long durationMs);

#ifdef __cplusplus
}
#endif

#endif //CAT_CLIENT_C_CLIENT_H
