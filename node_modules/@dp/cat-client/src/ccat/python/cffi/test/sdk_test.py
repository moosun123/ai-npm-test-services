#!/usr/bin/env python
# encoding: utf-8

import traceback
import time

from cat.cat import (
    catSdk,
    CAT_SUCCESS,
    CAT_ERROR
)


def call_cat_client(n):
    cat = catSdk("pycat-ancient")

    while(True):
        tran = cat.new_transaction("tran-test", "test")

        cat.log_event("event-test", "test1", CAT_SUCCESS, "")
        cat.log_event("event-test", "test2", CAT_ERROR, "")
        try:
            1 / 0
        except Exception:
            cat.log_error("test-npe", traceback.format_exc())

        cat.set_transaction_status(tran, CAT_SUCCESS)
        cat.complete_transaction(tran)

        cat.log_metric_for_count("test-one-key")

        m_helper = cat.new_cat_build_metric_helper("metric-test")
        cat.add_metric_tag(m_helper, "metric-test", "a")
        cat.add_metric_tag(m_helper, "metric-test", "b")
        cat.add_metric_count(m_helper, 1)

        cat.log_batch_transaction("batchTest", "batchTest", 100, 11, 100)
        cat.log_batch_transaction("batchTest", "batchTest", 10, 1, 10)
        cat.log_batch_transaction("batchTest", "batchTest", 1, 0, 12)
        cat.log_batch_transaction("batchTest", "batchTest", 1, 0, 13)

        cat.log_batch_event("batchTest", "batchTest1", 0, 0)
        cat.log_batch_event("batchTest", "batchTest2", 100, 0)
        cat.log_batch_event("batchTest", "batchTest3", 0, 100)
        cat.log_batch_event("batchTest", "batchTest4", 50, 50)


def test():
    call_cat_client(0)


def ptest():
    import multiprocessing
    import threading
    # 线程调用方式, 启动一个线程， 后台运行，开始执行
    th = threading.Thread(target=call_cat_client,
                          name="test_sdk_thread", args=(1))
    th.setDaemon(True)
    th.start()

    # 创建进程池
    pool = multiprocessing.Pool(10)
    # 将需要运行的函数丢进去
    pool.map(call_cat_client, range(10))  # 后一个参数仅仅用来保证同时启动10个进程
    # 关闭进程池不再接受新的请求
    pool.close()
    # 开始执行, 阻塞所有进程直到结束
    pool.join()

    # NOTE command to kill all existing processes:
    # ps aux | grep sdk_test | awk '{print $2}' | xargs kill -9


if __name__ == '__main__':
    test()
    time.sleep(1)
