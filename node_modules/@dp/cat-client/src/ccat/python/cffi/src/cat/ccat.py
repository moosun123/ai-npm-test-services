# -*- coding: utf-8 -*-

import cffi

from .version import PY3

ffi = cffi.FFI()

if PY3:
    def _(x):
        return ffi.new("char[]", x.encode("utf-8"))
else:
    def _(x):
        return x.encode('utf-8') if isinstance(x, unicode) else x

ffi.cdef("""
typedef struct _CatMessage CatMessage;
typedef struct _CatMessage CatEvent;
typedef struct _CatMessage CatMetric;
typedef struct _CatMessage CatHeartBeat;

typedef struct _CatTranscation CatTransaction;

struct _CatMessage {
    void (*addDataPair)(CatMessage *message, const char *data);

    void (*addData)(CatMessage *message, const char *dataKey, const char *dataValue);

    void (*setStatus)(CatMessage *message, const char *status);

    void (*setComplete)(CatMessage *message);

    void *(*clear)(CatMessage *message);
};


struct _CatTranscation {
    void (*addDataPair)(CatTransaction *message, const char *data);

    void (*addData)(CatTransaction *message, const char *dataKey, const char *dataValue);

    void (*setStatus)(CatTransaction *message, const char *status);

    void (*setComplete)(CatTransaction *message);

    void *(*clear)(CatTransaction *message);

    void (*addChild)(CatTransaction *message, CatMessage *childMsg);

    void (*setDurationInMillis)(CatTransaction *message, unsigned long long durationMs);
};

typedef struct _CatClientConfig {
    int encoderType;
    int enableHeartbeat;
    int enableSampling;
    int enableMultiprocessing;
    int enableDebugLog;
    int enableAutoInitialize;
} CatClientConfig;

typedef struct _CatMetricHelper CatMetricHelper;

struct _CatMetricHelper {
    CatMetricHelper *(*AddName)(CatMetricHelper *pHelper, const char *name);

    CatMetricHelper *(*AddTags)(CatMetricHelper *pHelper, int tagCount, ...);

    CatMetricHelper *(*AddTag)(CatMetricHelper *pHelper, const char *key, const char *val);

    CatMetricHelper *(*AddCount)(CatMetricHelper *pHelper, int count);

    CatMetricHelper *(*AddDuration)(CatMetricHelper *pHelper, int durationMs);
};

typedef CatMessage CatHeartBeat;

""")

# common apis.
ffi.cdef("int catClientInit(const char *domain);")
ffi.cdef("int catClientInitWithConfig(const char *domain, CatClientConfig* config);")

# transaction apis.
ffi.cdef("CatTransaction *newTransaction(const char *type, const char *name);")
ffi.cdef("void logTransaction(const char *type, const char *name, const char *status, const char *nameValuePairs, unsigned long long durationMs);")
ffi.cdef("void logBatchTransaction(const char *type, const char *name, int count, int error, unsigned long long sum);")

# event apis.
ffi.cdef("void logEvent(const char *type, const char *name, const char *status, const char *nameValuePairs);")
ffi.cdef("void logError(const char *msg, const char *errStr);")
ffi.cdef("void logBatchEvent(const char *type, const char *name, int count, int error);")

# heartbeat apis.
ffi.cdef("CatHeartBeat *newHeartBeat(const char *type, const char *name);")

# metric apis.
ffi.cdef("void logMetricForCount(const char *name);")
ffi.cdef("void logMetricForDuration(const char *name, unsigned long long durationMs);")
ffi.cdef("CatMetricHelper *CatBuildMetricHelper(const char *name);")
ffi.cdef("void addMetricTag(CatMetricHelper *pHelper, const char *key, const char *val);")
ffi.cdef("void addMetricName(CatMetricHelper *pHelper, const char *name);")
ffi.cdef("void addMetricCount(CatMetricHelper *pHelper, int count);")
ffi.cdef("void addMetricDuration(CatMetricHelper *pHelper, int durationMs);")

# message id apis.
ffi.cdef("char *createMessageId();")
ffi.cdef("char *createRemoteServerMessageId(const char *domain);")
ffi.cdef("char *getThreadLocalMessageTreeId();")
ffi.cdef("char *getThreadLocalMessageTreeRootId();")
ffi.cdef("char *getThreadLocalMessageTreeParentId();")
ffi.cdef("void setThreadLocalMessageTreeId(char *messageId, char *rootMessageId, char *parentMessageId);")
