#!/usr/bin/env python
# -*- coding: utf-8 -*-

# Author: stdrickforce (Tengyuan Fan)
# Email: <stdrickforce@gmail.com> <fantengyuan@meituan.com>

import functools
import traceback

from .const import CAT_ERROR
from .message import NullMessage
from .container import sdk
from .event import log_exception

__all__ = ['Transaction', 'transaction', 'log_batch_transaction']


class Transaction(NullMessage):

    def __init__(self, mtype, mname):
        self._trans = sdk().new_transaction(mtype, mname)
        self._completed = False

    def complete(self):
        if not self._completed:
            sdk().complete_transaction(self._trans)
            self._completed = True
        return self

    def set_status(self, status):
        sdk().set_transaction_status(self._trans, status)
        return self

    def add_data(self, data):
        sdk().add_transaction_data_pair(self._trans, data)
        return self

    def __enter__(self):
        return self

    def __exit__(self, exc_type, exc_val, exc_tb):
        if exc_type is not None:
            trace = traceback.format_exception(exc_type, exc_val, exc_tb)
            log_exception(
                exc_val,
                "\n".join(trace),
            )
            self.set_status(CAT_ERROR)
        self.complete()


def transaction(mtype, mname):
    def wrapper(func):
        @functools.wraps(func)
        def wraps(*args, **kwargs):
            with Transaction(mtype, mname):
                return func(*args, **kwargs)
        return wraps
    return wrapper


def log_batch_transaction(mtype, mname, count, error, msum):
    sdk().log_batch_transaction(mtype, mname, count, error, msum)
