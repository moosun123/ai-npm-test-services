cmake_minimum_required(VERSION 2.8.2)

# Get ccat version from file.
file(READ version version)
string(REGEX REPLACE "\n$" "" version "${version}")
set(CCAT_VERSION ${version})
message(STATUS "CCAT Version: ${version}")

project(ccat-dp)

configure_file(${CMAKE_CURRENT_SOURCE_DIR}/src/version.h.in ${CMAKE_CURRENT_BINARY_DIR}/include/version.h)

message(STATUS "Current OS: " ${CMAKE_SYSTEM_NAME})

set(BUILD_SCRIPT 1)
set(BUILD_BENCHMARK 1)
set(USE_BINARY 1)

include(CheckCCompilerFlag)
macro(add_negative_c_flags flag)
    check_c_compiler_flag(-W${flag} HAS_FLAG)
    if (HAS_FLAG)
        set(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -Wno-${flag}")
    endif()
endmacro()

macro(use_c99)
    if (CMAKE_VERSION VERSION_LESS "3.1")
        if (CMAKE_C_COMPILER_ID STREQUAL "GNU")
            set(CMAKE_C_FLAGS "--std=gnu99 ${CMAKE_C_FLAGS}")
        endif ()
    else ()
        set(CMAKE_C_STANDARD 99)
    endif ()
endmacro(use_c99)

macro(add_c_flags def)
    set(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} ${def}")
endmacro()

use_c99()

add_definitions("-Wno-format-security")
if (APPLE)
    add_negative_c_flags("ignored-qualifiers")
    add_negative_c_flags("compare-distinct-pointer-types")
    add_negative_c_flags("incompatible-pointer-types")
    add_negative_c_flags("incompatible-pointer-types-discards-qualifiers")
else ()
    add_negative_c_flags("discarded-qualifiers")
    add_negative_c_flags("incompatible-pointer-types")
endif ()

include_directories(src)
include_directories(include)
include_directories(${CMAKE_CURRENT_BINARY_DIR}/include)

aux_source_directory(src SOURCE_FILES)
aux_source_directory(src/cat SOURCE_FILES)
aux_source_directory(src/message SOURCE_FILES)
aux_source_directory(src/lib SOURCE_FILES)

list(
    REMOVE_ITEM
    SOURCE_FILES
    src/lib/ae_epoll.cc
    src/lib/ae_select.cc
    src/lib/ae_kqueue.cc
    src/lib/ae_evport.cc
)

if (USE_BINARY)
    list(REMOVE_ITEM SOURCE_FILES src/cat/encoder_readable.c)
elseif ()
    list(REMOVE_ITEM SOURCE_FILES src/cat/encoder_binary.c)
endif ()

if (PROFILING)
    add_definitions("-DCAT_PROFILING")
endif ()

if (APPLE)
elseif (UNIX)
    link_libraries(m)
    link_libraries(rt)
    link_libraries(pthread)
endif ()

set(
    HEADER_FILES
    include/cat/client.h
    src/lib/cat_atomic.h
    src/lib/cat_condition.h
    src/lib/cat_mutex.h
    src/lib/cat_semaphore.h
    src/lib/cat_thread.h
    src/lib/headers.h
    src/lib/typedef.h
    src/cat/encoder.h
    src/cat/profiling.h
    src/message/message_imp.h
)

# shared lib (.so)
add_library(catclient-shared SHARED ${HEADER_FILES} ${SOURCE_FILES})
set_target_properties(catclient-shared PROPERTIES OUTPUT_NAME catclient)
install(TARGETS catclient-shared DESTINATION lib)

# static lib (.a)
add_library(catclient-static STATIC ${HEADER_FILES} ${SOURCE_FILES})
set_target_properties(catclient-static PROPERTIES
    OUTPUT_NAME catclient
    POSITION_INDEPENDENT_CODE ON
    )
install(TARGETS catclient-static DESTINATION lib)

if (BUILD_TEST)
    add_definitions(--std=c++11)

    set(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -fprofile-arcs -ftest-coverage -g -O0")
    set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -fprofile-arcs -ftest-coverage -g -O0")

    add_subdirectory(lib/googletest)
    aux_source_directory(tests/unit/cat UT_FILES)
    aux_source_directory(tests/unit/lib UT_FILES)

    add_executable(unittest ${SOURCE_FILES} ${UT_FILES} tests/unit/unittest.cpp)
    target_link_libraries(unittest catclient-static gtest)
endif ()

if (BUILD_SCRIPT)
    add_executable(test_client ${SOURCE_FILES} tests/scripts/test.c)
    add_executable(test_fork ${SOURCE_FILES} tests/scripts/test_fork.c)
    add_executable(tesincludet_multi_thread ${SOURCE_FILES} tests/scripts/test_multi_thread.c)
    add_executable(test_rpc ${SOURCE_FILES} tests/scripts/cat_rpc_test.c)
    add_executable(test_sample ${SOURCE_FILES} tests/scripts/cat_sample_test.c)
    add_executable(test_sds ${SOURCE_FILES} tests/scripts/cat_sds_test.c)
    add_executable(test_truncate ${SOURCE_FILES} tests/scripts/cat_truncate_test.c)
    add_executable(test_localtime ${SOURCE_FILES} tests/scripts/cat_localtime_test.c)
endif ()

if (BUILD_BENCHMARK)
    include_directories(benchmark)
    add_executable(benchmark ${SOURCE_FILES} benchmark/main.c)
endif ()
