//
// Created by Terence on 2018/8/1.
//

#include <gtest/gtest.h>
#include <random>

#include "lib/cat_static_queue.h"

TEST(StaticQueue, test) {
    CATStaticQueue *q = createCATStaticQueue(2);
    int r, *data;

    int a = 1;
    r = pushBackCATStaticQueue(q, &a);
    ASSERT_EQ(r, CATSTATICQUEUE_OK);

    int b = 2;
    r = pushFrontCATStaticQueue(q, &b);
    ASSERT_EQ(r, CATSTATICQUEUE_OK);

    ASSERT_EQ(pushBackCATStaticQueue(q, &a), CATSTATICQUEUE_ERR);
    ASSERT_EQ(pushFrontCATStaticQueue(q, &b), CATSTATICQUEUE_ERR);

    data = (int*) pryBackCATStaticQueue(q);
    ASSERT_EQ(*data, 1);
    data = (int*) pryFrontCATStaticQueue(q);
    ASSERT_EQ(*data, 2);

    ASSERT_EQ(isCATStaticQueueFull(q), 1);
    ASSERT_EQ(isCATStaticQueueEmpty(q), 0);
    ASSERT_EQ(getCATStaticQueueSize(q), 2);

    data = (int*) popBackCATStaticQueue(q);
    ASSERT_EQ(*data, 1);

    data = (int*) popFrontCATStaticQueue(q);
    ASSERT_EQ(*data, 2);

    data = (int*) popBackCATStaticQueue(q);
    ASSERT_EQ(data, nullptr);

    data = (int*) popFrontCATStaticQueue(q);
    ASSERT_EQ(data, nullptr);

    ASSERT_EQ(isCATStaticQueueFull(q), 0);
    ASSERT_EQ(isCATStaticQueueEmpty(q), 1);
    ASSERT_EQ(getCATStaticQueueSize(q), 0);

    pushBackCATStaticQueue(q, &a);
    ASSERT_EQ(isCATStaticQueueEmpty(q), 0);
    clearCATStaticQueue(q);
    ASSERT_EQ(isCATStaticQueueEmpty(q), 1);

    destroyCATStaticQueue(q);
}

TEST(StaticQueue, testFIFO) {
    CATStaticFIFOQueue *q = createCATStaticFIFOQueue(2);
    int r, *data;

    int a = 1;
    r = pushCATStaticFIFOQueue(q, &a);
    ASSERT_EQ(r, CATSTATICQUEUE_OK);

    int b = 2;
    r = pushCATStaticFIFOQueue(q, &b);
    ASSERT_EQ(r, CATSTATICQUEUE_OK);

    ASSERT_EQ(pushCATStaticFIFOQueue(q, &a), CATSTATICQUEUE_ERR);

    data = (int*) peekCATStaticFIFOQueue(q);
    ASSERT_EQ(*data, 1);

    ASSERT_EQ(isCATStaticFIFOQueueFull(q), 1);
    ASSERT_EQ(isCATStaticFIFOQueueEmpty(q), 0);
    ASSERT_EQ(getCATStaticFIFOQueueSize(q), 2);

    data = (int*) popCATStaticFIFOQueue(q);
    ASSERT_EQ(*data, 1);

    data = (int*) popCATStaticFIFOQueue(q);
    ASSERT_EQ(*data, 2);

    data = (int*) popCATStaticFIFOQueue(q);
    ASSERT_EQ(data, nullptr);

    ASSERT_EQ(isCATStaticFIFOQueueFull(q), 0);
    ASSERT_EQ(isCATStaticFIFOQueueEmpty(q), 1);
    ASSERT_EQ(getCATStaticFIFOQueueSize(q), 0);

    pushCATStaticFIFOQueue(q, &a);
    ASSERT_EQ(isCATStaticFIFOQueueEmpty(q), 0);
    clearCATStaticFIFOQueue(q);
    ASSERT_EQ(isCATStaticFIFOQueueEmpty(q), 1);

    destroyCATStaticFIFOQueue(q);
}

TEST(StaticQueue, testStack) {
    CATStaticStack *q = createCATStaticStack(2);
    int r, *data;

    int a = 1;
    r = pushCATStaticStack(q, &a);
    ASSERT_EQ(r, CATSTATICQUEUE_OK);

    int b = 2;
    r = pushCATStaticStack(q, &b);
    ASSERT_EQ(r, CATSTATICQUEUE_OK);

    ASSERT_EQ(pushCATStaticStack(q, &a), CATSTATICQUEUE_ERR);

    data = (int*) peekCATStaticStack(q);
    ASSERT_EQ(*data, 2);

    ASSERT_EQ(isCATStaticStackFull(q), 1);
    ASSERT_EQ(isCATStaticStackEmpty(q), 0);
    ASSERT_EQ(getCATStaticStackSize(q), 2);

    data = (int*) popCATStaticStack(q);
    ASSERT_EQ(*data, 2);

    data = (int*) popCATStaticStack(q);
    ASSERT_EQ(*data, 1);

    data = (int*) popCATStaticStack(q);
    ASSERT_EQ(data, nullptr);

    ASSERT_EQ(isCATStaticStackFull(q), 0);
    ASSERT_EQ(isCATStaticStackEmpty(q), 1);
    ASSERT_EQ(getCATStaticStackSize(q), 0);

    pushCATStaticStack(q, &a);
    ASSERT_EQ(isCATStaticStackEmpty(q), 0);
    clearCATStaticStack(q);
    ASSERT_EQ(isCATStaticStackEmpty(q), 1);

    destroyCATStaticStack(q);
}
