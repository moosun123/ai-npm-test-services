//
// Created by zhengchao14 on 2020/3/11.
//

#include "gtest/gtest.h"
#include "lib/cat_stack.h"

TEST(DynamicStackTests, basicTest) {

    CatStack_T stack = NULL;
    int result = newCatStack(4, &stack);
    ASSERT_EQ(result, CAT_STACK_OK);

    int *x = new int(4);
    catStackPush(stack, x);
    ASSERT_EQ(1, catStackSize(stack));

    catStackDestroy(&stack);
    ASSERT_EQ(stack, nullptr);
}

TEST(DynamicStackTests, expansionTest) {

    CatStack_T stack = NULL;
    int result = newCatStack(4, &stack);
    ASSERT_EQ(result, CAT_STACK_OK);

    for (int i = 0; i < 10; ++i) {
        int *x = new int(4);
        catStackPush(stack, x);
    }
    ASSERT_EQ(10, catStackSize(stack));

    catStackDestroy(&stack);
    ASSERT_EQ(stack, nullptr);
}

TEST(DynamicStackTests, getByIndex) {

    CatStack_T stack = NULL;
    int result = newCatStack(4, &stack);
    ASSERT_EQ(result, CAT_STACK_OK);

    for (int i = 0; i < 10; ++i) {
        int *x = new int(i);
        catStackPush(stack, x);
    }
    ASSERT_EQ(10, catStackSize(stack));

    int *y = new int(0);

    result = catStackPeek(stack, (void**)&y);
    ASSERT_EQ(*y, 9);

    int status = catStackGetByIndex(stack, 0, (void**)&y);
    ASSERT_EQ(status, CAT_STACK_OK);
    ASSERT_EQ(*y, 9);

    status = catStackGetByIndex(stack, 4, (void**)&y);
    ASSERT_EQ(status, CAT_STACK_OK);
    ASSERT_EQ(*y, 5);

    catStackDestroy(&stack);
    ASSERT_EQ(stack, nullptr);
}

TEST(DynamicStackTests, popAndPeek) {
    CatStack_T stack = NULL;
    int result = newCatStack(4, &stack);
    ASSERT_EQ(result, CAT_STACK_OK);

    for (int i = 0; i < 10; ++i) {
        int *x = new int(i);
        catStackPush(stack, x);
    }
    ASSERT_EQ(10, catStackSize(stack));

    int *top = new int(0);
    int *x = new int(0);
    result = catStackPeek(stack, (void**)&top);
    ASSERT_EQ(*top, 9);

    result = catStackPop(stack, (void**)&x);
    ASSERT_EQ(*x, 9);

    result = catStackPeek(stack, (void**)&top);
    ASSERT_EQ(*top, 8);
}

TEST(DynamicStackTests, negativeTest) {
    CatStack_T stack = nullptr;
    int *x = new int(3);
    int status = catStackPush(stack, x);
    ASSERT_EQ(status, CAT_STACK_ERR);

    status = isCatStackEmpty(stack);
    ASSERT_EQ(status, CAT_STACK_ERR);

    status = catStackPop(stack, (void**)&x);
    ASSERT_EQ(status, CAT_STACK_ERR);

    status = catStackPeek(stack, (void**)&x);
    ASSERT_EQ(status, CAT_STACK_ERR);

}