//
// Created by Terence on 2018/9/14.
//

#include <gtest/gtest.h>

#include <cat/client.h>
#include <lib/cat_time_util.h>

#define TEST_TRANSACTION "test-transaction"

TEST(Transaction, single) {
    CatTransaction* t;
    t = newTransaction(TEST_TRANSACTION, "single");
    t->setComplete((CatMessage*) t);

    t = newTransaction(TEST_TRANSACTION, "single");
    t->setStatus((CatMessage*) t, CAT_FAIL);
    t->setComplete((CatMessage*) t);

    logTransaction(TEST_TRANSACTION, "single-log-success", CAT_SUCCESS, "success", 100);
    logTransaction(TEST_TRANSACTION, "single-log-fail", CAT_FAIL, "fail", 100);
}

TEST(Transaction, nested) {
    CatTransaction *t, *t2;
    t = newTransaction(TEST_TRANSACTION, "nested-1");
    t2 = newTransaction(TEST_TRANSACTION, "nested-2");
    t2->setComplete((CatMessage*) t2);
    t->setComplete((CatMessage*) t);
}

TEST(Transaction, batch) {
    logBatchTransaction(TEST_TRANSACTION, "batch", 25, 10, 500);
}

TEST(Transaction, helper) {
    CatTransaction *t = newTransaction(TEST_TRANSACTION, "helper");
    setTransactionStatus(t, CAT_FAIL);
    addTransactionDataPair(t, "helper");
    completeTransaction(t);
}

TEST(Transaction, duration) {
    CatTransaction *t = newTransactionWithDuration(TEST_TRANSACTION, "duration", 3000);
    completeTransaction(t);
}

TEST(Transaction, completed) {
    newCompletedTransactionWithDuration(TEST_TRANSACTION, "completed", 45000);
}

TEST(Transaction, timestamp) {
    CatTransaction *t = newTransaction(TEST_TRANSACTION, "timestamp");
    setTransactionTimestamp(t, GetTime64() - 20000);
    completeTransaction(t);
}

TEST(Transaction,TESTTRUCATE){
    CatTransaction *trans = newTransaction("cat-truncate-test", "cat-truncate-test");

    int j = 0;
    for (j = 0; j < 1500; ++j) {
        if (j == 100) {
            Sleep(2000);
        }

        if (j == 1400) {
            Sleep(5000);
        }

        logEvent("event-test", "test", CAT_SUCCESS, NULL);
    }

    trans->setDurationInMillis(trans, 5000);
    trans->setStatus((CatMessage *) trans, CAT_SUCCESS);
    trans->setComplete((CatMessage *) trans);

    Sleep(100000);
}

