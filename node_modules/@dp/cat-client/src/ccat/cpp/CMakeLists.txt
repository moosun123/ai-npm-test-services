cmake_minimum_required(VERSION 2.8)

project(cppcat-dp)

# Get ccat version from file.
file(READ version version)
set(CCAT_VERSION ${version})
string(REGEX REPLACE "\n$" "" CCAT_VERSION "${CCAT_VERSION}")
message(CCAT_VERSION: ${version})

configure_file(${CMAKE_CURRENT_SOURCE_DIR}/src/version.h.in ${CMAKE_CURRENT_BINARY_DIR}/include/version.h)

message(STATUS "Current OS: " ${CMAKE_SYSTEM_NAME})

# set(BUILD_TEST 1)
set(BUILD_SCRIPT 1)
set(USE_BINARY 1)

macro(use_cxx11)
    include(CheckCXXCompilerFlag)
    check_cxx_compiler_flag("-std=c++11" COMPILER_SUPPORTS_CXX11)
    check_cxx_compiler_flag("-std=c++0x" COMPILER_SUPPORTS_CXX0X)
    if (COMPILER_SUPPORTS_CXX11)
        set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -std=c++11")
    elseif (COMPILER_SUPPORTS_CXX0X)
        set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -std=c++0x")
    else ()
        message(STATUS "The compiler ${CMAKE_CXX_COMPILER} has no C++11 support. Please use a different C++ compiler.")
    endif ()
endmacro(use_cxx11)

macro(add_cxx_flags def)
    set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} ${def}")
endmacro()

use_cxx11()

add_definitions("-Wno-format-security")

include_directories(src)
include_directories(include)
include_directories(${CMAKE_CURRENT_BINARY_DIR}/include)

aux_source_directory(src SOURCE_FILES)
aux_source_directory(src/cat SOURCE_FILES)
aux_source_directory(src/cppcat CPP_SOURCE_FILES)
aux_source_directory(src/lib SOURCE_FILES)
aux_source_directory(src/message SOURCE_FILES)

list(
    REMOVE_ITEM
    SOURCE_FILES
    src/lib/ae_epoll.cc
    src/lib/ae_select.cc
    src/lib/ae_kqueue.cc
    src/lib/ae_evport.cc
)

if (USE_BINARY)
    list(REMOVE_ITEM SOURCE_FILES src/cat/encoder_readable.c)
elseif ()
    list(REMOVE_ITEM SOURCE_FILES src/cat/encoder_binary.c)
endif ()

if (APPLE)
elseif (UNIX)
    link_libraries(m)
    link_libraries(rt)
    link_libraries(pthread)
endif ()

set(
    HEADER_FILES
    src/lib/cat_atomic.h
    src/lib/cat_condition.h
    src/lib/cat_mutex.h
    src/lib/cat_semaphore.h
    src/lib/cat_thread.h
    src/lib/headers.h
    src/lib/typedef.h
    src/cat/encoder.h
    src/message/message_imp.h
    src/message/transaction_imp.h
)

set(HEADER_FILES include/cppcat/client.hpp ${HEADER_FILES})
set(SOURCE_FILES ${SOURCE_FILES} ${CPP_SOURCE_FILES})
add_library(catclient-shared SHARED ${HEADER_FILES} ${SOURCE_FILES})
set_target_properties(catclient-shared PROPERTIES OUTPUT_NAME catclient)
add_library(catclient-static STATIC ${HEADER_FILES} ${SOURCE_FILES})
set_target_properties(catclient-static PROPERTIES
    OUTPUT_NAME catclient
    POSITION_INDEPENDENT_CODE ON
    )
install(TARGETS catclient-shared DESTINATION lib)
install(TARGETS catclient-static DESTINATION lib)

if (BUILD_TEST)
    link_libraries(gtest)
    file(
        COPY
        tests/client.xml
        tests/client.json
        tests/appenv
        DESTINATION cat
    )
    aux_source_directory(tests/unit/cat UNITTEST_FILES)
    aux_source_directory(tests/unit/lib UNITTEST_FILES)
    add_executable(unittest tests/unittest.cpp ${UNITTEST_FILES} ${SOURCE_FILES})
endif ()

if (BUILD_SCRIPT)
    add_executable(test_client ${SOURCE_FILES} ${CPP_SOURCE_FILES} tests/scripts/cat_client_test.cpp)
endif ()
