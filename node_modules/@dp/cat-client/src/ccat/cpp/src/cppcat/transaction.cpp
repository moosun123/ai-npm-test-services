//
// Created by Terence on 2018/8/2.
//

#include <string>

#include "cppcat/client.hpp"

#include "cat/client.h"

#include "message/transaction_imp.h"

#define T(t) ((CatTransaction*)(t))
#define M(m) ((CatMessage*)(m))

namespace cat {

    using namespace std;

    Transaction::Transaction(const string& type, const string& name) {
        trans = newTransaction(type.c_str(), name.c_str());
    }

    void Transaction::Complete() {
        T(trans)->setComplete(M(trans));
    }

    unsigned long Transaction::GetDurationMs() {
        CatTransactionInner* inner = getInnerTrans(trans);
        return inner->m_durationInMicro / 1000;
    }

    string Transaction::GetType() {
        CatMessageInner* inner = getInnerMsg(trans);
        return string(inner->m_type);
    }

    string Transaction::GetName() {
        CatMessageInner* inner = getInnerMsg(trans);
        return string(inner->m_name);
    }

    string Transaction::GetStatus() {
        CatMessageInner* inner = getInnerMsg(trans);
        return string(inner->m_status);
    }

    void Transaction::SetStatus(const string& status) {
        T(trans)->setStatus(M(trans), status.c_str());
    }

    void Transaction::SetDurationInMillis(unsigned long ms) {
        T(trans)->setDurationInMillis(T(trans), ms);
    }

    void Transaction::SetData(const string& data) {
        T(trans)->addDataPair(M(trans), data.c_str());
    }

    void Transaction::AddData(const string& key, const string& val) {
        T(trans)->addData(M(trans), key.c_str(), val.c_str());
    }
}

