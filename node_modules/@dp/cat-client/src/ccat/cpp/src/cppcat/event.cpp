//
// Created by Terence on 2018/8/2.
//

#include <string>

#include "cppcat/client.hpp"

#include "cat/client.h"

#include "message/message_imp.h"

#define M(m) ((CatMessage*)(m))

namespace cat {

    using namespace std;

    Event::Event(const string& type, const string& name) {
        event = newEvent(type.c_str(), name.c_str());
    }

    void Event::Complete() {
        M(event)->setComplete(M(event));
    }

    string Event::GetType() {
        CatMessageInner* inner = getInnerMsg(event);
        return string(inner->m_type);
    }

    string Event::GetName() {
        CatMessageInner* inner = getInnerMsg(event);
        return string(inner->m_name);
    }

    string Event::GetStatus() {
        CatMessageInner* inner = getInnerMsg(event);
        return NULL != inner->m_status ? string(inner->m_status) : string();
    }

    void Event::SetStatus(const string& status) {
        M(event)->setStatus(M(event), status.c_str());
    }

    void Event::SetData(const string& data) {
        M(event)->addDataPair(M(event), data.c_str());
    }

    void Event::AddData(const string& key, const string& val) {
        M(event)->addData(M(event), key.c_str(), val.c_str());
    }

    void logEvent(const string& type, const string& name, const string& status, const string& data) {
        ::logEvent(type.c_str(), name.c_str(), status.c_str(), data.c_str());
    }
}
