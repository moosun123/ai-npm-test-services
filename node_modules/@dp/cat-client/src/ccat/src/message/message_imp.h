#ifndef CAT_CLIENT_C_MESSAGE_IMP_H
#define CAT_CLIENT_C_MESSAGE_IMP_H

#include <string.h>
#include <stdlib.h>
#include <stdint.h>

#include "lib/cat_sds.h"
#include "lib/cat_stack.h"

#include "cat/event.h"
#include "cat/heartbeat.h"
#include "cat/metric.h"
#include "cat/transaction.h"

#define CatMessageType_Trans 'T'
#define CatMessageType_Event 'E'
#define CatMessageType_HeartBeat 'H'
#define CatMessageType_Metric 'M'

typedef void (* flusher)(CatMessage*);

typedef struct _CatMessageInner {

    union {
        char msgType;
        u_int32_t unused;
    } h;

    catsds type;
    catsds name;
    catsds status;
    catsds data;

    unsigned long long timestampInMillis; // created timestamp in milliseconds.

    int isCompleted;
    int ignoreSampleRatio;

    flusher flush;

} CatMessageInner;

typedef struct _CatTransactionInner {
    CatStack_T children;
    unsigned long long durationStartInNano;     // nanoseconds
    unsigned long long durationInMicro;         // microseconds

    // TransactionInner should end up with a MessageInner
    CatMessageInner inner;
} CatTransactionInner;

typedef struct _CatNullMessage {
    CatMessageInner messageInner;
    CatMessage methods;
} CatNullMessage;

typedef struct _CatNullTransaction {
    CatTransactionInner transactionInner;
    CatTransaction methods;
} CatNullTransaction;

/**
 * memory map                                  pointer
 *                                                |
 * trans: [ CatTransactionInner (CatMessageInner) | (CatMessage) CatTransaction ]
 * other:                      [ CatMessageInner  |  CatMessage ]
 */
#define getInnerMsg(pMsg) ((CatMessageInner*)(((char*)(pMsg)) - sizeof(CatMessageInner)))

#define getInnerTrans(pMsg) ((CatTransactionInner*)(((char*)(pMsg)) - sizeof(CatTransactionInner)))

void* clearCatMessage(CatMessage* message);

void* clearCatTransaction(CatMessage* message);

void initCatMessage(CatMessage* pMsg, char msgType, const char* type, const char* name, flusher flush);

CatHeartBeat* createHeartBeat(const char* type, const char* name, flusher flush);

CatEvent* createEvent(const char* type, const char* name, flusher flush);

CatMetric* createMetric(const char* type, const char* name, flusher flush);

CatTransaction* createCatTransaction(const char* type, const char* name, flusher flush);

CatTransaction* copyCatTransaction(CatTransaction* pSrcTrans);

int isCatTransaction(CatMessage* message);

int isCatEvent(CatMessage* message);

int isCatMetric(CatMessage* message);

int isCatHeartBeat(CatMessage* message);

static inline void deleteCatMessage(CatMessage* message) {
    void* p;
    if (isCatTransaction(message)) {
        p = clearCatTransaction(message);
    } else {
        p = clearCatMessage(message);
    }
    free(p);
}

static inline int isCatMessageComplete(CatMessage* message) {
    CatMessageInner* pInner = getInnerMsg(message);
    return pInner->isCompleted;
}

static inline unsigned long long getCatMessageTimeStamp(CatMessage* message) {
    CatMessageInner* pInner = getInnerMsg(message);
    return pInner->timestampInMillis;
}

static inline catsds getCatMessageType(CatMessage* message) {
    CatMessageInner* pInner = getInnerMsg(message);
    return pInner->type;
}

static inline int checkCatMessageSuccess(CatMessage* message) {
    CatMessageInner* pInner = getInnerMsg(message);
    if (pInner->status == NULL || catsdslen(pInner->status) != 1 || pInner->status[0] != CAT_SUCCESS_CHAR) {
        return 0;
    }
    return 1;
}

static inline void setMessageComplete(CatMessage* message) {
    CatMessageInner* inner = getInnerMsg(message);
    inner->isCompleted = 1;
    if (NULL != inner->flush) {
        inner->flush(message);
    }
}

unsigned long long getCatTransactionDurationUs(CatTransaction* trans);

static void inline setCatTransactionDurationUs(CatTransaction* trans, unsigned long long durationUs) {
    CatTransactionInner* pInner = getInnerTrans(trans);
    pInner->durationInMicro = durationUs;
}

CatStack_T getCatTransactionChildren(CatTransaction* pSrcTrans);

static inline CatMessage* createMessage(char msgType, const char* type, const char* name, flusher flush) {
    CatMessageInner* pInner = (CatMessageInner*)malloc(sizeof(CatHeartBeat) + sizeof(CatMessageInner));
    if (pInner == NULL) {
        return NULL;
    }
    CatMessage* message = (CatMessage*) ((char*) pInner + sizeof(CatMessageInner));

    initCatMessage(message, msgType, type, name, flush);
    return message;
}

static void emptyCatMessageFlusher(CatMessage* message) {}

#endif//CAT_CLIENT_C_MESSAGE_IMP_H