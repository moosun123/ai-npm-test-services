/* SDSLib, A C dynamic strings library
 *
 * Copyright (c) 2006-2010, Salvatore Sanfilippo <antirez at gmail dot com>
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 *   * Redistributions of source code must retain the above copyright notice,
 *     this list of conditions and the following disclaimer.
 *   * Redistributions in binary form must reproduce the above copyright
 *     notice, this list of conditions and the following disclaimer in the
 *     documentation and/or other materials provided with the distribution.
 *   * Neither the name of Redis nor the names of its contributors may be used
 *     to endorse or promote products derived from this software without
 *     specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 */

#ifndef __SDS_H
#define __SDS_H

#define SDS_MAX_PREALLOC (1024*1024)

#include <sys/types.h>
#include <stdarg.h>

#ifdef WIN32
#define inline __inline
#endif

typedef char *catsds;

typedef struct _sdshdr {
    unsigned int len;
    unsigned int free;
    char buf[];
} sdshdr;

static inline size_t catsdslen(const catsds s) {
    struct _sdshdr *sh = (struct _sdshdr *) (s - (sizeof(struct _sdshdr)));
    return sh->len;
}

static inline size_t catsdsavail(const catsds s) {
    struct _sdshdr *sh = (struct _sdshdr *) (s - (sizeof(struct _sdshdr)));
    return sh->free;
}

catsds catsdsnewlen(const void *init, size_t initlen);

catsds catsdsnewEmpty(size_t preAlloclen);

catsds catsdsnew(const char *init);

catsds catsdsempty(void);

size_t catsdslen(const catsds s);

catsds catsdsdup(const catsds s);

void catsdsfree(catsds s);

size_t catsdsavail(const catsds s);

catsds catsdsgrowzero(catsds s, size_t len);

catsds catsdscatlen(catsds s, const void *t, size_t len);

catsds catsdscat(catsds s, const char *t);

catsds catsdscatchar(catsds s, char c);

catsds catsdscatsds(catsds s, const catsds t);

catsds catsdscpylen(catsds s, const char *t, size_t len);

catsds catsdscpy(catsds s, const char *t);

catsds catsdscatvprintf(catsds s, const char *fmt, va_list ap);

#ifdef __GNUC__

catsds catsdscatprintf(catsds s, const char *fmt, ...)
__attribute__((format(printf, 2, 3)));

#else
catsds sdscatprintf(catsds s, const char *fmt, ...);
#endif

catsds catsdscatfmt(catsds s, char const *fmt, ...);

catsds catsdstrim(catsds s, const char *cset);

void catsdsrange(catsds s, int start, int end);

void catsdsupdatelen(catsds s);

void catsdsclear(catsds s);

int catsdscmp(const catsds s1, const catsds s2);

catsds *catsdssplitlen(const char *s, int len, const char *sep, int seplen, int *count);

void catsdsfreesplitres(catsds *tokens, int count);

void catsdstolower(catsds s);

void catsdstoupper(catsds s);

catsds catsdsfromlonglong(long long value);

catsds catsdscatrepr(catsds s, const char *p, size_t len);

catsds *catsdssplitargs(const char *line, int *argc);

catsds catsdsmapchars(catsds s, const char *from, const char *to, size_t setlen);

catsds catsdsjoin(char **argv, int argc, char *sep);

/* Low level functions exposed to the user API */
catsds catsdsMakeRoomFor(catsds s, size_t addlen);

void catsdsIncrLen(catsds s, int incr);

catsds catsdsRemoveFreeSpace(catsds s);

size_t catsdsAllocSize(catsds s);

#endif
