
#ifndef CAT_CONCURRENT_HASH_MAP_h__
#define CAT_CONCURRENT_HASH_MAP_h__

#include "cat_dict.h"
#include "cat_atomic.h"
#include "cat_mutex.h"

// simple implement of concurrentHashMap

#define CAT_CCHASHMAP_OK 0
#define CAT_CCHASHMAP_ERR 1

#define CAT_CCHASHMAP_MAXSLOT 1024

// hash item
extern catDictType catDictTypeHeapStringCopyKey;
extern catDictType catDictTypeHeapStrings;
extern catDictType catDictTypeHeapStringCopyKeyFreeVal;
typedef struct CAT_CCHashSlot {
    catDict *m_dict;
    CatCriticalSection m_lock;
} CatCCHashSlot;

// hash map
typedef struct CAT_CCHashMap {
    int m_hashSlotCount;
    void *m_privateData;
    catDictType m_type;
    CAT_ATOMICLONG m_count;
    CatCCHashSlot m_hashSlot[];
} CatCCHashMap;


/** Defines Val operate function for CatCCHashMap find. */
typedef void(*CatCCHashMapValOptFun)(CatCCHashMap *pCCHM, void *key, volatile void **ppVal, void *pParam);


/** Defines Val create function for CatCCHashMap find. */
typedef void *(*CatCCHashMapCreateValFun)(CatCCHashMap *pCCHM, void *key, void *pParam);

/**********************************************************************************************//**
 * Creates Concurrent hash map.
 *
 * @param [in]  type        If non-null, the type.
 * @param   slotCount           Number of slots.
 * @param [in]  privDataPtr If non-null, the private data pointer.
 *
 * @return  null if it fails, else the new Concurrent hash map.
 **************************************************************************************************/
CatCCHashMap *catCreateCCHashMap(catDictType *type, int slotCount, void *privDataPtr);

/**********************************************************************************************//**
 * Find the corresponding value in CatCCHashMap with key, return null if it fails, else the corresponding value
 *
 * @param [in]  pCCHM   If non-null, the cchm.
 * @param [in]  key     If non-null, the key.
 *
 * @return  null if it fails, else the corresponding value 
 **************************************************************************************************/
void *catFindCCHashMap(CatCCHashMap *pCCHM, void *key);

/**********************************************************************************************//**
 * Find the corresponding value in CatCCHashMap with key, return defaultVal if it dos'nt contain this key,
 * else the corresponding value 
 *
 * @param [in]  pCCHM       If non-null, the cchm.
 * @param [in]  key         If non-null, the key.
 * @param [in]  defaultVal  If non-null, the default value.
 *
 * @return  defaultVal if there is no this key, else the corresponding value 
 **************************************************************************************************/
void *catFindCCHashMapDefault(CatCCHashMap *pCCHM, void *key, void *defaultVal);

/**********************************************************************************************//**
 * Find the corresponding value in CatCCHashMap with key.
 * If it dos'nt contain this key, then create and insert the key-val pair with val:createVal.
 * Only if pCCHM is invalid, the function will always return the corresponding value.
 *
 * @param [in]  pCCHM       If non-null, the cchm.
 * @param [in]  key         If non-null, the key.
 * @param [in]  createVal   If non-null, the create value.
 *
 * @return  null if it fails, else the found Cc hash map create.
 **************************************************************************************************/
void *catFindCCHashMapCreate(CatCCHashMap *pCCHM, void *key, void *createVal);

/**********************************************************************************************//**
 * Find the corresponding value in CatCCHashMap with key. If it dos'nt contain this key, then
 * create and insert the key-val pair by calling Fun:createFun. Only if pCCHM is invalid, the function
 * will always return the corresponding value.
 *
 * @param [in]  pCCHM           If non-null, the cchm.
 * @param [in]  key             If non-null, the key.
 * @param [in]  createFun       If non-null, the create value.
 * @param [in]  createParam If non-null, the create parameter.
 *
 * @return  null if it fails, else the found Cc hash map create.
 **************************************************************************************************/
void *catFindCCHashMapCreateByFun(CatCCHashMap *pCCHM, void *key, CatCCHashMapCreateValFun createFun, void *createParam);


/**********************************************************************************************//**
 * Find the corresponding value in CatCCHashMap with key, return defaultVal if it dos'nt contain this key,
 * else the corresponding value.
 * If the key is found, then call the optFun with param: pCCHM, key, &val, param.
 *
 * @param [in]  pCCHM   If non-null, the cchm.
 * @param [in]  key     If non-null, the key.
 * @param   optFun          The option fun.
 *
 * @return  null if it fails, else the found Cc hash map and operate.
 **************************************************************************************************/
void *catFindCCHashMapAndOperate(CatCCHashMap *pCCHM, void *key, CatCCHashMapValOptFun optFun, void *param);

/**********************************************************************************************//**
 * Find the corresponding value in CatCCHashMap with key. If it dos'nt contain this key, then
 * create and insert the key-val pair by calling Fun:createFun. 
 * Then call the optFun with param: pCCHM, key, &val, param.
 * Only if pCCHM is invalid, the function will always return the corresponding value.
 *
 * @param [in]  pCCHM           If non-null, the cchm.
 * @param [in]  key             If non-null, the key.
 * @param [in]  createFun       If non-null, the create value.
 * @param [in]  createParam     If non-null, the create parameter.
 * @param   optFun              The option fun.
 * @param [in,out]  optParam    If non-null, the option parameter.
 *
 * @return  null if it fails, else the found Cc hash map create.
 **************************************************************************************************/
void *
catFindCCHashMapCreateByFunAndOperate(CatCCHashMap *pCCHM, void *key, CatCCHashMapCreateValFun createFun, void *createParam,
                                      CatCCHashMapValOptFun optFun, void *optParam);

/**********************************************************************************************//**
 * put the key-val pair in CatCCHashMap, if the key exist, return fail
 *
 * @param [in]  pCCHM   If non-null, the cchm.
 * @param [in]  key     If non-null, the key.
 * @param [in]  pVal    If non-null, the value.
 *
 * @return  An int.
 **************************************************************************************************/
int catPutCCHashMap(CatCCHashMap *pCCHM, void *key, void *pVal);

/**********************************************************************************************//**
 * replace the key-val pair in CatCCHashMap, only if pCCHM is invalid, the function will always return success
 *
 * @param [in]  pCCHM   If non-null, the cchm.
 * @param [in]  key     If non-null, the key.
 * @param [in]  pVal    If non-null, the value.
 *
 * @return  An int.
 **************************************************************************************************/
int catReplaceCCHashMap(CatCCHashMap *pCCHM, void *key, void *pVal);

/**********************************************************************************************//**
 * Removes the key in CatCCHashMap.
 *
 * @param [in]  pCCHM   If non-null, the cchm.
 * @param [in]  key     If non-null, the key.
 *
 * @return  An int.
 **************************************************************************************************/
int catRemoveCCHashMap(CatCCHashMap *pCCHM, void *key);

/**********************************************************************************************//**
 * Clears the Cc hash map described by pCCHM.
 *
 * @param [in,out]  pCCHM   If non-null, the cchm.
 **************************************************************************************************/
void catClearCCHashMap(CatCCHashMap *pCCHM);

/**********************************************************************************************//**
 * Move all catDict in CatCCHashMap to a catDict pointer array, the catDict * is NULL if there is no more catDict
 * User need to call catFreeDictArray to free the array
 *
 * @param [in,out]  pCCHM   If non-null, the cchm.
 *
 * @return  null if it fails, else a catDict**.
 **************************************************************************************************/
catDict **catMoveCCHashMap(CatCCHashMap *pCCHM);

/**********************************************************************************************//**
 * Free catDict pointer array.
 *
 * @param [in,out]  ppDict  If non-null, the dictionary.
 **************************************************************************************************/
void catFreeDictArray(catDict **ppDict);

void catOptEveryCCHashMapItem(CatCCHashMap *pCCHM, CatCCHashMapValOptFun optFun, void *optParam);

void catDestroyCCHashMap(CatCCHashMap *pCCHM);


#endif//CAT_CONCURRENT_HASH_MAP_h__
