/*
  Copyright (c) 2009 Dave Gamble
 
  Permission is hereby granted, free of charge, to any person obtaining a copy
  of this software and associated documentation files (the "Software"), to deal
  in the Software without restriction, including without limitation the rights
  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
  copies of the Software, and to permit persons to whom the Software is
  furnished to do so, subject to the following conditions:
 
  The above copyright notice and this permission notice shall be included in
  all copies or substantial portions of the Software.
 
  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
  THE SOFTWARE.
*/

#ifndef cat_cJSON__h
#define cat_cJSON__h

#ifdef __cplusplus
extern "C"
{
#endif

#include <stdlib.h>
#include <stddef.h>

/* catCJSON Types: */
#define cat_cJSON_False 0
#define cat_cJSON_True 1
#define cat_cJSON_NULL 2
#define cat_cJSON_Number 3
#define cat_cJSON_String 4
#define cat_cJSON_Array 5
#define cat_cJSON_Object 6
	
#define cat_cJSON_IsReference 256
#define cat_cJSON_StringIsConst 512

/* The catCJSON structure: */
typedef struct catCJSON {
	struct catCJSON *next,*prev;	/* next/prev allow you to walk array/object chains. Alternatively, use GetArraySize/GetArrayItem/GetObjectItem */
	struct catCJSON *child;		/* An array or object item will have a child pointer pointing to a chain of the items in the array/object. */

	int type;					/* The type of the item, as above. */

	char *valuestring;			/* The item's string, if type==cat_cJSON_String */
	int valueint;				/* The item's number, if type==cat_cJSON_Number */
	double valuedouble;			/* The item's number, if type==cat_cJSON_Number */

	char *string;				/* The item's name string, if this item is the child of, or is in the list of subitems of an object. */
} catCJSON;

typedef struct catCJSON_Hooks {
      void *(*malloc_fn)(size_t sz);
      void (*free_fn)(void *ptr);
} catCJSON_Hooks;

/* Supply malloc, realloc and free functions to catCJSON */
extern void catCJSON_InitHooks(catCJSON_Hooks* hooks);


/* Supply a block of JSON, and this returns a catCJSON object you can interrogate. Call catCJSON_Delete when finished. */
extern catCJSON *catCJSON_Parse(const char *value);
/* Render a catCJSON entity to text for transfer/storage. Free the char* when finished. */
extern char  *catCJSON_Print(catCJSON *item);
/* Render a catCJSON entity to text for transfer/storage without any formatting. Free the char* when finished. */
extern char  *catCJSON_PrintUnformatted(catCJSON *item);
/* Render a catCJSON entity to text using a buffered strategy. prebuffer is a guess at the final size. guessing well reduces reallocation. fmt=0 gives unformatted, =1 gives formatted */
extern char *catCJSON_PrintBuffered(catCJSON *item, int prebuffer, int fmt);
/* Delete a catCJSON entity and all subentities. */
extern void   catCJSON_Delete(catCJSON *c);

/* Returns the number of items in an array (or object). */
extern int	  catCJSON_GetArraySize(catCJSON *array);
/* Retrieve item number "item" from array "array". Returns NULL if unsuccessful. */
extern catCJSON *catCJSON_GetArrayItem(catCJSON *array, int item);
/* Get item "string" from object. Case insensitive. */
extern catCJSON *catCJSON_GetObjectItem(catCJSON *object, const char *string);

/* For analysing failed parses. This returns a pointer to the parse error. You'll probably need to look a few chars back to make sense of it. Defined when cJSON_Parse() returns 0. 0 when catCJSON_Parse() succeeds. */
extern const char *catCJSON_GetErrorPtr(void);
	
/* These calls create a catCJSON item of the appropriate type. */
extern catCJSON *catCJSON_CreateNull(void);
extern catCJSON *catCJSON_CreateTrue(void);
extern catCJSON *catCJSON_CreateFalse(void);
extern catCJSON *catCJSON_CreateBool(int b);
extern catCJSON *catCJSON_CreateNumber(double num);
extern catCJSON *catCJSON_CreateString(const char *string);
extern catCJSON *catCJSON_CreateArray(void);
extern catCJSON *catCJSON_CreateObject(void);

/* These utilities create an Array of count items. */
extern catCJSON *catCJSON_CreateIntArray(const int *numbers, int count);
extern catCJSON *catCJSON_CreateFloatArray(const float *numbers, int count);
extern catCJSON *catCJSON_CreateDoubleArray(const double *numbers, int count);
extern catCJSON *catCJSON_CreateStringArray(const char **strings, int count);

/* Append item to the specified array/object. */
extern void catCJSON_AddItemToArray(catCJSON *array, catCJSON *item);
extern void	catCJSON_AddItemToObject(catCJSON *object, const char *string, catCJSON *item);
extern void	catCJSON_AddItemToObjectCS(catCJSON *object, const char *string, catCJSON *item);	/* Use this when string is definitely const (i.e. a literal, or as good as), and will definitely survive the catCJSON object */
/* Append reference to item to the specified array/object. Use this when you want to add an existing catCJSON to a new catCJSON, but don't want to corrupt your existing catCJSON. */
extern void catCJSON_AddItemReferenceToArray(catCJSON *array, catCJSON *item);
extern void	catCJSON_AddItemReferenceToObject(catCJSON *object, const char *string, catCJSON *item);

/* Remove/Detatch items from Arrays/Objects. */
extern catCJSON *catCJSON_DetachItemFromArray(catCJSON *array, int which);
extern void   catCJSON_DeleteItemFromArray(catCJSON *array, int which);
extern catCJSON *catCJSON_DetachItemFromObject(catCJSON *object, const char *string);
extern void   catCJSON_DeleteItemFromObject(catCJSON *object, const char *string);
	
/* Update array items. */
extern void catCJSON_InsertItemInArray(catCJSON *array, int which, catCJSON *newitem);	/* Shifts pre-existing items to the right. */
extern void catCJSON_ReplaceItemInArray(catCJSON *array, int which, catCJSON *newitem);
extern void catCJSON_ReplaceItemInObject(catCJSON *object, const char *string, catCJSON *newitem);

/* Duplicate a catCJSON item */
extern catCJSON *catCJSON_Duplicate(catCJSON *item, int recurse);
/* Duplicate will create a new, identical catCJSON item to the one you pass, in new memory that will
need to be released. With recurse!=0, it will duplicate any children connected to the item.
The item->next and ->prev pointers are always zero on return from Duplicate. */

/* ParseWithOpts allows you to require (and check) that the JSON is null terminated, and to retrieve the pointer to the final byte parsed. */
extern catCJSON *catCJSON_ParseWithOpts(const char *value, const char **return_parse_end, int require_null_terminated);

extern void catCJSON_Minify(char *json);

/* Macros for creating things quickly. */
#define catCJSON_AddNullToObject(object,name)		catCJSON_AddItemToObject(object, name, catCJSON_CreateNull())
#define catCJSON_AddTrueToObject(object,name)		catCJSON_AddItemToObject(object, name, catCJSON_CreateTrue())
#define catCJSON_AddFalseToObject(object,name)		catCJSON_AddItemToObject(object, name, catCJSON_CreateFalse())
#define catCJSON_AddBoolToObject(object,name,b)	catCJSON_AddItemToObject(object, name, catCJSON_CreateBool(b))
#define catCJSON_AddNumberToObject(object,name,n)	catCJSON_AddItemToObject(object, name, catCJSON_CreateNumber(n))
#define catCJSON_AddStringToObject(object,name,s)	catCJSON_AddItemToObject(object, name, catCJSON_CreateString(s))

/* When assigning an integer value, it needs to be propagated to valuedouble too. */
#define catCJSON_SetIntValue(object,val)			((object)?(object)->valueint=(object)->valuedouble=(val):(val))
#define catCJSON_SetNumberValue(object,val)		((object)?(object)->valueint=(object)->valuedouble=(val):(val))

#ifdef __cplusplus
}
#endif

#endif
