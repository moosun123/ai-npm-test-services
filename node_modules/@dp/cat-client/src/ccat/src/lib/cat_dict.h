/* Hash Tables Implementation - Copyright (C) 2006-2008 Salvatore Sanfilippo
 * antirez at gmail dot com
 *
 * Please see catDict.c for more information
 */

#ifndef __CAT_DICT_H
#define __CAT_DICT_H

#define CAT_DICT_OK 0
#define CAT_DICT_ERR 1

/* Unused arguments generate annoying warnings... */
#define CAT_DICT_NOTUSED(V) ((void) V)

typedef struct catDictEntry {
    void *key;
    void *val;
    struct catDictEntry *next;
} catDictEntry;

typedef struct catDictType {
    unsigned int (*hashFunction)(const void *key);

    void *(*keyDup)(void *privdata, const void *key);

    void *(*valDup)(void *privdata, const void *obj);

    int (*keyCompare)(void *privdata, const void *key1, const void *key2);

    void (*keyDestructor)(void *privdata, void *key);

    void (*valDestructor)(void *privdata, void *obj);
} catDictType;

typedef struct catDict {
    catDictEntry **table;
    catDictType *type;
    unsigned int size;
    unsigned int sizemask;
    unsigned int used;
    void *privdata;
} catDict;

typedef struct catDictIterator {
    catDict *ht;
    int index;
    catDictEntry *entry, *nextEntry;
} catDictIterator;

/* This is the initial size of every hash table */
#define CAT_DICT_HT_INITIAL_SIZE     16

/* ------------------------------- Macros ------------------------------------*/
#define catDictFreeEntryVal(ht, entry) \
    if ((ht)->type->valDestructor) \
        (ht)->type->valDestructor((ht)->privdata, (entry)->val)

#define catDictSetHashVal(ht, entry, _val_) do { \
    if ((ht)->type->valDup) \
        entry->val = (ht)->type->valDup((ht)->privdata, _val_); \
    else \
        entry->val = (_val_); \
} while(0)

#define catDictFreeEntryKey(ht, entry) \
    if ((ht)->type->keyDestructor) \
        (ht)->type->keyDestructor((ht)->privdata, (entry)->key)

#define catDictSetHashKey(ht, entry, _key_) do { \
    if ((ht)->type->keyDup) \
        entry->key = (ht)->type->keyDup((ht)->privdata, _key_); \
    else \
        entry->key = (_key_); \
} while(0)

#define catDictCompareHashKeys(ht, key1, key2) \
    (((ht)->type->keyCompare) ? \
        (ht)->type->keyCompare((ht)->privdata, key1, key2) : \
        (key1) == (key2))

#define catDictHashKey(ht, key) (ht)->type->hashFunction(key)

#define catDictGetEntryKey(he) ((he)->key)
#define catDictGetEntryVal(he) ((he)->val)
#define catDictGetHashTableSize(ht) ((ht)->size)
#define catDictGetHashTableUsed(ht) ((ht)->used)

/* API */
catDict *catDictCreate(catDictType *type, void *privDataPtr);

int catDictExpand(catDict *ht, unsigned int size);

int catDictAdd(catDict *ht, void *key, void *val);

int catDictReplace(catDict *ht, void *key, void *val);

int catDictDelete(catDict *ht, const void *key);

int catDictDeleteNoFree(catDict *ht, const void *key);

void catDictRelease(catDict *ht);

catDictEntry *catDictFind(catDict *ht, const void *key);

int catDictResize(catDict *ht);

catDictIterator *catDictGetIterator(catDict *ht);

catDictEntry *catDictNext(catDictIterator *iter);

void catDictReleaseIterator(catDictIterator *iter);

catDictEntry *catDictGetRandomKey(catDict *ht);

void catDictPrintStats(catDict *ht);

unsigned int catDictGenHashFunction(const unsigned char *buf, int len);

void catDictEmpty(catDict *ht);

/* Hash table types */
extern catDictType catDictTypeHeapStringCopyKey;
extern catDictType catDictTypeHeapStrings;
extern catDictType catDictTypeHeapStringCopyKeyValue;

#endif /* __CAT_DICT_H */
