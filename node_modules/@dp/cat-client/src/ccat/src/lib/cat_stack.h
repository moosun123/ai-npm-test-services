//
// Created by mtdp on 2020/3/9.
//

#ifndef CCAT_DP_CAT_STACK_H
#define CCAT_DP_CAT_STACK_H

#ifdef __cplusplus
extern "C"{
#endif

#define CAT_STACK_ERR -1
#define CAT_STACK_OK 0

typedef struct _CatStack_T *CatStack_T;

extern int newCatStack(size_t initialSize, CatStack_T* receiver);
extern int isCatStackEmpty(CatStack_T stk);
extern int catStackPush(CatStack_T stk, void *x);
extern int catStackPop(CatStack_T stk, void** receiver);
extern int catStackPeek(CatStack_T stk, void** receiver);
extern int catStackSize(CatStack_T stk);

/**
 * getByIndex is different from that of an array.
 * the index is counting from the top of the stack to the bottom.
 *
 * For example, the following stack
 *
 *       │                     │
 *       │                     │ stack top
 *       ├─────────────────────┤
 *       │          1          │
 *       ├─────────────────────┤
 *       │          2          │
 *       ├─────────────────────┤
 *       │          3          │
 *       └─────────────────────┘ stack bottom
 *
 * Getting by index 0 will give you 1,
 * Getting by index 1 will give you 2,
 * Getting by index 2 will give you 3 and so on.
 *
 * @param stk   the stack that we will operate on
 * @param index the index within the stack
 * @param receiver the value will be put into this receiver
 * @return CAT_STACK_OK if the value can successfully retrieved
 *         CAT_STACK_ERR when error happens
 */
extern int catStackGetByIndex(CatStack_T stk, int index, void** receiver);
extern int catStackClear(CatStack_T stk);
extern int catStackDestroy(CatStack_T* stk);

#ifdef __cplusplus
}
#endif

#endif //CCAT_DP_CAT_STACK_H
