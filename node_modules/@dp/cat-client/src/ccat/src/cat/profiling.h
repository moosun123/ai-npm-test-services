//
// Created by Terence on 2018/9/5.
//

#ifndef CCAT_PROFILING_H
#define CCAT_PROFILING_H

#include <stdint.h>
#include <stdio.h>

#include "lib/cat_time_util.h"

typedef struct _catperf {
    char* name;
    volatile uint64_t totalIn;
    volatile uint64_t totalOut;
    volatile uint64_t periodIn;
    volatile uint64_t periodOut;

    volatile uint64_t checkpoint;

    volatile uint64_t startAt;
    volatile uint64_t lastPeriod;
} catperf;

#ifdef CAT_PROFILING

static inline catperf* catcreateperf(char* name, uint64_t checkpoint) {
    catperf* p = calloc(sizeof(catperf), 1);
    p->name = name;
    p->checkpoint = checkpoint;
    p->startAt = GetTime64();
    p->lastPeriod = p->startAt;
    return p;
}

static inline void catperfin(catperf* perf) {
    ++perf->totalIn;
    ++perf->periodIn;

    if (perf->totalIn % perf->checkpoint == 0) {
        uint64_t currentTimestamp = GetTime64();
        uint64_t delta = currentTimestamp - perf->lastPeriod;

        printf("[%s Count] In: %lld: Out: %lld in %lld ms.\n", perf->name, perf->totalIn, perf->totalOut, delta);
        if (delta > 0) {
            double timesec = delta / 1000.0;
            printf("[%s QPS] In: %lf/s : Out: %lf/s.\n", perf->name, perf->periodIn / timesec, perf->periodOut / timesec);
        } else {
            printf("[%s QPS] Procedure took less than 1ms, failed to calculate.\n", perf->name);
        }

        perf->periodIn = 0;
        perf->periodOut = 0;
        perf->lastPeriod = currentTimestamp;
    }
}

static inline void catperfout(catperf* perf, int count) {
    perf->totalOut += count;
    perf->periodOut += count;
}

static inline void catperffinal(catperf* perf) {
    uint64_t delta = GetTime64() - perf->startAt;
    if (delta > 0) {
        double timesec = delta / 1000.0;
        printf("[%s All-time QPS] In: %lf/s : Out: %lf/s.\n", perf->name, perf->totalIn / timesec, perf->totalOut / timesec);
    }
    free(perf);
}

#else

static inline catperf* catcreateperf(char* name, uint64_t checkpoint) {return NULL;}

static inline void catperfin(catperf* perf) {}

static inline void catperfout(catperf* perf, int count) {}

static inline void catperffinal(catperf* perf) {}

#endif // CAT_PROFILING

#endif // CCAT_PROFILING_H
