#include "transaction_wrap.h"

Napi::FunctionReference TransactionWrap::constructor;

Napi::Object TransactionWrap::Init(Napi::Env env, Napi::Object exports) {
  Napi::HandleScope scope(env);

  Napi::Function func = DefineClass(env, "CatTransactionWrap", {
    InstanceMethod("SetStatus", &TransactionWrap::SetStatus),
    InstanceMethod("Complete", &TransactionWrap::Complete),
  });

  constructor = Napi::Persistent(func);
  constructor.SuppressDestruct();

  exports.Set("CatTransactionWrap", func);
  return exports;
}

TransactionWrap::TransactionWrap(const Napi::CallbackInfo& info) : Napi::ObjectWrap<TransactionWrap>(info)  {
  Napi::Env env = info.Env();
  Napi::HandleScope scope(env);

  int length = info.Length();

  if (length != 2) {
    Napi::TypeError::New(env, "Two arguments expected").ThrowAsJavaScriptException();
    return;
  }

  if (!info[0].IsString() || !info[1].IsString()) {
    Napi::TypeError::New(env, "Two string arguments expected").ThrowAsJavaScriptException();
    return;
  }

  Napi::String transactionType = info[0].As<Napi::String>();
  Napi::String transactionName = info[1].As<Napi::String>();

  std::string cppTransactionType = transactionType.Utf8Value();
  std::string cppTransactionName = transactionName.Utf8Value();

  const char* tType = cppTransactionType.c_str();
  const char* tName = cppTransactionName.c_str();

  this->catTransaction_ = newTransaction(tType, tName);
}

void TransactionWrap::SetStatus(const Napi::CallbackInfo& info) {
  Napi::Env env = info.Env();
  Napi::HandleScope scope(env);

  if (info.Length() != 1) {
    Napi::TypeError::New(env, "TransactionWrap::SetStatus One argument expected").ThrowAsJavaScriptException();
    return;
  }

  if (!info[0].IsString()) {
    Napi::TypeError::New(env, "TransactionWrap::SetStatus One string argument expected").ThrowAsJavaScriptException();
    return;
  }

  Napi::String transactionStatus = info[0].As<Napi::String>();
  std::string cppTransactionStatus = transactionStatus.Utf8Value();
  const char* status = cppTransactionStatus.c_str();

  this->catTransaction_->setStatus((CatMessage *)(this->catTransaction_), status);
}

void TransactionWrap::Complete(const Napi::CallbackInfo& info) {
  Napi::Env env = info.Env();
  Napi::HandleScope scope(env);

  this->catTransaction_->setComplete((CatMessage *)(this->catTransaction_));
}

CatTransaction* TransactionWrap::GetInternalInstance() {
  return this->catTransaction_;
}

Napi::Object TransactionWrap::NewInstance(Napi::Env env, Napi::Value type, Napi::Value name) {
    Napi::EscapableHandleScope scope(env);
    Napi::Object obj = constructor.New({type, name});
    return scope.Escape(napi_value(obj)).ToObject();
}

