//清除所有cookie函数
export function clearAllCookie() {
  const date = new Date();
  date.setTime(date.getTime() - 10000);
  const keys = document.cookie.match(/[^ =;]+(?==)/g);
  console.log('删除cookie：' + keys);
  if (keys) {
    for (let i = keys.length; i--; ) {
      document.cookie = keys[i] + '=; expire=' + date.toUTCString() + '; path=/';
    }
  }
}

export function cloneDeep(obj) {
  const objClone = Array.isArray(obj) ? [] : {};
  if (obj && typeof obj === 'object') {
    for (const key in obj) {
      // eslint-disable-next-line no-prototype-builtins
      if (obj.hasOwnProperty(key)) {
        //判断ojb子元素是否为对象，如果是，递归复制
        if (obj[key] && typeof obj[key] === 'object') {
          objClone[key] = cloneDeep(obj[key]);
        } else {
          //如果不是，简单复制
          objClone[key] = obj[key];
        }
      }
    }
  }
  return objClone;
}

export function hasChildren(data) {
  return data && data.children && data.children.length > 0;
}

export function hasItems(data) {
  return data && data.items && data.items.length > 0;
}

export function hasAttrs(data) {
  return data && data.attrs && data.attrs.length > 0;
}

export function includes(key, keys) {
  return keys.includes(key);
}

export function add(key, keys) {
  keys.push(key);
}

export function remove(key, keys) {
  const index = keys.indexOf(key);
  if (~index) {
    keys.splice(index, 1);
  }
  return Boolean(~index);
}

export function isCanPersonChecked(source) {
  return !/管理员/g.test(source);
}

export function isCanPersonDelete(source) {
  return /个人/g.test(source);
}

// 个人删除tab，删除用户的授权来源只有个人
export function deleteSourceIsOnlyPerson(source) {
  return /^个人$/g.test(source);
}

// 按用户查询——资源管理员不可进入编辑授权
export function isAdmin(source) {
  return /管理员/g.test(source);
}

// 是否为维值节点
export function isAttr(node) {
  // RT为空，则判断为维值节点
  return node.ext && window._.isEmpty(node.ext);
}

// 是否为资源节点
export function isItem(node) {
  return node.ext && !window._.isEmpty(node.ext);
}

// 具有维值的子资源节点
export function isItemHasAttr(node) {
  return isItem(node) && hasAttrs(node);
}

// 是否为天璇虚拟节点（'0'，'1'）
export function isTxVN(VN) {
  return !!Number(VN);
}

// 通用系统（非天璇）是否为叶子节点
export function isCommonLeaf(node) {
  return !(hasItems(node) || hasAttrs(node));
}
// 编辑授权，如果是个人且授权来源包含部门或用户组
export function isCanEdit(source) {
  if (/部门/g.test(source) || /用户组/g.test(source)) {
    return false;
  } else {
    return true;
  }
}

// 授权来源只有个人
export function psIsOnlyPerson(PS) {
  return /^个人$/g.test(PS);
}

// 授权来源包含个人
export function psIsHasPerson(PS) {
  return /个人/g.test(PS);
}

// 授权来源不包含个人
export function psIsNoPerson(PS) {
  return !/个人/g.test(PS);
}

// 未授权
export function psIsEmpty(PS) {
  return PS.trim().length === 0;
}

// 会存在code相同的节点，通过 uuid 转化使 code 唯一
export function createUUID() {
  const s = [];
  const hexDigits = '0123456789abcdef';
  for (let i = 0; i < 36; i++) {
    s[i] = hexDigits.substr(Math.floor(Math.random() * 0x10), 1);
  }
  s[14] = '4'; // bits 12-15 of the time_hi_and_version field to 0010
  s[19] = hexDigits.substr((s[19] & 0x3) | 0x8, 1); // bits 6-7 of the clock_seq_hi_and_reserved to 01
  s[8] = s[13] = s[18] = s[23] = '-';

  const uuid = s.join('');
  return uuid;
}

/**
 * @description: 创建维值对应的父资源Map（维值的选中、禁用、授权来源取决于其直接父资源节点）
 * @param {type}
 * @return:
 */
export function createAttrMap(n, attrMap) {
  const fn = attrNode => {
    attrMap[attrNode.code] = n;
    // 嵌套格式：attrs-attrs-attrs-attrs....
    if (hasAttrs(attrNode)) {
      attrNode.attrs.forEach(fn);
    }
    // 嵌套格式：attrs-items-items-items....
    if (hasItems(attrNode)) {
      attrNode.items.forEach(fn);
    }
  };

  // 维值的资源根节点
  if (isItemHasAttr(n)) {
    n.attrs.forEach(fn);
  }
}

/**
 * @description: 天璇获取虚拟节点的父资源id
 * @param {type}
 * @return:
 */
export function getVNNodeParentId(node, key) {
  const { $parent } = node;

  if (!$parent) return '';

  const {
    data,
    data: { isVN }
  } = $parent;

  if (!isVN) {
    return data[key];
  }
  return getVNNodeParentId($parent);
}

export function stringFormat(str) {
  // 转换空白符和中文逗号
  return str.trim().replace(/(\s|，|，)+/g, ',');
}

// 获取用户头像
export function getUserAvatarUrl(mis) {
  return `/newapi/user/avatar/${mis}`;
}

export function debounce(fn, delay) {
  let timer;
  return function (...args) {
    if (timer) clearTimeout(timer);
    // 使用箭头函数来处理this问题
    timer = setTimeout(() => fn.apply(this, args), delay);
  };
}
