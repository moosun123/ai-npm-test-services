import { cloneDeep } from '../../../utils/index.js';

export function isTreeNodeDisabled(n) {
  const {
    // all,
    ext: { OP, VN, EA }
  } = n;

  // 当前为天璇的虚拟节点，不做限制
  if (Number(VN)) {
    return false;
  }

  // "0"-禁用 "1"-可用，权限申请，所有资源都可选，接口已删掉OP字段，只有禁止申请的才返回OP字段且为"0"
  if (OP === '0') {
    return true;
  }

  // "0"-禁用 "1"-可用，权限申请，EA 用于判断魔数某些资源的申请限制状态
  if (EA === '0') {
    return true;
  }

  return false;
}

export function treeNodeDisabledText(n) {
  const {
    // all,
    ext: { OP, VN, EA, PT }
  } = n;

  // 当前为天璇的虚拟节点，不做限制
  if (Number(VN)) {
    return '';
  }

  // "0"-禁用 "1"-可用，权限申请，所有资源都可选，接口已删掉OP字段，只有禁止申请的才返回OP字段且为"0"
  if (OP === '0') {
    return PT || '该资源暂不开放申请';
  }

  if (EA === '0') {
    return PT || '该资源暂不开放申请';
  }

  return '';
}

export function findChildInit(list: any, childRCList: string[]) {
  const walker = (list: any) => {
    return list.some((item: any) => {
      let childStatus = false;
      if (item.items && item.items.length > 0) {
        childStatus = walker(item.items);
      }
      return childStatus || childRCList.includes(item.code) || childRCList.includes(item.name);
    });
  };

  return walker(list);
}

export function getSelectOnly(tree: any, childRCList: string[]) {
  const orginTree = cloneDeep(tree);
  const walker = (items: any[], parentSelect: boolean) => {
    const children: any[] = [];
    items.forEach((item: any) => {
      if (item && item.items && item.items.length) {
        item.items = walker(
          item.items,
          parentSelect || childRCList.includes(item.code) || childRCList.includes(item.name)
        );
      }
      if (findChildInit([item], childRCList) || parentSelect) {
        children.push(item);
      }
    });
    return children;
  };
  if (findChildInit((orginTree && orginTree.items) || [], childRCList)) {
    orginTree.items = walker(orginTree.items, false);
  }
  return [orginTree];
}
