import { isTreeNodeDisabled, treeNodeDisabledText, getSelectOnly } from './utils';
import { isTxVN } from '../../../utils/index';

class AuthApplyModel {
  public system = '';
  public requireId = '';
  public expandKeys: string[] = [];
  public checkedKeys: string[] = [];
  public resourceCodeList: string[] = [];
  public childRCList: string[] = [];
  public viewType = '';
  public checkedAlreadyHaveAuth = false;
  // 判断根节点下有没有子节点
  public hasTreeChildRC: { [key: string]: boolean } = {};
  // 记录各个节点子节点长度
  public nodeChildrenLenMap: { [key: string]: number } = {};
  // 记录全部的资源 code
  public allChildRCList: string[] = [];
  // 记录全部的资源 name
  public allChildNameList: string[] = [];

  constructor(params: { [key: string]: any }) {
    const { system, resourceCodeList, childRCList, viewType, misId, checkedAlreadyHaveAuth } = params;
    this.system = system;
    this.requireId = misId;
    this.resourceCodeList = resourceCodeList;
    this.childRCList = childRCList || [];
    this.viewType = viewType;
    this.checkedAlreadyHaveAuth = checkedAlreadyHaveAuth;
  }

  /**
   *
   * @param data 数据
   * @param isRoot 是否根节点
   * @param parentDisabled 父节点禁用
   * @param rootCode 根节点 code
   * @returns
   */
  public formatSingleTreeData(data: any, isRoot: boolean, parentDisabled?: boolean, rootCode?: string) {
    return data.map((node: any) => {
      if (node) {
        const { ext = {}, id, code, name, items } = node;
        // 需要考虑父节点是否禁用，有的子节点不会返回 OP 字段
        const disableCheckbox = isTreeNodeDisabled(node) || parentDisabled || false;
        const disableCheckboxHoverText = treeNodeDisabledText(node);
        if (isRoot) {
          let children = [];
          if (items && items.length > 0) {
            children = this.formatSingleTreeData(items, false, disableCheckbox, code);
            // 不存在该根节点下的子节点，则默认选择整个根
            if (!this.hasTreeChildRC[code] && !disableCheckbox) {
              this.expandKeys.push(id);
              this.checkedKeys.push(id);
            }
          } else {
            this.checkedKeys.push(id);
          }
          // 根节点是列表数据结构，需构造树形结构
          return {
            id,
            resourceCode: code,
            ...node,
            anchorId: 'domain',
            title: `${name}(${code})`,
            all: 0,
            status: 0,
            isVN: isTxVN(ext.VN),
            type: ext.resourceTypeName || '--',
            isRoot: true,
            children,
            disableCheckbox,
            disableCheckboxHoverText,
            withGraphic: ext.withGraphic === '1',
            applyReason: ext.AR,
            isBind: ext.BR ? '1' : '0',
            bindReport: ext.BR,
            resourceLevel: ext.RL
          };
        } else {
          if (this.childRCList.includes(code) || this.childRCList.includes(name)) {
            // 判断此根节点下是否有 childRC
            this.hasTreeChildRC[rootCode!] = true;
            if (!disableCheckbox) {
              this.expandKeys.push(id);
              this.checkedKeys.push(id);
            }
          }
          // 开启了默认勾选已有权限节点，默认勾选
          if (this.checkedAlreadyHaveAuth && Number(ext.GA)) {
            this.checkedKeys.push(id);
          }
          let children = [];
          if (items && items.length > 0) {
            children = this.formatSingleTreeData(items, false, disableCheckbox, rootCode);
          }
          return {
            id,
            resourceCode: code,
            ...node,
            anchorId: ext.AI || '',
            title: `${name}`,
            all: 0,
            status: 0,
            isVN: isTxVN(ext.VN),
            children,
            hasAllAuth: Boolean(Number(ext.GA)),
            hasPartAuth: !Number(ext.GA) && Boolean(Number(ext.GS)),
            disableCheckbox,
            disableCheckboxHoverText,
            loadAll: true,
            applyReason: ext.AR,
            isBind: ext.BR ? '1' : '0',
            bindReport: ext.BR,
            resourceLevel: ext.RL
          };
        }
      }
    });
  }

  public initTreeData(treeData: any[]) {
    return treeData.map(data => {
      // 记录各个节点子节点长度，记录所有的资源 code
      const formatAllTreeData = (data: any) => {
        data.forEach((item: any) => {
          this.allChildRCList.push(item.code);
          this.allChildNameList.push(item.name);
          if (item.items) {
            this.nodeChildrenLenMap[item.id] = item.items.length;
            formatAllTreeData(item.items);
          }
        });
      };
      formatAllTreeData([data]);
      let resource = [];
      if (this.childRCList.length > 0 && this.viewType === 'selectOnly') {
        resource = this.formatSingleTreeData(getSelectOnly(data, this.childRCList), true);
      } else {
        resource = this.formatSingleTreeData([data], true);
        if (this.viewType === 'selectNull') {
          this.checkedKeys = [];
          this.expandKeys = [];
        }
      }
      return resource;
    });
  }

  public formatSubmitData(tree: any[], needAll?: boolean) {
    const newTree: any = [];
    for (let i = 0; i < tree.length; i++) {
      const node = tree[i];
      const { checked, indeterminate, children } = node;
      const { title, id, code, ext } = node.$origin_data;
      let childrenNode: any = [];
      if (children && children.length) {
        childrenNode = this.formatSubmitData(children, needAll);
      }

      let all = 0;
      const childrenReduce = childrenNode.length < this.nodeChildrenLenMap[node.id];
      // 如果过滤之后节点变少，则 all 字段变为 0
      if (childrenReduce) {
        all = 0;
        // 所有节点都为禁用，则 all 为 1，主要针对节点下的所有节点都是不可申请，但是父节点可申请的情况
        if (children.every(node => node.disableCheckbox)) {
          all = 1;
        }
      } else if (childrenNode.every((node: any) => node.all)) {
        // 如果过滤之后节点未减少，判断孩子是否全部全选
        all = 1;
      }

      if (checked || indeterminate || needAll) {
        newTree.push({
          id,
          code,
          ext,
          name: title,
          all,
          items: childrenNode,
          status: checked || indeterminate ? 1 : 0
        });
      }
    }
    return newTree;
  }
}

export default AuthApplyModel;
