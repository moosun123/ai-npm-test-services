const path = require('path');
const http = require('http');
const { exec } = require('child_process');

//算法1：lxcuid生成算法
function UUID(): string {
    const s = [];
    const hexDigits = '0123456789abcdef';
    for (let i = 0; i < 36; i++) {
        s[i] = hexDigits.substr(Math.floor(Math.random() * 0x10), 1);
    }
    s[14] = '4';
    s[19] = hexDigits.substr((s[19] & 0x3) | 0x8, 1);
    return s.join('');
}

//算法2：灵犀web sdk misid生成算法
function randomSeed(): string {
    let seed = Math.floor(1 + Math.random() * 65535);
    return seed.toString(16).substring(1);
}

/**
 * misid 生成算法
 * @returns {string} misid 28位随机串
 * @private
 */
function misId(): string {
    let seeds = [];
    let time = +new Date();
    seeds.push(time.toString(16));
    seeds.push(randomSeed());
    seeds.push(randomSeed());
    seeds.push(randomSeed());
    return seeds.join('-');
}

//算法3：灵犀web sdk req_id生成算法
function genReqId(): string {
    return (
        (+new Date()).toString(16) + '-' + Math.floor(Math.random() * 65535) + '-' + Math.floor(Math.random() * 65535)
    );
}

export interface ReportPayload {
    cid: string;
    appName: string;
    category: string;
    value?: any;
}

function getUsePackage () {
    try {
        const pwd = process.cwd();
        const root = pwd.substr(0, pwd.indexOf(`${path.sep}node_modules${path.sep}`));
        const pkg = require(path.join(root, 'package.json'));
        return pkg;
    } catch {
        return {};
    }
}

function getRepoFromPackage () {
    try {
        const pkg = getUsePackage();
        const { repository } = pkg;
        return repository ? repository.url : '';
    } catch (e) {
        return '';
    }
}

function getRepoFromGit () {
    return new Promise((resolve) => {
        const reg = /git.sankuai.com\/(.*\.git)/;
        try {
            exec('git remote -v', function (err, stdout, stderr) {
                if (err) {
                    resolve('');
                    return ;
                }
                const m: string[] = stdout.match(reg) || [];
                resolve(m[0] || '');
            });
        } catch (e) {
            resolve('');
        }
    })
}

async function getRepo () {
    let repo = await getRepoFromGit();
    if (!repo) {
        repo = getRepoFromPackage();
    }
    return repo;
}

function getGitUser () {
    return new Promise((resolve) => {
        try {
            exec('git config --get user.email', function (err, stdout, stderr) {
                if (err) {
                    resolve('');
                    return ;
                }
                let u: string = stdout;
                if (u.trim) {
                    u = u.trim()
                }
                resolve(u || '');
            });
        } catch (e) {
            resolve('');
        }
    })
}

function getAuthorFromPackage () {
    const { author } = getUsePackage();
    return author && author.join ? author.join(',') : author;
}

async function getInstallUser () {
    const user = await getGitUser();
    return user || getAuthorFromPackage();
}

export async function report(payload: ReportPayload) {
    const { cid, value, appName, category } = payload;
    try {
        const author = await getInstallUser();
        const repo = await getRepo();
        const custom = Object.assign({}, value, {
            git: repo,
            author: author,
        });
        const postData = JSON.stringify([
            {
                union_id: UUID(),
                sdk_ver: '4.0.0',
                category,
                appnm: appName,
                msid: randomSeed(),
                ct: 'web',
                os: value ? value.name : undefined,
                evs: [
                    {
                        nt: 0,
                        nm: 'PV',
                        isauto: 7,
                        tm: new Date().getTime(),
                        val_cid: cid,
                        req_id: genReqId(),
                        seq: 1,
                        val_lab: {
                            custom,
                        },
                    },
                ],
            },
        ]);
        const req = http.request(
            {
                hostname: 'report.meituan.com',
                method: 'POST',
                headers: {
                    'Content-Type': 'text/plain;charset=UTF-8',
                },
                timeout: 2000,
            },
            function (res) {
                const responseBuffer = [];
                res.on('data', function (chunk) {
                    responseBuffer.push(chunk);
                });
                res.on('end', function () {
                    const responseData = Buffer.concat(responseBuffer);
                    const res = responseData.toString('utf-8');
                    process.exit(0);
                });
            },
        );
        req.on('error', function (error) {
            console.error('report error:', error);
        });
        req.write(postData);
        req.end();
        setTimeout(() => {
            req.abort();
        }, 2000);
    } catch (e) {
        console.log(e);
    }
}
