"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.report = void 0;
var path = require('path');
var http = require('http');
var exec = require('child_process').exec;
function UUID() {
    var s = [];
    var hexDigits = '0123456789abcdef';
    for (var i = 0; i < 36; i++) {
        s[i] = hexDigits.substr(Math.floor(Math.random() * 0x10), 1);
    }
    s[14] = '4';
    s[19] = hexDigits.substr((s[19] & 0x3) | 0x8, 1);
    return s.join('');
}
function randomSeed() {
    var seed = Math.floor(1 + Math.random() * 65535);
    return seed.toString(16).substring(1);
}
function misId() {
    var seeds = [];
    var time = +new Date();
    seeds.push(time.toString(16));
    seeds.push(randomSeed());
    seeds.push(randomSeed());
    seeds.push(randomSeed());
    return seeds.join('-');
}
function genReqId() {
    return ((+new Date()).toString(16) + '-' + Math.floor(Math.random() * 65535) + '-' + Math.floor(Math.random() * 65535));
}
function getUsePackage() {
    try {
        var pwd = process.cwd();
        var root = pwd.substr(0, pwd.indexOf(path.sep + "node_modules" + path.sep));
        var pkg = require(path.join(root, 'package.json'));
        return pkg;
    }
    catch (_a) {
        return {};
    }
}
function getRepoFromPackage() {
    try {
        var pkg = getUsePackage();
        var repository = pkg.repository;
        return repository ? repository.url : '';
    }
    catch (e) {
        return '';
    }
}
function getRepoFromGit() {
    return new Promise(function (resolve) {
        var reg = /git.sankuai.com\/(.*\.git)/;
        try {
            exec('git remote -v', function (err, stdout, stderr) {
                if (err) {
                    resolve('');
                    return;
                }
                var m = stdout.match(reg) || [];
                resolve(m[0] || '');
            });
        }
        catch (e) {
            resolve('');
        }
    });
}
function getRepo() {
    return __awaiter(this, void 0, void 0, function () {
        var repo;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0: return [4, getRepoFromGit()];
                case 1:
                    repo = _a.sent();
                    if (!repo) {
                        repo = getRepoFromPackage();
                    }
                    return [2, repo];
            }
        });
    });
}
function getGitUser() {
    return new Promise(function (resolve) {
        try {
            exec('git config --get user.email', function (err, stdout, stderr) {
                if (err) {
                    resolve('');
                    return;
                }
                var u = stdout;
                if (u.trim) {
                    u = u.trim();
                }
                resolve(u || '');
            });
        }
        catch (e) {
            resolve('');
        }
    });
}
function getAuthorFromPackage() {
    var author = getUsePackage().author;
    return author && author.join ? author.join(',') : author;
}
function getInstallUser() {
    return __awaiter(this, void 0, void 0, function () {
        var user;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0: return [4, getGitUser()];
                case 1:
                    user = _a.sent();
                    return [2, user || getAuthorFromPackage()];
            }
        });
    });
}
function report(payload) {
    return __awaiter(this, void 0, void 0, function () {
        var cid, value, appName, category, author, repo, custom, postData, req_1, e_1;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    cid = payload.cid, value = payload.value, appName = payload.appName, category = payload.category;
                    _a.label = 1;
                case 1:
                    _a.trys.push([1, 4, , 5]);
                    return [4, getInstallUser()];
                case 2:
                    author = _a.sent();
                    return [4, getRepo()];
                case 3:
                    repo = _a.sent();
                    custom = Object.assign({}, value, {
                        git: repo,
                        author: author,
                    });
                    postData = JSON.stringify([
                        {
                            union_id: UUID(),
                            sdk_ver: '4.0.0',
                            category: category,
                            appnm: appName,
                            msid: randomSeed(),
                            ct: 'web',
                            os: value ? value.name : undefined,
                            evs: [
                                {
                                    nt: 0,
                                    nm: 'PV',
                                    isauto: 7,
                                    tm: new Date().getTime(),
                                    val_cid: cid,
                                    req_id: genReqId(),
                                    seq: 1,
                                    val_lab: {
                                        custom: custom,
                                    },
                                },
                            ],
                        },
                    ]);
                    req_1 = http.request({
                        hostname: 'report.meituan.com',
                        method: 'POST',
                        headers: {
                            'Content-Type': 'text/plain;charset=UTF-8',
                        },
                        timeout: 2000,
                    }, function (res) {
                        var responseBuffer = [];
                        res.on('data', function (chunk) {
                            responseBuffer.push(chunk);
                        });
                        res.on('end', function () {
                            var responseData = Buffer.concat(responseBuffer);
                            var res = responseData.toString('utf-8');
                            process.exit(0);
                        });
                    });
                    req_1.on('error', function (error) {
                        console.error('report error:', error);
                    });
                    req_1.write(postData);
                    req_1.end();
                    setTimeout(function () {
                        req_1.abort();
                    }, 2000);
                    return [3, 5];
                case 4:
                    e_1 = _a.sent();
                    console.log(e_1);
                    return [3, 5];
                case 5: return [2];
            }
        });
    });
}
exports.report = report;
