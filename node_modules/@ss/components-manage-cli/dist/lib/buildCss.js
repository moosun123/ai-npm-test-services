"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.buildCSS = void 0;
const fs = __importStar(require("fs"));
const path = __importStar(require("path"));
function buildCSS() {
    const programPath = process.cwd();
    const Components = require(path.join(programPath, './components.json'));
    const cssConfig = fs.existsSync(path.join(programPath, './mtd.config.js')) ? require(path.join(programPath, './mtd.config.js')) : require(path.join(programPath, './config.js'));
    const { themes } = cssConfig;
    const basePath = path.join(programPath, './components');
    function fileExists(filePath) {
        try {
            return fs.statSync(filePath).isFile();
        }
        catch (err) {
            return false;
        }
    }
    themes.forEach((theme) => {
        const indexContent = [
            '/* Automatically generated by cm tool */\n',
            '@import "./common/var.scss";',
            '@import "./common/base.scss";',
        ];
        const OUTPUT_PATH = path.resolve(basePath, theme, 'index.scss');
        Object.keys(Components).forEach(key => {
            const fileName = `${key}.scss`;
            indexContent.push(`@import "./${fileName}";`);
            const filePath = path.resolve(basePath, theme, fileName);
            if (!fileExists(filePath)) {
                fs.writeFileSync(filePath, '', 'utf8');
                console.log(theme, ' 创建遗漏的 ', fileName, ' 文件');
            }
        });
        fs.writeFileSync(OUTPUT_PATH, indexContent.join('\n') + '\n');
        console.log('[build css] DONE:', OUTPUT_PATH);
    });
    process.exit(0);
}
exports.buildCSS = buildCSS;
