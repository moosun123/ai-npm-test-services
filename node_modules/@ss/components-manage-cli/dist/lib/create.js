"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.create = void 0;
const fs = __importStar(require("fs"));
const path = __importStar(require("path"));
const buildTs_1 = require("./buildTs");
const buildCss_1 = require("./buildCss");
const buildEntry_1 = require("./buildEntry");
const common_1 = require("../util/common");
const template_1 = require("../util/template");
const components_manage_tools_1 = require("@ss/components-manage-tools");
const contant_1 = require("../contant");
const upperCamelCase = require('uppercamelcase');
function create() {
    const programPath = process.cwd();
    const { technology } = (0, common_1.readProgramConfig)(programPath);
    process.on('exit', () => {
        console.log();
    });
    if (!process.argv[3]) {
        (0, components_manage_tools_1.fatalLog)('[组件名]必填 - Please enter new component name');
    }
    if (!process.argv[4]) {
        (0, components_manage_tools_1.fatalLog)('[组件中文名]必填 - Please enter new component cn name');
    }
    const maintainer = (0, common_1.handleMaintainer)(process.argv[5] || '');
    const { namespace, themes } = fs.existsSync(path.join(programPath, './mtd.config.js')) ? require(path.join(programPath, './mtd.config.js')) : require(path.join(programPath, './config.js'));
    const ComponentsFile = require(path.join(programPath, './components.json'));
    const componentName = process.argv[3];
    const chineseName = process.argv[4] || '';
    if (!contant_1.DISABLE_COMPONENT_NAME_INSPECTION) {
        let cmpNamespace;
        if (namespace) {
            cmpNamespace = namespace;
        }
        else {
            cmpNamespace = require(path.join(programPath, './config.js')).namespace;
        }
        if (!componentName.startsWith(cmpNamespace)) {
            (0, components_manage_tools_1.fatalLog)(`组件名称必须以${cmpNamespace}开头,当前填写的组件名为${componentName}`);
        }
    }
    function resolve(...dirs) {
        return path.join(programPath, ...dirs);
    }
    function createComponentPackage(name) {
        return function (...dirs) {
            return resolve('components', name, ...dirs);
        };
    }
    function saveFile(file, content) {
        const dir = path.dirname(file);
        if (!fs.existsSync(dir)) {
            fs.mkdirSync(dir);
        }
        fs.writeFileSync(file, content + '\n');
        console.log('save file: ', file, ' done');
    }
    const exportName = upperCamelCase(componentName);
    const resolvePackage = createComponentPackage(componentName);
    if (ComponentsFile[componentName]) {
        console.error(`${componentName} 已存在.`);
        process.exit(1);
    }
    ComponentsFile[componentName] = `components/${componentName}`;
    saveFile(resolve('components.json'), JSON.stringify(ComponentsFile, null, '  '));
    const nameWithoutPrefix = (0, common_1.removeNamespace)(namespace, componentName);
    const componentClassName = `${namespace}-${nameWithoutPrefix}`;
    const Files = [
        {
            file: resolvePackage(technology === 'es' ? 'index.js' : 'index.ts'),
            content: technology === 'es'
                ? (0, template_1.esRegistryTemplate)(exportName, componentName)
                : (0, template_1.tsRegistryTemplate)(exportName, componentName),
        },
        {
            file: resolvePackage(`${componentName}.vue`),
            content: technology === 'es'
                ? (0, template_1.esComponentTemplate)(exportName, componentClassName)
                : (0, template_1.tsComponentTemplate)(exportName, componentClassName),
        },
        {
            file: resolve(`components/${componentName}/doc/demo.vue`),
            content: technology === 'es' ? (0, template_1.esDemoTemplate)(exportName) : (0, template_1.tsDemoTemplate)(exportName),
        },
        {
            file: resolve(`types/${componentName}.d.ts`),
            content: (0, template_1.typeDefTemplate)(exportName),
        },
        {
            file: resolve(`components/${componentName}/doc/api.json`),
            content: (0, template_1.componentDocTemplate)(componentName, chineseName, maintainer),
        },
    ];
    themes.forEach(theme => {
        Files.push({
            file: resolve('components', theme, `${componentName}.scss`),
            content: (0, template_1.sassTemplate)((0, common_1.removeNamespace)(namespace, componentName)),
        });
    });
    Files.push({
        file: resolve('components/theme-chalk/index.scss'),
        content: `${fs.readFileSync(resolve('components/theme-chalk/index.scss'), 'utf-8')}@import "./${componentName}.scss";`,
    });
    Files.forEach(file => {
        saveFile(file.file, file.content);
    });
    fs.mkdirSync(resolve('components', componentName, 'components'));
    const navConfigFile = require(resolve('nav.config.json'));
    function findComponentConfig(navConfig) {
        return navConfig.find(nav => nav.path === '/components');
    }
    const componentNavs = findComponentConfig(navConfigFile);
    const { groups } = componentNavs;
    groups[groups.length - 1].list.push({
        path: componentName,
        name: exportName,
        cnName: chineseName,
    });
    saveFile(resolve('nav.config.json'), JSON.stringify(navConfigFile, null, '  '));
    const testFileName = `tests/unit/${componentName}.spec.${(0, common_1.getExtFromTechnology)(technology)}`;
    fs.writeFileSync(resolve(testFileName), (0, template_1.testTemplate)(exportName, componentName));
    (0, buildEntry_1.buildEntry)();
    (0, buildTs_1.buildTS)();
    (0, buildCss_1.buildCSS)();
    console.log(`[success]文件生成完成，可以进入components/${componentName}文件夹开发组件啦🌞`);
}
exports.create = create;
