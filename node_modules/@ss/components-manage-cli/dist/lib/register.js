"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.register = void 0;
const path = __importStar(require("path"));
const components_manage_tools_1 = require("@ss/components-manage-tools");
const chalk = require('chalk');
const inquirer = require('inquirer');
const register = async (registerType) => {
    if (!registerType) {
        (0, components_manage_tools_1.fatalLog)('register is must be have an registerType(component or template).');
    }
    const { confirmRegister } = await inquirer.prompt([{
            type: 'list',
            message: 'Please pick is confirm register.',
            name: 'confirmRegister',
            choices: ['yes', 'no']
        }]);
    if (confirmRegister === 'yes') {
        const registerParams = require(path.join(process.cwd(), 'libInfo.json'));
        console.log(chalk.gray('register start.'));
        await (0, components_manage_tools_1.registerApi)(registerParams, registerType);
        console.log(chalk.green('register success.'));
    }
    process.exit(0);
};
exports.register = register;
