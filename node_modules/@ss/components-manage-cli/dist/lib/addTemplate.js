"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.addTemplate = void 0;
const components_manage_tools_1 = require("@ss/components-manage-tools");
const questions_1 = require("../util/questions");
const fs_1 = __importDefault(require("fs"));
const path_1 = __importDefault(require("path"));
const node_fetch_1 = __importDefault(require("node-fetch"));
const child_process_1 = require("child_process");
const cli_shared_utils_1 = require("@vue/cli-shared-utils");
const constant_1 = require("../util/constant");
async function getTemplateInfo(params) {
    const stringData = JSON.stringify(params);
    try {
        const value = await (0, node_fetch_1.default)(`${constant_1.envHost}/openapi/template/download`, {
            method: 'POST',
            body: stringData,
            headers: {
                'Content-Type': 'application/json',
            },
        });
        const res = await value.json();
        if (res.code !== 0) {
            (0, components_manage_tools_1.fatalLog)(`${res.message}`);
        }
        return res.data;
    }
    catch (error) {
        (0, components_manage_tools_1.fatalLog)(`获取模板信息失败：${error}`);
    }
}
function installDep(depends) {
    if (!depends)
        return '';
    let bin = (0, cli_shared_utils_1.hasYarn)() && (0, cli_shared_utils_1.hasProjectYarn)(process.cwd()) ? 'yarn add' : 'npm i';
    let shell = '';
    let npmMap = ' --registry=http://r.npm.sankuai.com';
    if (depends.dependencies) {
        shell += `${bin}`;
        Object.keys(depends.dependencies).forEach(pkgName => {
            shell += ` ${pkgName}@${depends.dependencies[pkgName]}`;
        });
        shell += npmMap;
    }
    if (depends.devDependencies) {
        shell += shell ? ` && ${bin} -D` : ` ${bin} -D`;
        Object.keys(depends.devDependencies).forEach(pkgName => {
            shell += ` ${pkgName}@${depends.devDependencies[pkgName]}`;
        });
        shell += npmMap;
    }
    if (shell) {
        (0, components_manage_tools_1.infoLog)(`开始安装模板依赖...`);
        try {
            (0, child_process_1.execSync)(shell, { stdio: 'inherit' });
        }
        catch (err) {
            (0, components_manage_tools_1.warningLog)(`安装模板依赖失败：${err}`);
        }
    }
}
async function addTemplate(tplId, target, fileName, cmd) {
    const token = (0, components_manage_tools_1.checkLogin)();
    if (!target) {
        const result = await (0, questions_1.askInstallInCwd)();
        if (!result.isOk)
            process.exit(0);
        target = '/';
    }
    let { url, depends } = await getTemplateInfo({ token, tplId });
    if (!url)
        (0, components_manage_tools_1.fatalLog)(`获取模板 url 失败`);
    let dirPath = path_1.default.join(process.cwd(), target);
    if (!fs_1.default.existsSync(dirPath)) {
        fs_1.default.mkdirSync(dirPath);
        (0, components_manage_tools_1.infoLog)(`目录不存在，已自动创建：${dirPath}\n`);
    }
    (0, components_manage_tools_1.infoLog)('开始下载模板...\n');
    let temporaryPkg = `${tplId}-temp`;
    target = path_1.default.join(dirPath, temporaryPkg);
    let stream = fs_1.default.createWriteStream(target);
    try {
        const res = await (0, node_fetch_1.default)(url);
        await new Promise((resolve, reject) => {
            res.body.pipe(stream).on('close', function (err) {
                if (err) {
                    reject(err);
                }
                else {
                    resolve(null);
                }
            });
        });
        (0, components_manage_tools_1.infoLog)('模板压缩包下载完毕，开始解压\n');
    }
    catch (err) {
        (0, components_manage_tools_1.fatalLog)(`下载模板压缩包失败：${err}`);
    }
    try {
        const realPath = dirPath.endsWith('/') ? dirPath : `${dirPath}/`;
        (0, child_process_1.execSync)(`mkdir ${realPath}.temDir && tar -zxvkf ${target} -C ${realPath}.temDir && mv ${realPath}.temDir/* ${realPath}${fileName} && rm -rf ${realPath}.temDir`, { stdio: 'pipe' });
        (0, components_manage_tools_1.infoLog)(`解压完成`);
    }
    catch (err) {
        if (err.toString().includes('Already exists')) {
            (0, components_manage_tools_1.fatalLog)(`${err}\n解压失败：请删除上述文件或目录后重新运行命令`);
        }
        else {
            (0, components_manage_tools_1.fatalLog)(`解压失败：${err}`);
        }
    }
    try {
        (0, child_process_1.execSync)(`rm ${target}`, { stdio: 'pipe' });
    }
    catch (err) {
        (0, components_manage_tools_1.warningLog)(`删除压缩包${temporaryPkg}失败：${err}`);
    }
    if (!cmd.skipInstallDep)
        installDep(depends);
    (0, components_manage_tools_1.successLog)(`🎉模板已成功添加，请开始使用吧`);
    process.exit(0);
}
exports.addTemplate = addTemplate;
