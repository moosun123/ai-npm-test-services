"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.remove = void 0;
const fs = __importStar(require("fs"));
const path = __importStar(require("path"));
const cp = __importStar(require("child_process"));
const components_manage_tools_1 = require("@ss/components-manage-tools");
const questions_1 = require("../util/questions");
const buildEntry_1 = require("./buildEntry");
const buildTs_1 = require("./buildTs");
const buildCss_1 = require("./buildCss");
const common_1 = require("../util/common");
async function remove() {
    const programPath = process.cwd();
    const { themes } = fs.existsSync(path.join(programPath, './mtd.config.js')) ? require(path.join(programPath, './mtd.config.js')) : require(path.join(programPath, './config.js'));
    const { technology } = (0, common_1.readProgramConfig)(programPath);
    if (!process.argv[3]) {
        console.error('[组件名]必填 - Please enter new component name');
        process.exit(1);
    }
    const component = process.argv[3];
    const result = await (0, questions_1.askRemoveComponent)(component);
    if (result.isOk) {
        try {
            const componentsPath = path.join(programPath, './components.json');
            const componentsString = fs.readFileSync(componentsPath).toString();
            const componentsJSON = JSON.parse(componentsString);
            delete componentsJSON[component];
            fs.writeFileSync(componentsPath, JSON.stringify(componentsJSON, null, '  '));
        }
        catch (e) {
            (0, components_manage_tools_1.warningLog)(e.toString());
            (0, components_manage_tools_1.fatalLog)('更新components.json失败，请手动清理');
        }
        (0, components_manage_tools_1.successLog)(`update component.json`);
        try {
            const navConfigPath = path.join(programPath, './nav.config.json');
            const navConfigString = fs.readFileSync(navConfigPath).toString();
            const navConfigJSON = JSON.parse(navConfigString);
            for (let i = 0; i < navConfigJSON[0].groups.length; i++) {
                const group = navConfigJSON[0].groups[i];
                for (let k = 0; k < group.list.length; k++) {
                    if (group.list[k].path === component) {
                        navConfigJSON[0].groups[i].list.splice(k, 1);
                    }
                }
            }
            fs.writeFileSync(navConfigPath, JSON.stringify(navConfigJSON, null, '  '));
        }
        catch (e) {
            (0, components_manage_tools_1.warningLog)(e.toString());
            (0, components_manage_tools_1.fatalLog)('更新nav.config.json失败，请手动清理');
        }
        (0, components_manage_tools_1.successLog)(`update nav.config.json`);
        cp.execSync(`rm -rf ./components/${component}`, { cwd: programPath });
        (0, components_manage_tools_1.successLog)(`remove components/${component}`);
        themes.forEach(theme => {
            fs.unlinkSync(path.join(programPath, `./components/${theme}/${component}.scss`));
        });
        (0, components_manage_tools_1.successLog)(`remove components/theme-chalk/${component}.scss`);
        fs.unlinkSync(path.join(programPath, `./types/${component}.d.ts`));
        (0, components_manage_tools_1.successLog)(`remove types/${component}.d.ts`);
        fs.unlinkSync(path.join(programPath, `./tests/unit/${component}.spec.${(0, common_1.getExtFromTechnology)(technology)}`));
        (0, components_manage_tools_1.successLog)(`remove tests/unit/${component}.spec.${(0, common_1.getExtFromTechnology)(technology)}`);
        (0, buildEntry_1.buildEntry)();
        (0, buildTs_1.buildTS)();
        (0, buildCss_1.buildCSS)();
        (0, components_manage_tools_1.successLog)('build complete');
        (0, components_manage_tools_1.successLog)('删除成功✅');
    }
}
exports.remove = remove;
