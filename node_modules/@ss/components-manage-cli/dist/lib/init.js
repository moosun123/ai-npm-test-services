"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.init = void 0;
const prompt_1 = require("./prompt");
const constant_1 = require("../util/constant");
const components_manage_tools_1 = require("@ss/components-manage-tools");
const path = require('path');
const fs = require('fs');
const inquirer = require('inquirer');
const chalk = require('chalk');
const { exec } = require('child_process');
const fetch = require('node-fetch');
const checkProjectName = (dir) => {
    const isExists = fs.existsSync(dir);
    if (isExists) {
        (0, components_manage_tools_1.fatalLog)('project is alreday exits.');
    }
};
async function init() {
    console.log(chalk.green('\n start init project \n'));
    const registerParams = {};
    const token = (0, components_manage_tools_1.checkLogin)();
    console.log(token);
    const name = await getUserInfo(token);
    console.log(name);
    const teamList = await getTeamList(name);
    if (teamList.length === 0) {
        (0, components_manage_tools_1.fatalLog)('未获取到你的团队，请先去component平台创建团队。');
    }
    const teamNameList = [];
    teamList.map((item) => {
        if (item.name) {
            teamNameList.push(item.name);
        }
    });
    const { teamName } = await inquirer.prompt([{ ...prompt_1.teamType, choices: teamNameList }]);
    let teamId;
    teamList.map((item) => {
        if (item.name === teamName) {
            teamId = item.id;
        }
    });
    registerParams['teamId'] = teamId;
    const { type } = await inquirer.prompt(prompt_1.componentType);
    const { componentName } = await inquirer.prompt([{ ...prompt_1.componentNameType, message: constant_1.typeMap[type] === 1 ? 'Please input an componentLibName.' : 'Please input an templateLibName.' }]);
    if (!componentName) {
        (0, components_manage_tools_1.fatalLog)('组件库/模板库名字不能为空。');
    }
    if (componentName.length <= 1) {
        (0, components_manage_tools_1.fatalLog)('组件库/模板库名字至少输入2个字符。');
    }
    if (!/^[a-zA-Z0-9_\\-]+[a-zA-Z0-9]$/.test(componentName)) {
        (0, components_manage_tools_1.fatalLog)('组件库/模板库名字只能输入英文、数字、中划线、下划线。');
    }
    registerParams['name'] = componentName;
    if (constant_1.typeMap[type] === 1) {
        const { npmName } = await inquirer.prompt(prompt_1.nmpNameType);
        if (!npmName) {
            (0, components_manage_tools_1.fatalLog)('npmName不能为空。');
        }
        registerParams['npmName'] = npmName;
    }
    const pickResult = await pick(constant_1.typeMap[type]);
    Object.keys(pickResult).map((item) => {
        registerParams[item] = pickResult[item];
    });
    if (constant_1.typeMap[type] === 1) {
        const { prefix } = await inquirer.prompt(prompt_1.prefixType);
        if (!prefix) {
            (0, components_manage_tools_1.fatalLog)('样式前缀不能为空。');
        }
        if (prefix.length <= 1) {
            (0, components_manage_tools_1.fatalLog)('样式前缀长度至少为2个字符。');
        }
        if (!/^[a-zA-Z_\\-]+[a-zA-Z]$/.test(prefix)) {
            (0, components_manage_tools_1.fatalLog)('样式前缀只能为由英文、中划线、下划线。');
        }
        registerParams['classPrefix'] = prefix;
        registerParams['gitUrl'] = '';
        registerParams['importDoc'] = '';
        registerParams['installDoc'] = '';
    }
    const { description } = await inquirer.prompt(prompt_1.descriptionType);
    registerParams['description'] = description;
    registerParams['componentOrigin'] = 'create';
    registerParams['administrator'] = name;
    const { gitUrl, libId, libName } = await (0, components_manage_tools_1.registerApi)(registerParams, constant_1.materialTypeMap[constant_1.typeMap[type]]);
    if (!gitUrl) {
        (0, components_manage_tools_1.fatalLog)(`create project failed: url不存在.`);
    }
    createApi(gitUrl, libId, constant_1.materialTypeMap[constant_1.typeMap[type]], libName);
}
exports.init = init;
const pick = async (type) => {
    const pickData = {};
    const templateList = await getTemplateList(type);
    if (templateList.length === 0) {
        (0, components_manage_tools_1.fatalLog)('未获取到可用模板列表。');
    }
    const platformList = [];
    templateList.map((item) => {
        if (item.platform && platformList.indexOf(constant_1.platformTextMap[item.platform]) === -1) {
            platformList.push(constant_1.platformTextMap[item.platform]);
        }
    });
    const { platform } = await inquirer.prompt([{ ...prompt_1.platformType, choices: platformList }]);
    pickData['platform'] = platform;
    const techstackList = [];
    templateList.map((item) => {
        if (item.tech_stack && techstackList.indexOf(constant_1.techstackTextMap[item.tech_stack]) === -1 && item.platform === constant_1.platformMap[platform]) {
            techstackList.push(constant_1.techstackTextMap[item.tech_stack]);
        }
    });
    const { techstack } = await inquirer.prompt([{ ...prompt_1.techstackType, choices: techstackList }]);
    pickData['framework'] = techstack;
    const developLangList = [];
    templateList.map((item) => {
        if (item.develop_lang && developLangList.indexOf(constant_1.developTextMap[item.develop_lang]) === -1 && item.platform === constant_1.platformMap[platform] && item.tech_stack === constant_1.techstackMap[techstack]) {
            developLangList.push(constant_1.developTextMap[item.develop_lang]);
        }
    });
    const { developName } = await inquirer.prompt([{ ...prompt_1.developNameType, choices: developLangList }]);
    pickData['developLanguage'] = developName;
    const templateNameList = [];
    templateList.map((item) => {
        if (item.tpl_name && item.platform === constant_1.platformMap[platform] && item.tech_stack === constant_1.techstackMap[techstack] && item.develop_lang === constant_1.developMap[developName]) {
            templateNameList.push(item.tpl_name);
        }
    });
    const { templateName } = await inquirer.prompt([{ ...prompt_1.templateType, choices: templateNameList }]);
    templateList.map((item) => {
        if (item.tpl_name === templateName) {
            pickData['templateId'] = item.id;
        }
    });
    return pickData;
};
const createApi = async (url, libId, libType, projectName) => {
    await checkProjectName(path.join(process.cwd(), projectName));
    exec(`git clone ${url}`, (err, stdout, stderr) => {
        if (err) {
            (0, components_manage_tools_1.fatalLog)(`create project failed: ${err}.`);
        }
        console.log(chalk.green('\n init project success && create project success. \n'));
        console.log(chalk.gray(`\n cd ${projectName} && yarn install. \n`));
        process.exit(0);
    });
};
const getUserInfo = async (token) => {
    const value = await fetch(`${constant_1.envHost}/openapi/getUserName?token=${token}`, {
        method: 'GET',
        headers: {
            "Content-Type": 'application/json',
        },
    });
    const data = await value.json();
    const name = data && data.data;
    return name || '';
};
const getTeamList = async (name) => {
    const value = await fetch(`${constant_1.envHost}/openapi/getTeamListByUser?name=${name}`, {
        method: 'GET',
        headers: {
            "Content-Type": 'application/json',
        },
    });
    const data = await value.json();
    const list = data && data.data;
    return list || [];
};
const getTemplateList = async (type) => {
    const value = await fetch(`${constant_1.envHost}/openapi/getTemplateList?type=${type}`, {
        method: 'GET',
        headers: {
            "Content-Type": 'application/json',
        },
    });
    const data = await value.json();
    const list = data && data.data;
    return list || [];
};
