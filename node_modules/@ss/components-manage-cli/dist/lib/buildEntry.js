"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.buildEntry = void 0;
const common_1 = require("../util/common");
const entry_1 = require("../util/entry");
const fs = require('fs');
const path = require('path');
const upperCamelCase = require('uppercamelcase');
function makeComponentsTemplate(programPath) {
    const components = require(path.join(programPath, './components.json'));
    const importComponentTemplate = [];
    const installTemplate = [];
    const listTemplate = [];
    Object.keys(components).forEach(name => {
        const componentName = upperCamelCase(name);
        const path = components[name];
        importComponentTemplate.push(`import ${componentName} from './${path}';`);
        listTemplate.push(componentName);
        installTemplate.push(componentName);
    });
    const importComponentStr = importComponentTemplate.join('\n');
    const installComponentStr = installTemplate.join(',\n  ') + ',';
    const listComponentStr = listTemplate.join(',\n  ') + ',';
    return {
        listComponentStr,
        importComponentStr,
        installComponentStr,
    };
}
function makeModulesTemplate(programPath) {
    const modulesPath = path.join(programPath, './modules.json');
    let importModuleStr = '';
    let listModuleStr = '';
    if (fs.existsSync(modulesPath)) {
        const modules = require(modulesPath);
        importModuleStr = Object.entries(modules)
            .map(([moduleName, modulePath]) => `import * as ${moduleName} from '${modulePath}';`)
            .join('\n');
        listModuleStr = Object.keys(modules).join(',');
    }
    return {
        listModuleStr,
        importModuleStr,
    };
}
async function buildEntry(options) {
    const programPath = process.cwd();
    if (!process.env.DISABLE_CM_VERSION_INSPECTION) {
    }
    const programConfig = (0, common_1.readProgramConfig)(programPath);
    const OUTPUT_PATH = path.join(programPath, './index.js');
    const tsTemplate = (0, entry_1.tsEntryTemplate)({
        ...makeModulesTemplate(programPath),
        ...makeComponentsTemplate(programPath),
    }, options.customEntry ? true : false);
    const esTemplate = (0, entry_1.esEntryTemplate)({
        ...makeModulesTemplate(programPath),
        ...makeComponentsTemplate(programPath),
    }, options.customEntry ? true : false);
    const entryTemplate = programConfig.technology === 'es' ? esTemplate : tsTemplate;
    fs.writeFileSync(OUTPUT_PATH, entryTemplate);
    console.log('[build entry] DONE:', OUTPUT_PATH);
    process.exit(0);
}
exports.buildEntry = buildEntry;
