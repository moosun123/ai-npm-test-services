"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.publishTemplateLib = exports.prePublish = void 0;
const components_manage_tools_1 = require("@ss/components-manage-tools");
const fetch_1 = require("../util/fetch");
const template_1 = require("../util/template");
const git_1 = require("../util/git");
const common_1 = require("../util/common");
const dependencies_1 = require("../util/dependencies");
const semver_1 = __importDefault(require("semver"));
const inquirer_1 = require("inquirer");
const constant_1 = require("../util/constant");
const git_2 = require("../util/git");
const path = __importStar(require("path"));
const fs = __importStar(require("fs"));
const execa_1 = __importDefault(require("execa"));
const child_process_1 = __importDefault(require("child_process"));
async function askVersion() {
    const pkgPath = path.join(process.cwd(), 'package.json');
    const pkg = JSON.parse(fs.readFileSync(pkgPath, 'utf-8'));
    const currentVersion = pkg.version;
    let targetVersion;
    const releases = constant_1.VERSION_INCREMENTS.map((type) => {
        const preId = type.split(':');
        return `${type} (${semver_1.default.inc(currentVersion, preId[0], preId[1])})`;
    });
    releases.push('custom');
    const { release } = await (0, inquirer_1.prompt)({
        type: 'list',
        name: 'release',
        message: 'Select release type',
        choices: releases,
    });
    if (release === 'custom') {
        targetVersion = (await (0, inquirer_1.prompt)({
            type: 'input',
            name: 'version',
            message: 'Input custom version',
            initial: currentVersion,
        })).version;
    }
    else {
        targetVersion = release.match(/\((.*)\)/)[1];
    }
    if (!semver_1.default.valid(targetVersion)) {
        throw new Error(`invalid target version: ${targetVersion}`);
    }
    return targetVersion;
}
async function checkedBuild() {
    await (0, execa_1.default)('npm', ['run', 'build']);
}
function updatePackage(version) {
    const pkgPath = path.join(process.cwd(), 'package.json');
    const pkg = JSON.parse(fs.readFileSync(pkgPath, 'utf-8'));
    pkg.version = version;
    fs.writeFileSync(pkgPath, JSON.stringify(pkg, null, 2) + '\n');
}
async function prePublish(tl, version, screenshots, entryName, branch) {
    const config = (0, common_1.getProjectConfig)();
    const globalDep = (0, dependencies_1.getGlobalDependencies)(entryName);
    const pkgPath = path.join(process.cwd(), 'package.json');
    const pkg = JSON.parse(fs.readFileSync(pkgPath, 'utf-8'));
    const errors = [];
    const templates = tl.map((tempalteCategory) => {
        return {
            name: tempalteCategory.name,
            cnName: tempalteCategory.cnName,
            templateId: tempalteCategory.id,
            children: tempalteCategory.children.map((template) => {
                if (!template.maintainer) {
                    errors.push(`nav.config.json 文件中，模板： ${template.name} 缺少 'maintainer' 字段值`);
                }
                const dependencies = template.dependencies;
                return {
                    ...template.nav,
                    name: template.name,
                    cnName: template.cnName,
                    screenshots: screenshots[template.key],
                    templateId: template.id,
                    maintainer: template.maintainer,
                    packageDep: {
                        dependencies: Object.assign({}, globalDep.dependencies, dependencies.dependencies),
                        devDependencies: Object.assign({}, globalDep.devDependencies, dependencies.devDependencies),
                    },
                };
            })
        };
    });
    if (errors.length) {
        throw new Error(errors.join('\n'));
    }
    const params = {
        id: config.id,
        name: pkg.name,
        version: version,
        branch: branch || 'master',
        token: (0, components_manage_tools_1.checkLogin)(),
        templates,
    };
    fs.writeFileSync(path.join(process.cwd(), 'component.log'), JSON.stringify(params, null, '  '));
    (0, components_manage_tools_1.publishApi)(params, 'template', true);
}
exports.prePublish = prePublish;
async function publishTemplateLib(options) {
    if (options.skipCheck) {
        options.skipCheckBranch = true;
        options.skipTest = true;
    }
    const cwd = process.cwd();
    const config = (0, common_1.getProjectConfig)();
    const targetVersion = await askVersion();
    const branch = await (0, git_2.checkGitStatus)(cwd, options);
    const { yes } = await (0, inquirer_1.prompt)({
        type: 'confirm',
        name: 'yes',
        message: `Releasing v${targetVersion}. Confirm?`
    });
    if (!yes) {
        return;
    }
    try {
        (0, components_manage_tools_1.checkLogin)();
        if (!options.skipVersion) {
            const data = await (0, fetch_1.checkedVersion)(targetVersion);
            if (data.code !== 0) {
                (0, components_manage_tools_1.fatalLog)(data.message);
            }
        }
        console.log('构建检查中');
        await checkedBuild();
        (0, components_manage_tools_1.successLog)('构建检查成功');
        console.log('模板信息收集中');
        const tl = await (0, template_1.getTemplates)(options.templatePath);
        const flatTemplates = tl.reduce((state, tl) => {
            const children = tl.children;
            state = state.concat(children);
            return state;
        }, []);
        let screenshots = {};
        if (!options.skipScreenshot && config.platform !== 'mobile') {
            const arg = {
                cwd,
                templates: flatTemplates,
                framework: config.framework,
                screenShotsPrefix: constant_1.SCREEN_SHOTS_PREFIX,
                execBuffer: constant_1.execBuffer,
                screenShotsPort: options.screenshotPort,
                materialType: 'templateLib'
            };
            await (0, components_manage_tools_1.startScreenShot)(arg);
            (0, components_manage_tools_1.successLog)('截图生成成功✅');
            (0, components_manage_tools_1.infoLog)('上传截图中✈️');
            screenshots = await (0, components_manage_tools_1.uploadScreenShots)(cwd, flatTemplates, constant_1.SCREEN_SHOTS_PREFIX, 'templateLib');
            child_process_1.default.execSync(`rm -rf ${constant_1.SCREEN_SHOTS_PREFIX}`, { cwd: arg.cwd });
            (0, components_manage_tools_1.successLog)('截图上传成功✅️');
        }
        (0, components_manage_tools_1.successLog)('模板信息收集完成');
        await updatePackage(targetVersion);
        await (0, git_1.commitVersion)(targetVersion);
        await (0, git_1.remoteSync)(targetVersion);
        (0, components_manage_tools_1.successLog)('`git push` 成功');
        await prePublish(tl, targetVersion, screenshots, options.entryName, branch);
        (0, components_manage_tools_1.successLog)('模板库发布中，发布完成后将会在大象上通知您。');
    }
    catch (e) {
        (0, components_manage_tools_1.fatalLog)(e.message);
    }
}
exports.publishTemplateLib = publishTemplateLib;
