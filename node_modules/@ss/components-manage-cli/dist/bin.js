#!/usr/bin/env node
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const init_1 = require("./lib/init");
const buildCss_1 = require("./lib/buildCss");
const buildTs_1 = require("./lib/buildTs");
const buildEntry_1 = require("./lib/buildEntry");
const publish_1 = require("./lib/publish");
const components_manage_tools_1 = require("@ss/components-manage-tools");
const addTemplate_1 = require("./lib/addTemplate");
const lowcode_1 = require("./lib/lowcode");
const buildZip_1 = require("./lib/buildZip");
const coverage_1 = require("./lib/coverage");
const create_1 = require("./lib/create");
const remove_1 = require("./lib/remove");
const commander = require('commander');
commander.version(require('../package.json').version, '-v, --version');
commander.command('login').option('-t, --token <token>').description('login to publish').action(components_manage_tools_1.handleLogin);
commander.command("init").description('init project').action(init_1.init);
commander.command('buildCSS').description('build css').action(buildCss_1.buildCSS);
commander.command('buildEntry').option('--custom-entry').description('build entry').action(buildEntry_1.buildEntry);
commander.command('buildTS').description('build typescript definition').action(buildTs_1.buildTS);
commander.command('publish')
    .option('--skip-check')
    .option('--skip-check-branch')
    .option('-st, --skip-test')
    .option('-sv, --skip-version')
    .option('-ss, --skip-screenshot')
    .option('-ssp, --screenshot-port [screenshotPort]')
    .option('-pnlw, --publish-no-lowcode')
    .option('-plw, --publish-lowcode')
    .option('-pdc, --publish-docs')
    .option('-stack, --publish-tpl-tech-stack [publishTplTechStack]')
    .description('publish a version for componentLib').action(publish_1.publish);
commander.command('addTemplate <templateId> [target] [fileName]')
    .description('add vue template by id')
    .option('-s, --skipInstallDep', 'Skip install dependencies')
    .action(addTemplate_1.addTemplate);
commander.command('buildLowcode').description('build lowcode').action(lowcode_1.buildLowcode);
commander.command('buildLowcodeLocal').action(lowcode_1.buildLowcodeLocal);
commander.command('zip').option('-zph, --zip-path [zipPath]').description('template build zips').action(buildZip_1.buildZip);
commander.command('coverage').description('test coverage').action(coverage_1.coverage);
commander.command('create <componentName> <cnName>').description('create component').action(create_1.create);
commander.command('remove <componentName>').description('remove component').action(remove_1.remove);
commander.parse(process.argv);
