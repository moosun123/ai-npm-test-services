"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.analyzeCompDep = exports.analyzePackageDep = void 0;
const path = __importStar(require("path"));
const fs = __importStar(require("fs"));
const components_manage_tools_1 = require("@ss/components-manage-tools");
const common_1 = require("./common");
const entry_1 = require("./entry");
async function analyzePackageDep(directory) {
    const packageJsonPath = path.join(directory, 'package.json');
    if (!fs.existsSync(packageJsonPath)) {
        (0, components_manage_tools_1.fatalLog)('package.json not exist');
    }
    const value = await fs.readFileSync(packageJsonPath).toString();
    const packageJSON = JSON.parse(value);
    return {
        dependencies: packageJSON.dependencies || {},
        peerDependencies: packageJSON.peerDependencies || {},
    };
}
exports.analyzePackageDep = analyzePackageDep;
async function analyzeCompDep(directory, framework, packageDep) {
    const fileList = (0, common_1.extractFileNameList)(framework);
    return framework === 'vue' ? await (0, entry_1.vueTemplateParser)(fileList, packageDep) : (0, entry_1.reactTemplateParser)(fileList, packageDep);
}
exports.analyzeCompDep = analyzeCompDep;
