"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.reGenerateLockId = exports.updateLockFile = exports.getId = exports.readLock = void 0;
const constant_1 = require("./constant");
const nanoid_1 = require("nanoid");
const path = __importStar(require("path"));
const fs = __importStar(require("fs"));
const nanoid = (0, nanoid_1.customAlphabet)('1234567890abcdefghijklmnopqrstuvwxyz', 21);
function readLock() {
    const file = path.join(process.cwd(), constant_1.LOCK_FILE_NAME);
    const exists = fs.existsSync(file);
    if (!exists) {
        return {};
    }
    try {
        const str = fs.readFileSync(file, { encoding: 'utf-8' });
        const json = str ? JSON.parse(str) : {};
        return json;
    }
    catch (e) {
        console.error(e);
    }
    return {};
}
exports.readLock = readLock;
function writeLock(content) {
    try {
        const file = path.join(process.cwd(), constant_1.LOCK_FILE_NAME);
        fs.writeFileSync(file, content, { encoding: 'utf-8' });
    }
    catch (e) {
        console.error(e);
    }
}
let LOCK_CONTENT;
function getId(categroy, template) {
    if (!LOCK_CONTENT) {
        LOCK_CONTENT = readLock();
    }
    let t = LOCK_CONTENT[categroy];
    if (!t) {
        t = { id: nanoid(), children: {} };
        LOCK_CONTENT[categroy] = t;
    }
    if (!template) {
        return t.id;
    }
    let c = t.children[template];
    if (!c) {
        c = { id: nanoid() };
        t.children[template] = c;
    }
    return c.id;
}
exports.getId = getId;
function updateLockFile() {
    writeLock(JSON.stringify(LOCK_CONTENT, null, '  '));
}
exports.updateLockFile = updateLockFile;
function reGenerateLockId() {
    const lockContent = readLock();
    Object.keys(lockContent).forEach(i => {
        lockContent[i].id = nanoid();
        Object.keys(lockContent[i].children).forEach(j => {
            lockContent[i].children[j].id = nanoid();
        });
    });
    writeLock(JSON.stringify(lockContent, null, '  '));
    console.log('reGenerateLockId success');
}
exports.reGenerateLockId = reGenerateLockId;
