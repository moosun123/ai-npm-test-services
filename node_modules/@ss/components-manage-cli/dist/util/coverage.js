"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.collectCoverage = void 0;
const fs = __importStar(require("fs"));
const path = __importStar(require("path"));
const globby_1 = require("globby");
const jsdom_1 = require("jsdom");
const components_manage_tools_1 = require("@ss/components-manage-tools");
const cp = __importStar(require("child_process"));
function analyzeCoverage(fileName, content) {
    const dom = new jsdom_1.JSDOM(content);
    const coverageNodes = dom.window.document.querySelectorAll('.fl');
    const statement = coverageNodes[0].querySelector('.strong').innerHTML.trim();
    const line = coverageNodes[3].querySelector('.strong').innerHTML.trim();
    let name = fileName === 'index.html' ? 'total' : fileName.split('.')[0].trim();
    if (name.includes('/')) {
        const nameList = name.split('/');
        name = nameList[nameList.length - 1];
    }
    return {
        [name]: {
            statement,
            line,
        },
    };
}
function collectCoverage() {
    try {
        const cwd = process.cwd();
        cp.execSync('npm run test', { cwd });
        const coveragePrefix = path.join(cwd, 'coverage', 'lcov-report');
        const patterns = ['*.vue.html', 'index.html', '**/*.vue.html'];
        const coverageFileNames = (0, globby_1.sync)(patterns, {
            cwd: coveragePrefix,
        });
        let coverage = {};
        for (const fileName of coverageFileNames) {
            const file = path.join(coveragePrefix, fileName);
            const content = fs.readFileSync(file).toString('UTF-8');
            try {
                const coverageItem = analyzeCoverage(fileName, content);
                coverage = {
                    ...coverage,
                    ...coverageItem,
                };
            }
            catch (e) { }
        }
        return coverage;
    }
    catch (e) {
        console.log(e);
        (0, components_manage_tools_1.warningLog)('测试覆盖信息采集失败');
        return {};
    }
}
exports.collectCoverage = collectCoverage;
