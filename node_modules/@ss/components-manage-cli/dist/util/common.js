"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.checkCompiler = exports.chooseNpmTool = exports.getVueVersion = exports.getFrameworkVersion = exports.getMaterialVersion = exports.getFile = exports.getEntry = exports.getProjectConfig = exports.removeNamespace = exports.handleMaintainer = exports.getCMVersion = exports.checkDocAPI = exports.getExtFromTechnology = exports.readProgramConfig = exports.hyphenToCamelCase = exports.formatComponentName = exports.inspectTemplate = exports.toCamelCaseTag = exports.extractFileNameList = void 0;
const fs = __importStar(require("fs"));
const chalk_1 = __importDefault(require("chalk"));
const path = __importStar(require("path"));
const globby_1 = require("globby");
const components_manage_tools_1 = require("@ss/components-manage-tools");
const cp = __importStar(require("child_process"));
const contant_1 = require("../contant");
const { execSync } = require('child_process');
const inquirer = require('inquirer');
function extractFileNameList(framework) {
    const dir = process.cwd();
    const componentsJson = path.join(dir, 'components.json');
    if (!fs.existsSync(componentsJson)) {
        (0, components_manage_tools_1.fatalLog)('components.json不存在');
    }
    const components = JSON.parse(fs.readFileSync(componentsJson).toString());
    const fileList = Object.entries(components)
        .filter(([name]) => name !== 'infoItem')
        .map(([name, file]) => ({
        filePath: path.join(dir, `${file}/${name}.${framework === 'vue' ? 'vue' : 'tsx'}`),
        fileName: name,
    }));
    if (framework === 'vue' && !contant_1.DISABLE_COMPONENT_NAME_INSPECTION) {
        const config = fs.existsSync(path.join(dir, './mtd.config.js')) ? require(path.join(dir, './mtd.config.js')) : require(path.join(dir, './config.js'));
        let namespace;
        if (config.namespace) {
            namespace = config.namespace;
        }
        else {
            namespace = require(path.join(dir, './config.js')).namespace;
        }
        const validComponents = fileList
            .map(item => item.fileName)
            .filter(name => !name.startsWith(namespace));
        if (validComponents.length > 0) {
            (0, components_manage_tools_1.fatalLog)(`下列组件: ${validComponents.join(', ')}命名不符合规范，需要以${namespace}开头`);
        }
    }
    return fileList;
}
exports.extractFileNameList = extractFileNameList;
function toCamelCaseTag(tag) {
    return tag
        .replace(/-(\w)/g, (_, b) => b.toUpperCase())
        .replace(/^\w/, (a) => a.toUpperCase());
}
exports.toCamelCaseTag = toCamelCaseTag;
function inspectTemplate() {
    const directory = process.cwd();
    const templateJSONPath = path.join(directory, './template.json');
    if (!fs.existsSync(templateJSONPath)) {
        throw new Error('template.json不存在，请前往业务组件管理平台注册 🌚');
    }
    const templateStr = fs.readFileSync(templateJSONPath).toString();
    let templateJSON;
    try {
        templateJSON = JSON.parse(templateStr);
    }
    catch (e) {
        throw new Error('template.json文件JSON反序列化失败');
    }
    if (!templateJSON.id) {
        throw new Error('id not found in template.json');
    }
    if (!templateJSON.framework) {
        throw new Error('framework not found in template.json');
    }
    if (!['vue', 'react'].includes(templateJSON.framework)) {
        throw new Error('framework字段只能为vue或react');
    }
    return templateJSON;
}
exports.inspectTemplate = inspectTemplate;
function formatComponentName(name) {
    return name.split('/').pop().split('.')[0];
}
exports.formatComponentName = formatComponentName;
function hyphenToCamelCase(content) {
    return content.replace(/-([a-z])/g, g => g[1].toUpperCase());
}
exports.hyphenToCamelCase = hyphenToCamelCase;
function readProgramConfig(program) {
    const defaultConfig = {
        framework: 'vue',
        technology: 'ts',
        platform: 'pc',
    };
    try {
        const templatePath = path.join(program, './template.json');
        const templateStr = fs.readFileSync(templatePath).toString();
        const templateObj = JSON.parse(templateStr);
        return {
            framework: templateObj.framework || defaultConfig.framework,
            technology: templateObj.technology || defaultConfig.technology,
            platform: templateObj.platform || defaultConfig.platform,
        };
    }
    catch (e) {
        return defaultConfig;
    }
}
exports.readProgramConfig = readProgramConfig;
function getExtFromTechnology(technology) {
    return technology === 'es' ? 'js' : 'ts';
}
exports.getExtFromTechnology = getExtFromTechnology;
function checkDocAPI(cwd) {
    const componentsPath = path.join(cwd, './components');
    const patterns = ['*/doc/api.json'];
    const fileNameList = (0, globby_1.sync)(patterns, {
        cwd: componentsPath,
    });
    const fileList = fileNameList
        .filter(name => !name.includes('infoItem'))
        .map(file => path.join(cwd, './components', file));
    const withoutMaintainerFiles = [];
    const withoutCNNameFiles = [];
    fileList.forEach(file => {
        try {
            const content = fs.readFileSync(file).toString();
            const doc = JSON.parse(content);
            if (Array.isArray(doc)) {
                if (!doc[0].cnName) {
                    withoutCNNameFiles.push(file);
                }
                if (!doc[0].maintainer) {
                    withoutMaintainerFiles.push(file);
                }
            }
            else {
                if (!doc.cnName) {
                    withoutCNNameFiles.push(file);
                }
                if (!doc.maintainer) {
                    withoutMaintainerFiles.push(file);
                }
            }
        }
        catch (e) { }
    });
    if (withoutCNNameFiles.length > 0 || withoutMaintainerFiles.length > 0) {
        if (withoutCNNameFiles.length > 0) {
            console.log(chalk_1.default.redBright(`*********************************************`));
            console.log(chalk_1.default.redBright(`请为下列文件补充组件中文名称，对应的字段为cnName:`));
            withoutCNNameFiles.forEach(file => {
                console.log(chalk_1.default.redBright(file));
            });
        }
        if (withoutMaintainerFiles.length > 0) {
            console.log(chalk_1.default.redBright(`************************************************`));
            console.log(chalk_1.default.redBright(`请为下列文件补充组件维护者信息，对应的字段为maintainer:`));
            withoutMaintainerFiles.forEach(file => {
                console.log(chalk_1.default.redBright(file));
            });
        }
        process.exit(1);
    }
}
exports.checkDocAPI = checkDocAPI;
function getCMVersion() {
    try {
        const value = cp.execSync('npm list @ss/mtd-manage-commander', {
            encoding: 'utf-8',
        });
        const regExp = /@ss\/mtd-manage-commander@([\w\d\.-]+)\s/;
        const result = regExp.exec(value);
        if (result) {
            return result[1];
        }
        return '';
    }
    catch (e) {
        return '';
    }
}
exports.getCMVersion = getCMVersion;
function handleMaintainer(maintainer) {
    const homeDir = process.env['HOME'];
    const maintainerFileName = path.join(homeDir, '.mtdBCLastOwner');
    if (maintainer) {
        fs.writeFileSync(maintainerFileName, maintainer);
        return maintainer;
    }
    if (fs.existsSync(maintainerFileName)) {
        return fs.readFileSync(maintainerFileName).toString();
    }
    return '';
}
exports.handleMaintainer = handleMaintainer;
function kebabize(content) {
    return content
        .split('')
        .map((letter, idx) => {
        return letter.toUpperCase() === letter ? `${idx !== 0 ? '-' : ''}${letter.toLowerCase()}` : letter;
    })
        .join('');
}
function removeNamespace(namespace, componentName) {
    if (componentName.startsWith(namespace)) {
        const nameWithoutPrefix = componentName.replace(namespace, '');
        if (nameWithoutPrefix.startsWith('-')) {
            return kebabize(nameWithoutPrefix.slice(1));
        }
        return kebabize(nameWithoutPrefix);
    }
    return kebabize(componentName);
}
exports.removeNamespace = removeNamespace;
let configCache;
function getProjectConfig() {
    if (configCache) {
        return configCache;
    }
    const directory = process.cwd();
    const templateJSONPath = path.join(directory, './template.json');
    if (!fs.existsSync(templateJSONPath)) {
        throw new Error('template.json不存在，请前往业务组件管理平台注册 🌚');
    }
    try {
        const config = require(templateJSONPath);
        checkProjectConfig(config);
        configCache = config;
    }
    catch (e) {
        throw e;
    }
    return configCache;
}
exports.getProjectConfig = getProjectConfig;
function checkProjectConfig(config) {
    if (!config.id) {
        throw new Error('id not found in template.json');
    }
}
function getEntry(config) {
    return path.join(process.cwd(), 'src', config);
}
exports.getEntry = getEntry;
function getFile(file) {
    let dir = '';
    let fileName = '';
    const exists = fs.existsSync(file);
    if (exists) {
        const stats = fs.statSync(file);
        if (stats.isDirectory()) {
            dir = file;
            fileName = 'index';
        }
        else {
            return file;
        }
    }
    else {
        const ps = file.split(path.sep);
        dir = ps.slice(0, ps.length - 1).join(path.sep);
        fileName = ps[ps.length - 1];
    }
    const dirChildrens = fs.readdirSync(dir);
    const f = dirChildrens.find((name) => name.indexOf(fileName) === 0);
    if (!f) {
        throw new Error(`unable find file with path: ${file}`);
    }
    return path.join(dir, f);
}
exports.getFile = getFile;
function getMaterialVersion() {
    const npmInfo = require(path.join(process.cwd(), './node_modules/@ss/type-material/package.json'));
    return npmInfo.version;
}
exports.getMaterialVersion = getMaterialVersion;
function getFrameworkVersion(framework) {
    var _a, _b;
    const npmInfo = require(path.join(process.cwd(), 'package.json'));
    const reg = /[\^*~]/g;
    switch (framework) {
        case 'vue':
            return (_a = npmInfo.devDependencies.vue) === null || _a === void 0 ? void 0 : _a.replace(reg, '');
        case 'react':
            return (_b = npmInfo.devDependencies.react) === null || _b === void 0 ? void 0 : _b.replace(reg, '');
    }
}
exports.getFrameworkVersion = getFrameworkVersion;
function getVueVersion() {
    let Vue;
    try {
        Vue = require('vue');
    }
    catch (e) {
        console.log(chalk_1.default.gray('未检测到 Vue'));
        process.exit(1);
    }
    const vueVersion = Vue === null || Vue === void 0 ? void 0 : Vue.version;
    let vueVersionMap = 1;
    if (vueVersion && vueVersion.startsWith('2.')) {
        vueVersionMap = 2;
    }
    if (vueVersion && vueVersion.startsWith('3.')) {
        vueVersionMap = 3;
    }
    return { vueVersion, vueVersionMap };
}
exports.getVueVersion = getVueVersion;
async function chooseNpmTool() {
    const tools = await inquirer.prompt({
        type: 'list',
        message: '请选择你的依赖管理工具',
        name: 'type',
        choices: [
            'yarn',
            'npm',
            '其他',
        ]
    });
    switch (tools.type) {
        case 'yarn':
            return `yarn add`;
        case 'npm':
            return `npm install`;
        default:
            console.log(chalk_1.default.redBright('请手动安装上述模板编译工具后重新执行命令'));
            process.exit(1);
    }
}
exports.chooseNpmTool = chooseNpmTool;
async function checkCompiler(vueVersion, vueVersionMap) {
    switch (vueVersionMap) {
        case 3:
            const vueCompilerSfcPath = path.join(process.cwd(), 'node_modules', '@vue', 'compiler-sfc');
            try {
                fs.statSync(vueCompilerSfcPath);
            }
            catch (error) {
                console.log(chalk_1.default.blueBright(`检测到您的 Vue 版本为${vueVersion}, 需要安装对应模版编译工具 @vue/compiler-sfc`));
                const cmd = await chooseNpmTool();
                console.log(chalk_1.default.greenBright(`开始安装@vue/compiler-sfc@${vueVersion}...`));
                execSync(`${cmd} @vue/compiler-sfc@${vueVersion}`);
            }
            break;
        default:
            const vueTemplateCompilerPath = path.join(process.cwd(), 'node_modules', 'vue-template-compiler');
            try {
                fs.statSync(vueTemplateCompilerPath);
            }
            catch (error) {
                console.log(chalk_1.default.blueBright(`检测到您的 Vue 版本为${vueVersion}, 请安装对应模版编译工具 vue-template-compiler 后重新执行命令`));
                const cmd = await chooseNpmTool();
                console.log(chalk_1.default.greenBright(`开始安装vue-template-compiler@${vueVersion}...`));
                execSync(`${cmd} vue-template-compiler@${vueVersion}`);
            }
            break;
    }
}
exports.checkCompiler = checkCompiler;
