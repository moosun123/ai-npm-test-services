"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.remoteSync = exports.commitVersion = exports.getBranch = exports.checkGitStatus = exports.gitURL = exports.getCurrentBranch = exports.lastCommit = exports.gitStatusMessage = void 0;
const components_manage_tools_1 = require("@ss/components-manage-tools");
const cp = __importStar(require("child_process"));
const questions_1 = require("./questions");
async function gitBranch(cwd) {
    return await new Promise((resolve, reject) => {
        const server = cp.exec('git rev-parse --abbrev-ref HEAD', { cwd, maxBuffer: components_manage_tools_1.execBuffer });
        server.stdout.on('data', function (log) {
            var _a;
            resolve((_a = log === null || log === void 0 ? void 0 : log.trim()) !== null && _a !== void 0 ? _a : '');
        });
        server.once('error', function (error) {
            reject(error.toString());
        });
    });
}
async function gitStatusMessage(cwd) {
    return await new Promise((resolve, reject) => {
        const server = cp.exec('git status', { cwd, maxBuffer: components_manage_tools_1.execBuffer });
        server.stdout.on('data', function (log) {
            resolve(log || '');
        });
        server.once('error', function (error) {
            reject(error.toString());
        });
    });
}
exports.gitStatusMessage = gitStatusMessage;
async function lastCommit(cwd) {
    try {
        const message = await new Promise((resolve, reject) => {
            const server = cp.exec('git log --format="%H" -n 1', { cwd, maxBuffer: components_manage_tools_1.execBuffer });
            server.stdout.on('data', function (log) {
                resolve(log || '');
            });
            server.once('error', function (error) {
                reject(error.toString());
            });
        });
        return message.trim();
    }
    catch (e) {
        throw new Error(e.toString());
    }
}
exports.lastCommit = lastCommit;
async function getCurrentBranch() {
    try {
        return await new Promise((resolve, reject) => {
            const server = cp.exec('git rev-parse --abbrev-ref HEAD', { maxBuffer: components_manage_tools_1.execBuffer });
            server.stdout.on('data', function (log) {
                resolve(log || '');
            });
            server.once('error', function (error) {
                reject(error.toString());
            });
        });
    }
    catch (e) {
        throw new Error(e.toString());
    }
}
exports.getCurrentBranch = getCurrentBranch;
async function gitURL(cwd) {
    try {
        const message = await new Promise((resolve, reject) => {
            const server = cp.exec('git remote -v', { cwd, maxBuffer: components_manage_tools_1.execBuffer });
            server.stdout.on('data', function (log) {
                resolve(log || '');
            });
            server.once('error', function (error) {
                reject(error.toString());
            });
        });
        return message.split('(fetch)')[0].trim().split('\t')[1].trim();
    }
    catch (e) {
        throw new Error(e.toString());
    }
}
exports.gitURL = gitURL;
async function checkGitStatus(cwd, options = {}) {
    const branch = await gitBranch(cwd);
    const message = await gitStatusMessage(cwd);
    if (!options.skipCheckBranch && branch !== 'master') {
        const result = await (0, questions_1.askReleaseOnNotMasterBranch)(branch);
        if (!result.isOk) {
            process.exit(0);
        }
    }
    if (message.includes(' to publish your local commits')) {
        const result = await (0, questions_1.askGitNotPush)();
        if (!result.isOk) {
            (0, components_manage_tools_1.fatalLog)('当前本地有未push的commit，请push再进行发布');
        }
    }
    if (message.includes('git checkout -- <file>...')) {
        const result = await (0, questions_1.askGitNotCommit)();
        if (!result.isOk) {
            process.exit(0);
        }
    }
    return branch;
}
exports.checkGitStatus = checkGitStatus;
const execa_1 = __importDefault(require("execa"));
async function getBranch() {
    const { stdout: branch } = await (0, execa_1.default)('git', ['symbolic-ref', '--short', '-q', 'HEAD']);
    return branch;
}
exports.getBranch = getBranch;
async function commitVersion(version) {
    await (0, execa_1.default)('git', ['add', '.']);
    await (0, execa_1.default)('git', ['commit', '-m', `feat: release v${version}`]);
}
exports.commitVersion = commitVersion;
async function remoteSync(version) {
    await (0, execa_1.default)('git', ['tag', `v${version}`]);
    await (0, execa_1.default)('git', ['push', 'origin', `refs/tags/v${version}`]);
    await (0, execa_1.default)('git', ['push']);
}
exports.remoteSync = remoteSync;
