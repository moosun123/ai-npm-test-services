"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.buildZips = void 0;
const template_1 = require("./template");
const execa_1 = __importDefault(require("execa"));
const path = __importStar(require("path"));
const constant_1 = require("./constant");
const fs = __importStar(require("fs"));
async function zip(template, targetDir) {
    const f = `./${template.id}.tar.gz`;
    const pathDir = path.join(template.path, '..');
    await (0, execa_1.default)('tar', ['-C', pathDir, '-zcvf', f, template.name]);
    await (0, execa_1.default)('mv', [f, targetDir]);
    process.exit(0);
}
const buildZips = async function (options, dist = constant_1.ZIP_DIR) {
    const templates = await (0, template_1.getTemplates)(options.zipPath);
    if (!fs.existsSync(dist)) {
        fs.mkdirSync(dist);
    }
    templates.forEach((td) => {
        td.children.forEach(async (template) => {
            await zip(template, dist);
        });
    });
};
exports.buildZips = buildZips;
