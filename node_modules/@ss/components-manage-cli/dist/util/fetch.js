"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.checkedVersion = exports.uploadSketchInverseInfo = exports.uploadSketchComponentLibInfo = exports.getCMLatestVersion = exports.commitReleaseVersion = exports.confirmReleaseVersion = exports.confirmVersionValid = exports.lastReleaseVersion = exports.uploadMockInfo = exports.uploadDepInfo = void 0;
const fs = __importStar(require("fs"));
const path = __importStar(require("path"));
const components_manage_tools_1 = require("@ss/components-manage-tools");
const cp = __importStar(require("child_process"));
const questions_1 = require("./questions");
const common_1 = require("./common");
const constant_1 = require("../util/constant");
const fetch = require('node-fetch');
const chalk = require('chalk');
async function uploadDepInfo(data) {
    const stringData = JSON.stringify(data);
    const value = await fetch(`${constant_1.envHost}/openapi/publish`, {
        method: 'POST',
        body: stringData,
        headers: {
            'Content-Type': 'application/json',
        },
    });
    const res = await value.json();
    if (res.code !== 0) {
        (0, components_manage_tools_1.fatalLog)(res.message);
    }
    else {
        console.log(chalk.green(`组件库发布中，发布完成后将会在大象上通知您。组件库地址: ${constant_1.envHost}/astro/material/lib/${data.id}`));
        process.exit(0);
    }
}
exports.uploadDepInfo = uploadDepInfo;
async function uploadMockInfo(data) {
    const stringData = JSON.stringify(data);
    const value = await fetch(`${constant_1.envHost}/openapi/repair`, {
        method: 'POST',
        body: stringData,
        headers: {
            'Content-Type': 'application/json',
        },
    });
    const res = await value.json();
    if (res.code !== 0) {
        (0, components_manage_tools_1.fatalLog)(res.message);
    }
    else {
        console.log(chalk.green(`组件库发布中，发布完成后将会在大象上通知您。组件库地址: ${constant_1.envHost}/astro/material/lib/${data.id}`));
    }
}
exports.uploadMockInfo = uploadMockInfo;
async function lastReleaseVersion(id) {
    try {
        const value = await fetch(`${constant_1.envHost}/openapi/lastVersion?id=${id}`);
        const res = await value.json();
        if (res.code === 0) {
            return res.version;
        }
        else {
            console.info(chalk.red('请求最新版本接口失败，请联系wanganxu'));
            (0, components_manage_tools_1.fatalLog)(res.message);
        }
    }
    catch (e) {
        console.info(chalk.red('请求最新版本接口失败，请联系wanganxu'));
        (0, components_manage_tools_1.fatalLog)(e.message);
    }
}
exports.lastReleaseVersion = lastReleaseVersion;
async function confirmVersionValid(payload) {
    try {
        const value = await fetch(`${constant_1.envHost}/openapi/available/version`, {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify(payload),
        });
        const res = await value.json();
        if (res.code === 0) {
            if (!res.status) {
                (0, components_manage_tools_1.fatalLog)('当前版本已经发布过了，请重新发布');
            }
        }
        else {
            console.info(chalk.red('请求可用版本接口失败，请联系wanganxu'));
            (0, components_manage_tools_1.fatalLog)(res.message);
        }
    }
    catch (e) {
        console.info(chalk.red('请求可用版本接口失败，请联系wanganxu'));
        (0, components_manage_tools_1.fatalLog)(e.toString());
    }
}
exports.confirmVersionValid = confirmVersionValid;
async function confirmReleaseVersion(payload) {
    const { id, lastVersion } = payload;
    const currentVersion = await (0, questions_1.askVersion)(lastVersion);
    await confirmVersionValid({
        id,
        version: currentVersion,
    });
    const cwd = process.cwd();
    const packageJSONPath = path.join(cwd, 'package.json');
    let packageJSON = fs.readFileSync(packageJSONPath).toString();
    const versionRegExp = /"version":\s".+",/;
    packageJSON = packageJSON.replace(versionRegExp, () => `"version": "${currentVersion}",`);
    fs.writeFileSync(packageJSONPath, packageJSON);
    return currentVersion;
}
exports.confirmReleaseVersion = confirmReleaseVersion;
async function commitReleaseVersion(payload) {
    const { version, branch } = payload;
    const r = cp.spawnSync(`git add . && git commit -m "feature: release ${version}" && git push --set-upstream origin ${branch}`, {
        cwd: process.cwd(),
        shell: true,
    });
    if (!!r.status) {
        console.error(r.output.toString());
        process.exit(1);
    }
}
exports.commitReleaseVersion = commitReleaseVersion;
async function getCMLatestVersion() {
    try {
        const value = await fetch(`${constant_1.envHost}/openapi/cm-version`, {
            method: 'GET',
            headers: {
                'Content-Type': 'application/json',
            },
        });
        const res = await value.json();
        if (res.code === 0) {
            return res.data;
        }
        else {
            (0, components_manage_tools_1.fatalLog)(res.message);
        }
    }
    catch (e) {
        console.info(chalk.red('请求cm最新版本接口失败，请联系wanganxu'));
        (0, components_manage_tools_1.fatalLog)(e.toString());
    }
}
exports.getCMLatestVersion = getCMLatestVersion;
async function uploadSketchComponentLibInfo(data) {
    try {
        const value = await fetch(`${constant_1.envHost}/openapi/publishSketchComponent`, {
            method: 'POST',
            body: JSON.stringify(data),
            headers: {
                'Content-Type': 'application/json',
            },
        });
        const res = await value.json();
        if (res.code !== 0) {
            (0, components_manage_tools_1.fatalLog)(JSON.stringify(res.message));
        }
        else {
            console.log(chalk.green(res.message || `Sketch组件库发布成功～`));
        }
    }
    catch (e) {
        console.info(chalk.red('sketchComponent publish failed，请联系zhongjiahao02'));
        (0, components_manage_tools_1.fatalLog)(e.toString());
    }
}
exports.uploadSketchComponentLibInfo = uploadSketchComponentLibInfo;
async function uploadSketchInverseInfo(data) {
    try {
        const value = await fetch(`${constant_1.envHost}/openapi/publishSketchInverse`, {
            method: 'POST',
            body: JSON.stringify(data),
            headers: {
                'Content-Type': 'application/json',
            },
        });
        const res = await value.json();
        if (res.code !== 0) {
            (0, components_manage_tools_1.fatalLog)(JSON.stringify(res.message));
        }
        else {
            console.log(chalk.green(res.message || `Sketch Inverse发布成功～`));
        }
    }
    catch (e) {
        console.info(chalk.red('sketch inverse publish failed，请联系zhongjiahao02'));
        (0, components_manage_tools_1.fatalLog)(e.toString());
    }
}
exports.uploadSketchInverseInfo = uploadSketchInverseInfo;
async function checkedVersion(version) {
    const config = (0, common_1.getProjectConfig)();
    const params = {
        version,
        token: (0, components_manage_tools_1.checkLogin)(),
        id: config.id
    };
    const response = await fetch(`${constant_1.envHost}/openapi/template/version/check`, {
        method: 'POST',
        body: JSON.stringify(params),
        headers: {
            'Content-Type': 'application/json',
        },
    });
    const res = await response.json();
    return res;
}
exports.checkedVersion = checkedVersion;
