import * as fs from 'fs';
import * as path from 'path';
import * as cp from 'child_process';
import { fatalLog, successLog, warningLog } from '@ss/components-manage-tools';
import { askRemoveComponent } from '../util/questions';
import { buildEntry } from './buildEntry';
import { buildTS } from './buildTs';
import { buildCSS } from './buildCss';
import { getExtFromTechnology, readProgramConfig } from '../util/common';

export async function remove() {
    const programPath = process.cwd();
    const { themes } = fs.existsSync(path.join(programPath, './mtd.config.js')) ? require(path.join(programPath, './mtd.config.js')) : require(path.join(programPath, './config.js'));
    const { technology } = readProgramConfig(programPath);
    if (!process.argv[3]) {
        console.error('[组件名]必填 - Please enter new component name');
        process.exit(1);
    }
    const component: string = process.argv[3];
    const result = await askRemoveComponent(component);
    if (result.isOk) {
        // 修改components.json
        try {
            const componentsPath = path.join(programPath, './components.json');
            const componentsString = fs.readFileSync(componentsPath).toString();
            const componentsJSON = JSON.parse(componentsString);
            delete componentsJSON[component];
            fs.writeFileSync(componentsPath, JSON.stringify(componentsJSON, null, '  '));
        } catch (e) {
            warningLog(e.toString());
            fatalLog('更新components.json失败，请手动清理');
        }
        successLog(`update component.json`);

        // 修改nav.config.json
        try {
            const navConfigPath = path.join(programPath, './nav.config.json');
            const navConfigString = fs.readFileSync(navConfigPath).toString();
            const navConfigJSON = JSON.parse(navConfigString);
            for (let i = 0; i < navConfigJSON[0].groups.length; i++) {
                const group = navConfigJSON[0].groups[i];
                for (let k = 0; k < group.list.length; k++) {
                    if (group.list[k].path === component) {
                        navConfigJSON[0].groups[i].list.splice(k, 1);
                    }
                }
            }
            fs.writeFileSync(navConfigPath, JSON.stringify(navConfigJSON, null, '  '));
        } catch (e) {
            warningLog(e.toString());
            fatalLog('更新nav.config.json失败，请手动清理');
        }
        successLog(`update nav.config.json`);

        // 删除组件文件夹
        cp.execSync(`rm -rf ./components/${component}`, { cwd: programPath });
        successLog(`remove components/${component}`);

        // 删除样式文件
        themes.forEach(theme => {
            fs.unlinkSync(path.join(programPath, `./components/${theme}/${component}.scss`));
        });
        successLog(`remove components/theme-chalk/${component}.scss`);

        // 删除类型定义文件
        fs.unlinkSync(path.join(programPath, `./types/${component}.d.ts`));
        successLog(`remove types/${component}.d.ts`);

        // 删除测试文件
        fs.unlinkSync(path.join(programPath, `./tests/unit/${component}.spec.${getExtFromTechnology(technology)}`));
        successLog(`remove tests/unit/${component}.spec.${getExtFromTechnology(technology)}`);
        buildEntry();
        buildTS();
        buildCSS();
        successLog('build complete');
        successLog('删除成功✅');
    }
}