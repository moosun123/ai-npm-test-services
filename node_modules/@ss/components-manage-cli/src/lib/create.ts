import * as fs from 'fs';
import * as path from 'path';
import { buildTS } from './buildTs';
import { buildCSS } from './buildCss';
import { buildEntry } from './buildEntry';
import { removeNamespace, getExtFromTechnology, handleMaintainer, readProgramConfig } from '../util/common';
import {
    esComponentTemplate,
    esDemoTemplate,
    esRegistryTemplate,
    tsComponentTemplate,
    tsDemoTemplate,
    tsRegistryTemplate,
    typeDefTemplate,
    testTemplate,
    componentDocTemplate,
    sassTemplate,
} from '../util/template';
import { fatalLog } from '@ss/components-manage-tools';
import { DISABLE_COMPONENT_NAME_INSPECTION } from '../contant';

const upperCamelCase = require('uppercamelcase');

export function create() {
    const programPath = process.cwd();
    const { technology } = readProgramConfig(programPath);

    process.on('exit', () => {
        console.log();
    });

    if (!process.argv[3]) {
        fatalLog('[组件名]必填 - Please enter new component name');
    }

    if (!process.argv[4]) {
        fatalLog('[组件中文名]必填 - Please enter new component cn name');
    }
    const maintainer = handleMaintainer(process.argv[5] || '');

    const { namespace, themes } = fs.existsSync(path.join(programPath, './mtd.config.js')) ? require(path.join(programPath, './mtd.config.js')) : require(path.join(programPath, './config.js'));
    const ComponentsFile = require(path.join(programPath, './components.json'));

    const componentName = process.argv[3];
    const chineseName = process.argv[4] || '';

    if (!DISABLE_COMPONENT_NAME_INSPECTION) {
        let cmpNamespace;
        if (namespace) {
            cmpNamespace = namespace;
        } else {
            cmpNamespace = require(path.join(programPath, './config.js')).namespace;
        }
        if (!componentName.startsWith(cmpNamespace)) {
            fatalLog(`组件名称必须以${cmpNamespace}开头,当前填写的组件名为${componentName}`);
        }
    }

    function resolve(...dirs) {
        return path.join(programPath, ...dirs);
    }

    function createComponentPackage(name) {
        return function (...dirs) {
            return resolve('components', name, ...dirs);
        };
    }

    function saveFile(file, content) {
        const dir = path.dirname(file);
        if (!fs.existsSync(dir)) {
            fs.mkdirSync(dir);
        }
        fs.writeFileSync(file, content + '\n');
        console.log('save file: ', file, ' done');
    }

    const exportName = upperCamelCase(componentName);
    const resolvePackage = createComponentPackage(componentName);

    if (ComponentsFile[componentName]) {
        console.error(`${componentName} 已存在.`);
        process.exit(1);
    }
    // 添加到 components.json
    ComponentsFile[componentName] = `components/${componentName}`;
    saveFile(resolve('components.json'), JSON.stringify(ComponentsFile, null, '  '));
    const nameWithoutPrefix = removeNamespace(namespace, componentName);
    const componentClassName = `${namespace}-${nameWithoutPrefix}`;
    // 初始化组件相关文件
    const Files = [
        {
            file: resolvePackage(technology === 'es' ? 'index.js' : 'index.ts'),
            content:
                technology === 'es'
                    ? esRegistryTemplate(exportName, componentName)
                    : tsRegistryTemplate(exportName, componentName),
        },
        {
            file: resolvePackage(`${componentName}.vue`),
            content:
                technology === 'es'
                    ? esComponentTemplate(exportName, componentClassName)
                    : tsComponentTemplate(exportName, componentClassName),
        },
        {
            file: resolve(`components/${componentName}/doc/demo.vue`),
            content: technology === 'es' ? esDemoTemplate(exportName) : tsDemoTemplate(exportName),
        },
        {
            file: resolve(`types/${componentName}.d.ts`),
            content: typeDefTemplate(exportName),
        },
        {
            file: resolve(`components/${componentName}/doc/api.json`),
            content: componentDocTemplate(componentName, chineseName, maintainer),
        },
    ];

    themes.forEach(theme => {
        Files.push({
            file: resolve('components', theme, `${componentName}.scss`),
            content: sassTemplate(removeNamespace(namespace, componentName)),
        });
    });

    // 更新index.scss文件
    Files.push({
        file: resolve('components/theme-chalk/index.scss'),
        content: `${fs.readFileSync(resolve('components/theme-chalk/index.scss'), 'utf-8')}@import "./${componentName}.scss";`,
    });

    Files.forEach(file => {
        saveFile(file.file, file.content);
    });

    fs.mkdirSync(resolve('components', componentName, 'components'));

    // 添加到 nav.config.json
    const navConfigFile = require(resolve('nav.config.json'));

    function findComponentConfig(navConfig) {
        return navConfig.find(nav => nav.path === '/components');
    }

    const componentNavs = findComponentConfig(navConfigFile);
    // 添加到最后一个 group 中
    const { groups } = componentNavs;
    groups[groups.length - 1].list.push({
        path: componentName,
        name: exportName,
        cnName: chineseName,
    });

    saveFile(resolve('nav.config.json'), JSON.stringify(navConfigFile, null, '  '));
    const testFileName = `tests/unit/${componentName}.spec.${getExtFromTechnology(technology)}`;
    fs.writeFileSync(resolve(testFileName), testTemplate(exportName, componentName));

    buildEntry();
    buildTS();
    buildCSS();

    console.log(`[success]文件生成完成，可以进入components/${componentName}文件夹开发组件啦🌞`);
}