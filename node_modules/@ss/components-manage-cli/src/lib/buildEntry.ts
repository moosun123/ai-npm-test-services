import { readProgramConfig } from '../util/common';
import { esEntryTemplate, tsEntryTemplate } from '../util/entry';
import { getCMLatestVersion } from '../util/fetch';
import chalk from 'chalk';

const fs = require('fs');
const path = require('path');
const upperCamelCase = require('uppercamelcase');

function makeComponentsTemplate(programPath) {
    const components = require(path.join(programPath, './components.json'));
    const importComponentTemplate = [];
    const installTemplate = [];
    const listTemplate = [];
    Object.keys(components).forEach(name => {
        const componentName = upperCamelCase(name);
        const path = components[name];
        importComponentTemplate.push(`import ${componentName} from './${path}';`);
        listTemplate.push(componentName);
        installTemplate.push(componentName);
    });

    const importComponentStr = importComponentTemplate.join('\n');
    // 为最后一行加上尾逗号，防止报错
    const installComponentStr = installTemplate.join(',\n  ') + ',';
    const listComponentStr = listTemplate.join(',\n  ') + ',';
    return {
        listComponentStr,
        importComponentStr,
        installComponentStr,
    };
}

function makeModulesTemplate(programPath) {
    const modulesPath = path.join(programPath, './modules.json');
    let importModuleStr = '';
    let listModuleStr = '';
    if (fs.existsSync(modulesPath)) {
        const modules = require(modulesPath);
        importModuleStr = Object.entries(modules)
            .map(([moduleName, modulePath]) => `import * as ${moduleName} from '${modulePath}';`)
            .join('\n');
        listModuleStr = Object.keys(modules).join(',');
    }
    return {
        listModuleStr,
        importModuleStr,
    };
}

export async function buildEntry(options?: any) {
    const programPath = process.cwd();
    if (!process.env.DISABLE_CM_VERSION_INSPECTION) {
        // const latestCMVersion = await getCMLatestVersion();
        // const packageJSON = fs.readFileSync(path.join(programPath, './package.json')).toString();
        // const packageJSONObj = JSON.parse(packageJSON);
        // let cmVersion = packageJSONObj.devDependencies['@ss/components-manage-cli'];
        // if (cmVersion.startsWith('^')) {
        //     cmVersion = cmVersion.split('').slice(1).join('');
        // }
        // if (latestCMVersion !== cmVersion) {
        //     console.log(
        //         chalk.yellowBright(
        //             `当前命令行工具版本为${cmVersion}, 最新的为${latestCMVersion}, 请执行命令 'yarn add @ss/mtd-manage-commander@latest --registry=http://r.npm.snakuai.com' 进行升级`,
        //         ),
        //     );
        // }
    }
    const programConfig = readProgramConfig(programPath);
    const OUTPUT_PATH = path.join(programPath, './index.js');
    
    const tsTemplate = tsEntryTemplate({
        ...makeModulesTemplate(programPath),
        ...makeComponentsTemplate(programPath),
    }, options.customEntry ? true : false);

    const esTemplate = esEntryTemplate({
        ...makeModulesTemplate(programPath),
        ...makeComponentsTemplate(programPath),
    }, options.customEntry ? true : false);

    const entryTemplate = programConfig.technology === 'es' ? esTemplate : tsTemplate;

    fs.writeFileSync(OUTPUT_PATH, entryTemplate);
    console.log('[build entry] DONE:', OUTPUT_PATH);
    process.exit(0);
}
