import { checkLogin, infoLog, fatalLog, successLog, warningLog } from '@ss/components-manage-tools';
import { askInstallInCwd } from '../util/questions';
import fs from 'fs';
import path from 'path';
import fetch from 'node-fetch';
import { execSync } from 'child_process';
import { hasYarn, hasProjectYarn } from '@vue/cli-shared-utils';
import { envHost } from '../util/constant';

async function getTemplateInfo(params) {
    const stringData = JSON.stringify(params);
    try {
        const value = await fetch(`${envHost}/openapi/template/download`, {
            method: 'POST',
            body: stringData,
            headers: {
                'Content-Type': 'application/json',
            },
        });
        const res = await value.json();
        if (res.code !== 0) {
            fatalLog(`${res.message}`);
        }
        return res.data;
    } catch (error) {
        fatalLog(`获取模板信息失败：${error}`);
    }
}

function installDep(depends) {
    if (!depends) return '';
    let bin = hasYarn() && hasProjectYarn(process.cwd()) ? 'yarn add' : 'npm i';
    let shell = '';
    let npmMap = ' --registry=http://r.npm.sankuai.com';

    if (depends.dependencies) {
        shell += `${bin}`;
        Object.keys(depends.dependencies).forEach(pkgName => {
            shell += ` ${pkgName}@${depends.dependencies[pkgName]}`;
        });
        shell += npmMap;
    }

    if (depends.devDependencies) {
        shell += shell ? ` && ${bin} -D` : ` ${bin} -D`;
        Object.keys(depends.devDependencies).forEach(pkgName => {
            shell += ` ${pkgName}@${depends.devDependencies[pkgName]}`;
        });
        shell += npmMap;
    }

    if (shell) {
        infoLog(`开始安装模板依赖...`);
        try {
            execSync(shell, { stdio: 'inherit' });
        } catch (err) {
            warningLog(`安装模板依赖失败：${err}`);
        }
    }
}

export async function addTemplate(tplId: string, target: string, fileName: string, cmd: any) {
    const token = checkLogin();
    if (!target) {
        const result = await askInstallInCwd();
        if (!result.isOk) process.exit(0);
        target = '/';
    }

    // 获取模板相关数据
    let { url, depends } = await getTemplateInfo({ token, tplId });
    if (!url) fatalLog(`获取模板 url 失败`);

    // 下载并解压模板包
    let dirPath = path.join(process.cwd(), target);
    if (!fs.existsSync(dirPath)) {
        fs.mkdirSync(dirPath);
        infoLog(`目录不存在，已自动创建：${dirPath}\n`);
    }
    infoLog('开始下载模板...\n');

    let temporaryPkg = `${tplId}-temp`;
    target = path.join(dirPath, temporaryPkg);
    let stream = fs.createWriteStream(target);

    try {
        const res = await fetch(url);
        await new Promise((resolve, reject) => {
            res.body.pipe(stream).on('close', function (err) {
                if (err) {
                    reject(err);
                } else {
                    resolve(null);
                }
            });
        });
        infoLog('模板压缩包下载完毕，开始解压\n');
    } catch (err) {
        fatalLog(`下载模板压缩包失败：${err}`);
    }

    try {
        // 添加 { stdio : 'pipe' } 可隐藏默认 stdout
        const realPath = dirPath.endsWith('/') ? dirPath : `${dirPath}/`;
        execSync(
            `mkdir ${realPath}.temDir && tar -zxvkf ${target} -C ${realPath}.temDir && mv ${realPath}.temDir/* ${realPath}${fileName} && rm -rf ${realPath}.temDir`,
            { stdio: 'pipe' },
        );
        infoLog(`解压完成`);
    } catch (err) {
        if (err.toString().includes('Already exists')) {
            fatalLog(`${err}\n解压失败：请删除上述文件或目录后重新运行命令`);
        } else {
            fatalLog(`解压失败：${err}`);
        }
    }

    try {
        execSync(`rm ${target}`, { stdio: 'pipe' });
    } catch (err) {
        warningLog(`删除压缩包${temporaryPkg}失败：${err}`);
    }

    // 安装依赖流程
    if (!cmd.skipInstallDep) installDep(depends);

    successLog(`🎉模板已成功添加，请开始使用吧`);
    process.exit(0);
}
