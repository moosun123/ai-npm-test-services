import { CoverageItem } from './base';

export interface APIType {
    name: string;
    desc: string;
    cnName: string;
    maintainer: string;
    componentId: string;
    props: Array<{
        name: string;
        desc: string;
        type: string;
        optionValue: string;
        default: string;
    }>;
    events: Array<{
        name: string;
        desc: string;
        signature: string;
        args: string;
    }>;
    methods: Array<{
        name: string;
        desc: string;
        signature: string;
        args: string;
    }>;
    slots: Array<{
        name: string;
        desc: string;
    }>;
}

interface StringObject {
    [key: string]: string;
}

interface ComponentDepItem {
    dependencies: string;
    version: string;
    isExternal: boolean;
}

interface ComponentDep {
    tagNameList: string[];
    depList: ComponentDepItem[];
}

interface ComponentInfoItem {
    doc: APIType;
    screenshots: string;
    componentDep: ComponentDep;
    testCoverage: CoverageItem;
}

export interface ComponentsInfo {
    [name: string]: ComponentInfoItem;
}

export type StandardNav = Array<{
    name: string;
    path: string;
    redirect: string;
    groups: ComponentNavData;
}>;

export type VueMobileNav = Array<{
    path: string;
    name: string;
    label: string;
    desc: string;
}>;

export type ComponentNavData = Array<{
    groupName: string;
    list: DocNavData;
}>;

export type DocNavData = Array<{
    path: string;
    name: string;
    cnName: string;
}>;

export interface ExtractNPMInfo {
    git: string;
    desc: string;
    keyword: string;
    version: string;
    npmName: string;
    name: string;
    scaffoldVersion: string;
    cmVersion: string;
}

export interface UploadDepInfoPayload {
    id: string;
    git: string;
    desc: string;
    token: string;
    commit: string;
    npmName: string;
    keyword: string;
    version: string;
    branch: string;
    techStack: string;
    docNav: DocNavData;
    componentNav: ComponentNavData;
    testCoverage: CoverageItem;
    packageDep: {
        dependencies: StringObject;
        peerDependencies: StringObject;
    };
    components: ComponentsInfo;
    releaseType?: 'docs' | 'lowcode';
    materialVersion?: string;
    techStackVersion?: string;
    isFollowLowcode?: boolean;
}

export interface ConfirmVersionValidPayload {
    id: string;
    version: string;
}

export interface UploadSketchComponentLibInfo {
    token: string;
    libName: string;
    libLabel: string;
    libVersion: string;
    libAssets: any;
    libTechStack: number;
    version: string;
}

export interface ConfirmReleaseVersionPayload {
    id: string;
    lastVersion: string;
}

export interface UploadSketchInverseInfo {
    token: string;
    libName: string;
    inverseUrl: string;
}
