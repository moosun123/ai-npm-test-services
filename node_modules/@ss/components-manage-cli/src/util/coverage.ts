import * as fs from 'fs';
import * as path from 'path';
import { sync } from 'globby';
import { JSDOM } from 'jsdom';
import { warningLog } from '@ss/components-manage-tools';
import * as cp from 'child_process';

function analyzeCoverage(fileName: string, content: string): any {
    const dom = new JSDOM(content);
    const coverageNodes = dom.window.document.querySelectorAll('.fl');
    const statement = coverageNodes[0].querySelector('.strong').innerHTML.trim();
    const line = coverageNodes[3].querySelector('.strong').innerHTML.trim();
    let name = fileName === 'index.html' ? 'total' : fileName.split('.')[0].trim();
    if (name.includes('/')) {
        const nameList = name.split('/');
        name = nameList[nameList.length - 1];
    }
    return {
        [name]: {
            statement,
            line,
        },
    };
}

export function collectCoverage() {
    try {
        const cwd = process.cwd();
        cp.execSync('npm run test', { cwd });
        const coveragePrefix = path.join(cwd, 'coverage', 'lcov-report');
        const patterns = ['*.vue.html', 'index.html', '**/*.vue.html'];
        const coverageFileNames = sync(patterns, {
            cwd: coveragePrefix,
        });
        let coverage: any = {};
        for (const fileName of coverageFileNames) {
            const file = path.join(coveragePrefix, fileName);
            // @ts-ignore
            const content = fs.readFileSync(file).toString('UTF-8');
            try {
                const coverageItem = analyzeCoverage(fileName, content);
                coverage = {
                    ...coverage,
                    ...coverageItem,
                };
                // tslint:disable-next-line
            } catch (e) {}
        }
        return coverage;
    } catch (e) {
        // tslint:disable-next-line
        console.log(e);
        warningLog('测试覆盖信息采集失败');
        return {};
    }
}
