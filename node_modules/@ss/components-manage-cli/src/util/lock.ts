import { LOCK_FILE_NAME } from './constant';
import { customAlphabet } from 'nanoid';
import * as path from 'path';
import * as fs from 'fs';

const nanoid = customAlphabet('1234567890abcdefghijklmnopqrstuvwxyz', 21)
export function readLock () {
    const file = path.join(process.cwd(), LOCK_FILE_NAME);
    const exists = fs.existsSync(file);
    if (!exists) {
        return {};
    }
    try {
        const str = fs.readFileSync(file, { encoding: 'utf-8' });
        const json = str ? JSON.parse(str) : {};
        return json;
    } catch (e) {
        console.error(e);
    }
    return {};
}

function writeLock (content: string) {
    try {
        const file = path.join(process.cwd(), LOCK_FILE_NAME);
        fs.writeFileSync(file, content, { encoding: 'utf-8' });
    } catch (e) {
        console.error(e);
    }
}

let LOCK_CONTENT;
export function getId (categroy: string, template?: string): string {
    if (!LOCK_CONTENT) {
        LOCK_CONTENT = readLock();
    }
    let t = LOCK_CONTENT[categroy];
    if (!t) {
        t = { id: nanoid(), children: {} };
        LOCK_CONTENT[categroy] = t;
    }
    if (!template) {
        return t.id;
    }
    let c = t.children[template];
    if (!c) {
        c = { id: nanoid() };
        t.children[template] = c;
    }
    return c.id;
}

export function updateLockFile (): void {
    writeLock(JSON.stringify(LOCK_CONTENT, null, '  '));
}

export function reGenerateLockId() {
    const lockContent = readLock();
    Object.keys(lockContent).forEach(i => {
        lockContent[i].id = nanoid();
        Object.keys(lockContent[i].children).forEach(j => {
            lockContent[i].children[j].id = nanoid();
        });
    });
    writeLock(JSON.stringify(lockContent, null, '  '));
    console.log('reGenerateLockId success');
}
