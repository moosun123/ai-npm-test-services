import * as fs from 'fs';
import * as path from 'path';
import { fatalLog, checkLogin } from '@ss/components-manage-tools';
import * as cp from 'child_process';
import { askVersion } from './questions';
import { getCurrentBranch } from './git';
import { getProjectConfig } from './common';
import { envHost } from '../util/constant';

const fetch = require('node-fetch');
const chalk = require('chalk');

export async function uploadDepInfo(data: any) {
    const stringData = JSON.stringify(data);

    const value = await fetch(`${envHost}/openapi/publish`, {
        method: 'POST',
        body: stringData,
        headers: {
            'Content-Type': 'application/json',
        },
    });
    const res = await value.json();
    if (res.code !== 0) {
        fatalLog(res.message);
    } else {
        console.log(
            chalk.green(
                `组件库发布中，发布完成后将会在大象上通知您。组件库地址: ${envHost}/astro/material/lib/${data.id}`,
            ),
        );
        process.exit(0);
    }
}

export async function uploadMockInfo(data: any) {
    const stringData = JSON.stringify(data);
    const value = await fetch(`${envHost}/openapi/repair`, {
        method: 'POST',
        body: stringData,
        headers: {
            'Content-Type': 'application/json',
        },
    });
    const res = await value.json();
    if (res.code !== 0) {
        fatalLog(res.message);
    } else {
        console.log(
            chalk.green(
                `组件库发布中，发布完成后将会在大象上通知您。组件库地址: ${envHost}/astro/material/lib/${data.id}`,
            ),
        );
    }
}

export async function lastReleaseVersion(id: string) {
    try {
        const value = await fetch(`${envHost}/openapi/lastVersion?id=${id}`);
        const res = await value.json();
        if (res.code === 0) {
            return res.version;
        } else {
            // tslint:disable-next-line
            console.info(chalk.red('请求最新版本接口失败，请联系wanganxu'));
            fatalLog(res.message);
        }
    } catch (e) {
        // tslint:disable-next-line
        console.info(chalk.red('请求最新版本接口失败，请联系wanganxu'));
        fatalLog(e.message);
    }
}

export async function confirmVersionValid(payload: any) {
    try {
        const value = await fetch(`${envHost}/openapi/available/version`, {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify(payload),
        });
        const res = await value.json();
        if (res.code === 0) {
            if (!res.status) {
                fatalLog('当前版本已经发布过了，请重新发布');
            }
        } else {
            // tslint:disable-next-line
            console.info(chalk.red('请求可用版本接口失败，请联系wanganxu'));
            fatalLog(res.message);
        }
    } catch (e) {
        // tslint:disable-next-line
        console.info(chalk.red('请求可用版本接口失败，请联系wanganxu'));
        fatalLog(e.toString());
    }
}

export async function confirmReleaseVersion(payload: any) {
    const { id, lastVersion } = payload;
    const currentVersion = await askVersion(lastVersion);
    await confirmVersionValid({
        id,
        version: currentVersion,
    });
    const cwd = process.cwd();
    const packageJSONPath = path.join(cwd, 'package.json');
    let packageJSON = fs.readFileSync(packageJSONPath).toString();
    const versionRegExp = /"version":\s".+",/;
    packageJSON = packageJSON.replace(versionRegExp, () => `"version": "${currentVersion}",`);
    fs.writeFileSync(packageJSONPath, packageJSON);
    return currentVersion;
}

export async function commitReleaseVersion(payload: any) {
    const { version, branch } = payload;
    const r = cp.spawnSync(
        `git add . && git commit -m "feature: release ${version}" && git push --set-upstream origin ${branch}`,
        {
            cwd: process.cwd(),
            shell: true,
        },
    );
    if (!!r.status) {
        console.error(r.output.toString())
        process.exit(1)
    }
}

export async function getCMLatestVersion() {
    try {
        const value = await fetch(`${envHost}/openapi/cm-version`, {
            method: 'GET',
            headers: {
                'Content-Type': 'application/json',
            },
        });
        const res = await value.json();
        if (res.code === 0) {
            return res.data;
        } else {
            fatalLog(res.message);
        }
    } catch (e) {
        // tslint:disable-next-line
        console.info(chalk.red('请求cm最新版本接口失败，请联系wanganxu'));
        fatalLog(e.toString());
    }
}

export async function uploadSketchComponentLibInfo(data: any) {
    try {
        const value = await fetch(`${envHost}/openapi/publishSketchComponent`, {
            method: 'POST',
            body: JSON.stringify(data),
            headers: {
                'Content-Type': 'application/json',
            },
        });
        const res = await value.json();
        if (res.code !== 0) {
            fatalLog(JSON.stringify(res.message));
        } else {
            console.log(chalk.green(res.message || `Sketch组件库发布成功～`));
        }
    } catch (e) {
        console.info(chalk.red('sketchComponent publish failed，请联系zhongjiahao02'));
        fatalLog(e.toString());
    }
}

export async function uploadSketchInverseInfo(data: any) {
    try {
        const value = await fetch(`${envHost}/openapi/publishSketchInverse`, {
            method: 'POST',
            body: JSON.stringify(data),
            headers: {
                'Content-Type': 'application/json',
            },
        });
        const res = await value.json();
        if (res.code !== 0) {
            fatalLog(JSON.stringify(res.message));
        } else {
            console.log(chalk.green(res.message || `Sketch Inverse发布成功～`));
        }
    } catch (e) {
        console.info(chalk.red('sketch inverse publish failed，请联系zhongjiahao02'));
        fatalLog(e.toString());
    }
}

export async function checkedVersion (version: string) {
    const config = getProjectConfig()
    const params = {
        version,
        token: checkLogin(),
        id: config.id
    }
    // console.log(JSON.stringify(params));
    const response = await fetch(`${envHost}/openapi/template/version/check`, {
        method: 'POST',
        body: JSON.stringify(params),
        headers: {
            'Content-Type': 'application/json',
        },
    });
    const res = await response.json();
    return res;
}
