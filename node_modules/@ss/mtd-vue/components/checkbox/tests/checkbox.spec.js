import { mount } from '@vue/test-utils';
import Checkbox from '../checkbox.vue';

describe('Checkbox', function () {
  it('create', () => {
    const wrapper = mount(Checkbox);
    expect(wrapper.vm).to.exist;
  });

  it('input event', function () {
    const wrapper = mount(Checkbox);
    wrapper.find('input').trigger('change');
    expect(wrapper.emitted().input[0]).to.be.ok;
    expect(wrapper.emitted().input[0][0]).to.be.true;
  });

  it('checked', function () {
    const wrapper = mount(Checkbox, {
      propsData: {
        checked: true
      }
    });
    wrapper.find('input').trigger('change');
    expect(wrapper.emitted().input[0][0]).to.be.equal(false);
  });

  it('disabled', function () {
    const wrapper = mount(Checkbox, {
      propsData: {
        disabled: true
      }
    });
    expect(wrapper.classes()).to.include('mtd-checkbox-disabled');
    wrapper.find('input').trigger('change');
    expect(wrapper.emitted().input).to.not.be.ok;
  });

  it('name', function () {
    const wrapper = mount(Checkbox, {
      propsData: {
        name: 'myCheckbox'
      }
    });
    const input = wrapper.find('input');
    expect(input.attributes().name).to.be.equal('myCheckbox');
  });

  it('indeterminate', function () {
    const wrapper = mount(Checkbox, {
      propsData: {
        indeterminate: true,
      }
    });
    expect(wrapper.classes()).to.include('mtd-checkbox-indeterminate');
    wrapper.find('input').trigger('change');
    expect(wrapper.emitted().input.length).to.be.equal(1);
  })
});
