import createHoc from '@/utils/hoc';

export default function createTreeNode (name, Component) {
  const namedComponent = createHoc({
    name,
    inject: ['tree'],
    props: {
      node: {
        type: Object,
        required: true,
      },
      data: {
        type: Object,
        required: true,
      },
    },
    computed: {
      expandOnClickNode () {
        return this.tree.expandOnClickNode;
      },
      checkOnClickNode () {
        return this.tree.checkOnClickNode;
      },
      indent () {
        return this.tree.baseIndent + this.tree.indent * this.node.level;
      },
      loadData () {
        return this.tree.loadData;
      },
    },
    methods: {
      handleExpanded (...args) {
        this.tree.$emit('expandedChange', ...args);
      },
      handleChecked (...args) {
        this.tree.$emit('checkedChange', ...args);
      },
      handleLoadData (...args) {
        this.tree.$emit('loadedData', ...args);
      },
      handleSelected (...args) {
        this.tree.$emit('selectedNode', ...args);
      },
      handleNodeClick (...args) {
        this.tree.$emit('nodeClick', ...args);
      },
    },
  }, {
    mapStateToProps (context) {
      return {
        node: context.node,
        data: context.data,
        expandOnClickNode: context.expandOnClickNode,
        checkOnClickNode: context.checkOnClickNode,
        indent: context.indent,
        loadData: context.loadData,
        expandIcon: context.tree._expandIcon,
        selectable: context.tree.selectable,
        nodeClass: context.tree.nodeClass,
        draggable: context.tree.draggable,
      };
    },
    mapMethodToListener (context) {
      return {
        'expandedChange': context.handleExpanded,
        'checkedChange': context.handleChecked,
        'loadedData': context.handleLoadData,
        'selected': context.handleSelected,
        'node-click': context.handleNodeClick,
        'tree-node-drag-start': context.tree.handleDragStart,
        'tree-node-drag-over': context.tree.handleDragOver,
        'tree-node-drag-end': context.tree.handleDragEnd,
      };
    },
    getScopedSlots (context) {
      return context.tree.$scopedSlots;
    },
  })(Component);

  // 防止使用局部注册组件时，找不到组件
  Component.components = Component.components || {};
  if (Component.components[name]) {
    console.warn('[MTD warn][makeTreeNode]: ' +
      name + 'components has the same name components dependency');
  } else {
    Component.components[name] = namedComponent;
  }
  return namedComponent;
}
