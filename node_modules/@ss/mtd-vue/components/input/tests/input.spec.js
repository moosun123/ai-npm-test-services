import { mount } from '@vue/test-utils';
import Input from '../input.vue';
import { EventEmitter } from 'events';
import { waitImmediate } from '@test/util';

describe('Input', function () {
  it('create', () => {
    const wrapper = mount(Input);
    expect(wrapper.vm).to.exist;
  });

  it('size', function () {
    const sizes = ['small', 'large'];
    sizes.forEach((size) => {
      const wrapper = mount(Input, {
        propsData: {
          size
        }
      });
      expect(wrapper.classes()).to.include(`mtd-input-${size}`);
    });
  });

  it('invalid', function () {
    const wrapper = mount(Input, {
      propsData: {
        invalid: true
      },
    });
    expect(wrapper.classes()).to.be.include('mtd-input-invalid');
  });

  it('value', function () {
    const wrapper = mount(Input, {
      propsData: {
        value: '1111'
      },
    });
    const input = wrapper.find('input');
    expect(input.element.value).to.be.equal('1111');

    wrapper.setProps({ value: '2222' });
    expect(input.element.value).to.be.equal('2222');
  });

  it('clearable', function () {
    function createClearIt (clearable) {
      const wrapper = mount(Input, {
        propsData: {
          clearable,
          value: 'xxxxx'
        }
      });
      let clearIcon = wrapper.find('.mtd-input-clear')
      expect(clearIcon.exists()).to.be.false;

      const input = wrapper.find('input');
      input.trigger('focus');
      clearIcon = wrapper.find('.mtd-input-clear')
      // 仅仅当有值且 focus 时显示
      expect(clearIcon.exists()).to.be.equal(clearable);

      if (clearable) {
        clearIcon.trigger('click');
        expect(wrapper.emitted().input.length).to.be.equal(1);
        expect(wrapper.emitted().input[0][0]).to.be.equal('');
      }
    }
    [true, false].every(createClearIt);

    const wrapper = mount(Input, {
      propsData: {
        clearable: true,
        value: ''
      }
    });
    const input = wrapper.find('input');
    input.trigger('focus');
    const clearIcon = wrapper.find('.mtd-input-clear')
    // value 为空时即使 focus 也不显示
    expect(clearIcon.exists()).to.be.false;
  });

  it('readonly', function () {
    const wrapper = mount(Input, {
      propsData: {
        readonly: false
      },
    });
    const input = wrapper.find('input');
    expect(input.attributes().readonly).to.not.be.ok;

    const rWrapper = mount(Input, {
      propsData: {
        readonly: true,
      },
    });
    const rInput = rWrapper.find('input');
    expect(rWrapper.classes()).to.include('mtd-input-readonly');
    expect(rInput.attributes().readonly).to.be.equal('readonly');
  });

  it('prefix-icon', function () {
    const wrapper = mount(Input, {
      propsData: {
        prefixIcon: 'mtdicon mtdicon-settings',
      },
    });

    expect(wrapper.classes()).to.include('mtd-input-prefix');
    expect(wrapper.find('.mtdicon-settings').exists()).to.be.true;
  });

  it('suffix-icon', function () {
    const wrapper = mount(Input, {
      propsData: {
        suffixIcon: 'mtdicon mtdicon-search',
      },
    });

    expect(wrapper.classes()).to.include('mtd-input-suffix');
    expect(wrapper.find('.mtdicon-search').exists()).to.be.true;
  });

  it('disabled', function () {
    const wrapper = mount(Input, {
      propsData: {
        disabled: true
      },
    });
    const input = wrapper.find('input');
    expect(wrapper.classes()).to.include('mtd-input-disabled');
    expect(input.attributes().disabled).to.be.equal('disabled');
  });

  it('input event', async function () {
    const wrapper = mount(Input, {
      propsData: {
        value: '1111'
      },
    });
    const input = wrapper.find('input');
    input.setValue('2222');
    expect(wrapper.emitted().input.length).to.be.equal(1);
    expect(wrapper.emitted().input[0][0]).to.be.equal('2222');
    await waitImmediate();
    expect(input.element.value).to.be.equal('1111');
  });

  it('input value is undefined, should show empty string', async function () {
    const wrapper = mount(Input, {
      propsData: {
        value: undefined
      },
    });
    const input = wrapper.find('input');
    expect(input.element.value).to.be.equal('');

    input.setValue('2222');
    expect(wrapper.emitted().input.length).to.be.equal(1);
    expect(wrapper.emitted().input[0][0]).to.be.equal('2222');
    await waitImmediate();
    expect(input.element.value).to.be.equal('');
  });

  describe('slot', function () {
    it('prefix', function () {
      const wrapper = mount(Input, {
        slots: {
          prefix: '<span class="prefix-slot">xxxx</span>',
        },
      });

      expect(wrapper.classes()).to.include('mtd-input-prefix');
      expect(wrapper.find('.prefix-slot').exists()).to.be.true;
    });

    it('suffix', function () {
      const wrapper = mount(Input, {
        slots: {
          suffix: '<span class="suffix-slot">xxxx</span>',
        },
      });

      expect(wrapper.classes()).to.include('mtd-input-suffix');
      expect(wrapper.find('.suffix-slot').exists()).to.be.true;
    });
  });
});
