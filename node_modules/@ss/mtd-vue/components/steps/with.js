import createHoc from '@/utils/hoc';

export default function withSteps (name, Components) {
  return createHoc({
    name,
    inject: ['steps'],
    props: {
      status: String,
    },
    data () {
      return {
        index: -1, // use in steps component
      };
    },
    created () {
      this.steps.$emit('addStep', this);
    },

    beforeDestroy () {
      this.steps.$emit('removeStep', this);
    },

    computed: {
      internalStatus () {
        if (this.index > -1) {
          const val = this.steps.active;
          if (this.index < val) {
            return 'finish';
          } else if (this.index === val) {
            return this.steps.status || 'process';
          } else if (this.index > val) {
            return 'wait';
          }
        }
      },
      currentStatus () {
        return this.status || this.internalStatus;
      },
    },
  }, {
    mapStateToProps (context) {
      return {
        index: context.index,
        status: context.currentStatus,
        space: context.steps.space,
        direction: context.steps.direction,
        dot: context.steps.dot,
      };
    },
  })(Components);
}
