import { mount } from '@vue/test-utils';
import Steps from '../steps.vue';
import DemoOther from './demo-other.vue';
import DemoStatus from './demo-status.vue';

describe('Steps', function () {
  it('create', () => {
    const wrapper = mount(Steps);
    expect(wrapper.vm).to.exist;
  });

  it('size', function () {
    const wrapper = mount(Steps, {
      propsData: {
        size: 'small'
      }
    });
    expect(wrapper.classes()).to.include('mtd-steps-small');
  });

  it('direction', function () {
    const wrapper = mount(Steps, {
      propsData: {
        direction: 'vertical'
      }
    });
    expect(wrapper.classes()).to.include('mtd-steps-vertical');
  });

  it('is-center', function () {
    const wrapper = mount(Steps, {
      propsData: {
        isCenter: false
      }
    });
    expect(wrapper.classes()).to.include('mtd-steps-right');
  });

  it('dot', function () {
    const wrapper = mount(DemoOther, {
      propsData: {
        dot: true
      }
    });
    expect(wrapper.find('.mtd-step-head-dot').exists()).to.be.true;
  });

  it('space', function () {
    const wrapper = mount(DemoOther, {
      propsData: {
        space: 100
      }
    });
    expect(wrapper.findAll('.mtd-step').at(0).attributes().style).equal('width: 100px;')
  });

  it('active & step status', function () {
    const wrapper = mount(DemoOther, {
      propsData: {
        active: 1,
      }
    });
    expect(wrapper.findAll('.mtd-step').at(1).find('.mtd-step-head').classes()).to.include('mtd-step-error');
  });

  it('status', function () {
    const wrapper = mount(DemoOther);
    expect(wrapper.findAll('.mtd-step').at(3).find('.mtd-step-head').exists()).to.be.true;
  });

  it('title', function () {
    const wrapper = mount(DemoOther);
    expect(wrapper.findAll('.mtd-step').at(0).find('.mtd-step-main-title').text()).to.equal('步骤1');
  });

  it('description', function () {
    const wrapper = mount(DemoOther);
    expect(wrapper.findAll('.mtd-step').at(0).find('.mtd-step-main-description').text()).to.equal('描述性文字');
  });

  it('icon', function () {
    const wrapper = mount(DemoOther);
    expect(wrapper.findAll('.mtd-step').at(2).find('.mtd-step-head-icon').exists()).to.be.true;
    expect(wrapper.findAll('.mtd-step').at(2).find('.mtd-step-head').find('.mtdicon-right-thick').exists()).to.be.true;
  });

  it('step status', function () {
    const wrapper = mount(DemoStatus);
    expect(wrapper.findAll('.mtd-step').at(2).find('.mtd-step-head-icon').exists()).to.be.true;
    expect(wrapper.findAll('.mtd-step').at(2).find('.mtdicon-right-thick').exists()).to.be.true;
  });
});
