import { mount } from '@vue/test-utils';
import Autocomplete from '../autocomplete.vue';
import Custom from './custom.vue';
import TotalCustom from './total-custom.vue';
import FilterMethod from './filter.vue';

import { createDemoTest } from '@test/util';
const DemoContexts = require.context('./demo', true, /\.vue$/);

const dropItemClass = '.mtd-autocomplete-dropdown-menu .mtd-dropdown-menu-item';

describe('Autocomplete', function () {
  // 目前 @vue/test-utils 对 v-model, $lisenters 支持不太好，先跳过
  it('create', () => {
    const wrapper = mount(Autocomplete);
    expect(wrapper.vm).to.exist;
    wrapper.destroy();
  });

  it('normal func', () => {
    const wrapper = mount(Autocomplete);
    wrapper.find('.mtd-input').trigger('input', 'mtd');
    expect(wrapper.find('.mtd-popper').isVisible());
    wrapper.destroy();
  });

  xit('custom option', () => {
    const wrapper = mount(Custom);
    wrapper.find('.mtd-input').setValue('mtd');
    wrapper.vm.$refs.autocomplete.$emit('search');
    expect(wrapper.findAll(dropItemClass)).to.length(3);
  });

  xit('total custom option', () => {
    const wrapper = mount(TotalCustom);
    wrapper.find('.mtd-input').setValue('12');
    expect(wrapper.findAll(dropItemClass)).to.length(3);
  });

  xit('filter method:text not match', () => {
    const wrapper = mount(FilterMethod);
    wrapper.find('.mtd-input').setValue('12');
    expect(wrapper.findAll(dropItemClass)).to.length(0);
  });

  xit('filter method:text matched', () => {
    const wrapper = mount(FilterMethod);
    wrapper.setData({
      autoValue: 'mt',
    });
    wrapper.find('.mtd-input').setValue('mt');
    expect(wrapper.findAll(dropItemClass)).to.length(2);
  });

  it('event:select', () => {
    const wrapper = mount(Autocomplete, {
      propsData: {
        data: ['mtd', 'meituan'],
      },
    });
    wrapper.find('.mtd-input').setValue('m');
    // wrapper.find('.mtd-input').trigger('input', 'm');
    wrapper.find(dropItemClass).trigger('click');
    expect(wrapper.emitted().select).to.length(1);
    wrapper.destroy();
  })

  createDemoTest(DemoContexts);
  // 1000个节点下测试查找子元素时间
  // describe('collect options', () => {

  //   Array.from({length: 5}).forEach((v, i) => {
  //     it('First level 1000 nodes ', () => {
  //       const wrapper = mount(TestFirstLevel);
  //       const t1 = performance.now();
  //       wrapper.vm.getOptions();
  //       const t2 = performance.now();
  //       console.log(`第${i + 1}次`);
  //       console.log(`run：${t2 - t1}`);
  //       expect(wrapper.vm.getOptions()).to.have.lengthOf(1000);
  //     });
  //     it('Any level 1000 nodes', () => {
  //       const wrapper = mount(TestAnyLevel);
  //       const t1 = performance.now();
  //       wrapper.vm.getOptions();
  //       const t2 = performance.now();
  //       console.log(`run：${t2 - t1}`);
  //       expect(wrapper.vm.getOptions()).to.have.lengthOf(1000);
  //     });
  //   });

  // });
});
