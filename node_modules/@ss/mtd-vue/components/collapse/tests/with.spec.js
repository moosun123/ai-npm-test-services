import {
  mount
} from '@vue/test-utils';
import withCollapse from '../with';

const TestComponent = {
  name: 'TestComponent',
  props: {
    value: [String, Number],
    active: Boolean,
  },
  methods: {
    handleClick (v) {
      this.$emit('item-click', true, this);
    },
  },
  render (h) {
    return h('div', {
      on: {
        click: this.handleClick,
      },
    });
  },
};

function noop () {};

describe('withCollapse', function () {
  const Test = withCollapse('Test', TestComponent);

  it('inject active props to Item component', function () {
    const wrapper = mount(Test, {
      propsData: {
        value: '111'
      },
      provide: {
        collapse: {
          $emit: noop,
          value: '111',
        }
      },
    });
    const item = wrapper.find(TestComponent);
    expect(item.vm.active).to.be.true;
    expect(item.vm.value).to.be.equal('111');

    const wrapper2 = mount(Test, {
      propsData: {
        value: '111'
      },
      provide: {
        collapse: {
          $emit: noop,
          value: '222',
        }
      },
    });
    const item2 = wrapper2.find(TestComponent);
    expect(item2.vm.active).to.be.false;
    expect(item2.vm.value).to.be.equal('111');
  });

  it('inject active props to Item component when value is array', function () {
    const wrapper = mount(Test, {
      propsData: {
        value: '111'
      },
      provide: {
        collapse: {
          $emit: noop,
          value: ['111'],
        }
      },
    });
    const item = wrapper.find(TestComponent);
    expect(item.vm.active).to.be.true;
    expect(item.vm.value).to.be.equal('111');

    const wrapper2 = mount(Test, {
      propsData: {
        value: '111'
      },
      provide: {
        collapse: {
          $emit: noop,
          value: ['222'],
        }
      },
    });
    const item2 = wrapper2.find(TestComponent);
    expect(item2.vm.active).to.be.false;
    expect(item2.vm.value).to.be.equal('111');
  });
});
