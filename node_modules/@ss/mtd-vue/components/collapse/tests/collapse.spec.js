import { mount } from '@vue/test-utils';
import Collapse from '../collapse.vue';

const ChildComponent = {
  name: 'TestChildComponent',
  inject: ['collapse'],
  render (h) {
    return h('div');
  }
};

describe('Collapse', function () {
  it('create', () => {
    const wrapper = mount(Collapse);
    expect(wrapper.vm).to.exist;
  });

  it('provide', function () {
    const props = {
      value: 'xx',
      type: 'sample',
    }
    const wrapper = mount(Collapse, {
      propsData: props,
      slots: {
        default: [ChildComponent]
      }
    });
    const child = wrapper.find(ChildComponent);
    expect(child.exists()).to.be.true;
    expect(child.vm.collapse).to.include(props);
    expect(child.vm.collapse.$emit).to.be.an('function');
  });

  it('handle item-click event', function () {
    const wrapper = mount(Collapse, {
      value: '222',
    });

    wrapper.vm.$emit('itemClick', true, { value: '111' });
    expect(wrapper.emitted().input[0][0]).to.be.equal('111');

    // when value is array
    const wrapper2 = mount(Collapse, {
      propsData: {
        value: []
      }
    });
    wrapper2.vm.$emit('itemClick', true, { value: '111' });
    expect(wrapper2.emitted().input[0][0]).to.be.eql(['111']);

    wrapper2.setProps({ value: ['111'] })
    wrapper2.vm.$emit('itemClick', false, { value: '111' });
    expect(wrapper2.emitted().input[1][0]).to.be.eql([]);
  });
});
