import { mount } from '@vue/test-utils';
import Switch from '../switch.vue';

describe('Switch', function () {
  it('create', () => {
    const wrapper = mount(Switch);
    expect(wrapper.vm).to.exist;
  });

  it('add css style with different size', function () {
    const size = 'small';
    const wrapper = mount(Switch, {
      propsData: {
        size: size
      }
    });
    expect(wrapper.classes()).to.include(`mtd-switch-${size}`)
  });

  it('change event', function () {
    const wrapper = mount(Switch);
    wrapper.trigger('click');
    expect(wrapper.emitted().change[0]).to.be.ok;
    expect(wrapper.emitted().change[0][0]).to.be.eql(true);
  });

  it('test trueValue', function () {
    const wrapper = mount(Switch, {
      propsData: {
        trueValue: 'trueValue',
        actived: false
      }
    });
     wrapper.trigger('click');
     expect(wrapper.emitted().change[0][0]).to.equal('trueValue');
  });

  it('test falseValue', function () {
    const wrapper = mount(Switch, {
      propsData: {
        falseValue: 'falseValue',
        actived: true
      }
    })
    wrapper.trigger('click');
    expect(wrapper.emitted().change[0][0]).to.equal('falseValue');
  });

  it('add disabled attrs in input add dont response to users when disabled ', function () {
    const wrapper = mount(Switch, {
      propsData: {
        disabled: true,
      }
    });
    expect(wrapper.classes()).to.include('mtd-switch-disabled')
    wrapper.trigger('click');
    expect(wrapper.emitted().change).to.not.be.ok;
  });


  it('test actived', function () {
    const wrapper = mount(Switch, {
      propsData: {
        actived: true,
      }
    });
    expect(wrapper.classes()).to.include('mtd-switch-active')
  })

  it('loading', function () {
    const wrapper = mount(Switch, {
      propsData: {
        loading: true
      }
    });
    wrapper.trigger('click');
    expect(wrapper.classes()).to.include('mtd-switch-loading')
    expect(wrapper.emitted().change).to.not.be.ok;
  })

  it('slot loading', () => {
    const wrapper = mount(Switch, {
      slots: {
        loading: '<span slot="loading"><span class="test-slot"/></span>'
      }
    })
    expect(wrapper.find('.test-slot')).to.be.ok
  })
})
