import Vue from 'vue';
import { mount } from '@vue/test-utils'
import Carousel from '../carousel.vue';
import CarouselItem from '../carousel-item.vue';
const DemoContexts = require.context('./demo', true, /\.vue$/);
import { createDemoTest } from '@test/util';

let id = 0;

const createElm = function() {
  const elm = document.createElement('div');

  elm.id = 'app' + ++id;
  document.body.appendChild(elm);

  return elm;
};

describe('Carousel', () => {
  it('create', () => {
    const wrapper = mount(Carousel, {
      attachToDocument: true,
      slots: {
        default: [CarouselItem, CarouselItem, CarouselItem]
      }
    });
    wrapper.vm.$forceUpdate();
    expect(wrapper.findAll('.mtd-carousel-item').length).to.equal(5);
  });

  it('auto paly', done => {
    const wrapper = mount(Carousel, {
      propsData: {
        interval: 50,
      },
      attachToDocument: true,
      slots: {
        default: [CarouselItem, CarouselItem, CarouselItem]
      }
    });
    wrapper.vm.$forceUpdate();
    setTimeout(() => {
      const items = wrapper.findAll('.mtd-carousel-item');
      expect(items.wrappers[1].classes()).include('mtd-carousel-item-active');
      setTimeout(() => {
        expect(items.wrappers[2].classes()).include('mtd-carousel-item-active');
        done();
      }, 70);
    }, 10);
  });

  it('no loop', done => {
    const wrapper = mount(Carousel, {
      propsData: {
        loop: false,
      },
      attachToDocument: true,
      slots: {
        default: [CarouselItem, CarouselItem, CarouselItem]
      }
    });
    wrapper.vm.$forceUpdate();
    setTimeout(() => {
      const items = wrapper.findAll('.mtd-carousel-item');
      expect(items.wrappers[1].classes()).include('mtd-carousel-item-active');
      setTimeout(() => {
        expect(items.wrappers[1].classes()).include('mtd-carousel-item-active');
        done();
      }, 70);
    }, 10);
  });

  it('initial index', () => {
    const wrapper = mount(Carousel, {
      propsData: {
        initialIndex: 1,
      },
      attachToDocument: true,
      slots: {
        default: [CarouselItem, CarouselItem, CarouselItem]
      }
    });
    wrapper.vm.$forceUpdate();
    const items = wrapper.findAll('.mtd-carousel-item');
      expect(items.wrappers[2].classes()).include('mtd-carousel-item-active');
  });

  it('indicatorPosition outside', () => {
    const wrapper = mount(Carousel, {
      propsData: {
        indicatorPosition: 'outside',
      },
      attachToDocument: true,
      slots: {
        default: [CarouselItem, CarouselItem, CarouselItem]
      }
    });
    wrapper.vm.$forceUpdate();
    expect(wrapper.find('.mtd-carousel-outside').exists()).to.be.true;
  });

  describe('click change', () => {
    it('click prev', done => {
      const wrapper = mount(Carousel, {
        propsData: {
          initialIndex: 1,
          autoplay: false,
        },
        attachToDocument: true,
        slots: {
          default: [CarouselItem, CarouselItem, CarouselItem]
        }
      });
      wrapper.vm.$forceUpdate();
      const prevBtn = wrapper.find('.mtd-carousel-prev');
      prevBtn.trigger('click');
      setTimeout(() => {
        const items = wrapper.findAll('.mtd-carousel-item');
        expect(items.wrappers[1].classes()).include('mtd-carousel-item-active');
        done();
      }, 10);
    });

    it('click next', done => {
      const wrapper = mount(Carousel, {
        propsData: {
          initialIndex: 1,
          autoplay: false,
        },
        attachToDocument: true,
        slots: {
          default: [CarouselItem, CarouselItem, CarouselItem]
        }
      });
      wrapper.vm.$forceUpdate();
      const nextBtn = wrapper.find('.mtd-carousel-next');
      nextBtn.trigger('click');
      setTimeout(() => {
        const items = wrapper.findAll('.mtd-carousel-item');
        expect(items.wrappers[3].classes()).include('mtd-carousel-item-active');
        done();
      }, 10);
    });

    it('click indicator', done => {
      const wrapper = mount(Carousel, {
        propsData: {
          initialIndex: 1,
          autoplay: false,
        },
        attachToDocument: true,
        slots: {
          default: [CarouselItem, CarouselItem, CarouselItem]
        }
      });
      wrapper.vm.$forceUpdate();
      const indicatorDot = wrapper.find('.mtd-carousel-dot');
      indicatorDot.trigger('click', {
        index: 0
      });
      setTimeout(() => {
        const items = wrapper.findAll('.mtd-carousel-item');
        expect(items.wrappers[1].classes()).include('mtd-carousel-item-active');
        done();
      }, 10);
    });
  });

  describe('methods', () => {
    it('prev', done => {
      const wrapper = mount(Carousel, {
        propsData: {
          initialIndex: 1,
          autoplay: false,
        },
        attachToDocument: true,
        slots: {
          default: [CarouselItem, CarouselItem, CarouselItem]
        }
      });
      wrapper.vm.$forceUpdate();
      wrapper.vm.prev();
      setTimeout(() => {
        const items = wrapper.findAll('.mtd-carousel-item');
        expect(items.wrappers[1].classes()).include('mtd-carousel-item-active');
        done();
      }, 10);
    });

    it('next', done => {
      const wrapper = mount(Carousel, {
        propsData: {
          initialIndex: 1,
          autoplay: false,
        },
        attachToDocument: true,
        slots: {
          default: [CarouselItem, CarouselItem, CarouselItem]
        }
      });
      wrapper.vm.$forceUpdate();
      wrapper.vm.next();
      setTimeout(() => {
        const items = wrapper.findAll('.mtd-carousel-item');
        expect(items.wrappers[3].classes()).include('mtd-carousel-item-active');
        done();
      }, 10);
    });

    it('setActiveItem', done => {
      const wrapper = mount(Carousel, {
        propsData: {
          initialIndex: 1,
          autoplay: false,
        },
        attachToDocument: true,
        slots: {
          default: [CarouselItem, CarouselItem, CarouselItem]
        }
      });
      wrapper.vm.$forceUpdate();
      wrapper.vm.setActiveItem(2);
      setTimeout(() => {
        try {
          const items = wrapper.findAll('.mtd-carousel-item');
          expect(items.wrappers[3].classes()).include('mtd-carousel-item-active');
          done();
        } catch(e) {
          done(e);
        }
      }, 10);
    });
  });

  createDemoTest(DemoContexts);
});
