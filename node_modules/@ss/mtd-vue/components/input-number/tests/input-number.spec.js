import { mount } from '@vue/test-utils';
import InputNumber from '../input-number.vue';
import { createDemoTest, waitImmediate } from '@test/util';
const DemoContexts = require.context('./demo', true, /\.vue$/);

describe('InputNumber', function () {
  it('create', () => {
    const wrapper = mount(InputNumber);
    expect(wrapper.exists()).to.be.true;
  });

  describe('value', () => {
    it('valid number', () => {
      const propsData = {
        value: 66
      };
      const wrapper = mount(InputNumber, {
        propsData
      });
      expect(wrapper.find('input').element.value).to.equal(propsData.value.toString());

      wrapper.setProps({
        value: '66.0'
      });
      expect(wrapper.find('input').element.value).to.equal('66');

      wrapper.setProps({
        value: '66.1'
      });
      expect(wrapper.find('input').element.value).to.equal('66.1');
    });

    it('valid scientific enumeration', () => {
      const propsData = {
        value: 12345678901234567890123456,
        precision: 2
      };
      const wrapper = mount(InputNumber, {
        propsData
      });
      expect(wrapper.find('input').element.value).to.equal('1.2345678901234568e+25');

      wrapper.setProps({
        value: 1.2345678901234568e+25,
        precision: 2
      });
      expect(wrapper.find('input').element.value).to.equal('1.2345678901234568e+25');

      wrapper.setProps({
        value: 1e-2,
        precision: 2
      });
      expect(wrapper.find('input').element.value).to.equal('0.01');

      wrapper.setProps({
        value: 1e-10,
        precision: 2
      });
      expect(wrapper.find('input').element.value).to.equal('0.00');
    });

    it('show value should alway equal props.value when value large than max', () => {
      const propsData = {
        value: 13,
        max: 10
      };
      const wrapper = mount(InputNumber, {
        propsData
      });
      expect(wrapper.find('input').element.value).to.equal(`${propsData.value}`);
    });

    it('show value should alway equal props.value when value less than min', () => {
      const propsData = {
        value: 3,
        min: 5
      };
      const wrapper = mount(InputNumber, {
        propsData
      });
      expect(wrapper.find('input').element.value).to.equal(`${propsData.value}`);
    });

    it('negative number', () => {
      const propsData = {
        value: '-98'
      };
      const wrapper = mount(InputNumber, {
        propsData
      });
      expect(wrapper.find('input').element.value).to.equal('-98');
    });

    it('negative zero', () => {
      const propsData = {
        value: '-0'
      };
      const wrapper = mount(InputNumber, {
        propsData
      });
      expect(wrapper.find('input').element.value).to.equal('0');
    });
  });

  describe('input directly', () => {
    let wrapper;
    let input;

    beforeEach(() => {
      wrapper = mount(InputNumber);
      input = wrapper.find('input');
    });

    it('input valid number', () => {
      input.setValue('10');
      expect(input.element.value).to.equal('10');
      input.trigger('change');
      expect(wrapper.emitted().change[0][0]).to.equal(10, 'should emit 10.');

      // input.setValue('10.0');
      // expect(input.element.value).to.equal('10.0');
      // input.trigger('change');
      // expect(wrapper.emitted().change.length).to.equal(1, 'should not emit change event');
      // expect(wrapper.emitted().change[0][0]).to.equal(10);

      // input.setValue('');
      // expect(input.element.value).to.equal('');
      // input.trigger('change');
      // expect(wrapper.emitted().change.length).to.equal(2);
      // expect(wrapper.emitted().change[1][0]).to.equal(null);
    });

    it('input invalid number', () => {
      input.setValue('asss');
      expect(input.element.value).to.equal('asss');
      input.trigger('change');
      expect(wrapper.emitted().change).to.be.undefined;
      expect(input.element.value).to.equal('');

      input.setValue('10.0.0');
      expect(input.element.value).to.equal('10.0.0');
      input.trigger('change');
      expect(wrapper.emitted().change.length).to.equal(1);
      expect(wrapper.emitted().change[0][0]).to.equal(10);
    });

    it('input invalid string with number', () => {
      input.setValue('2xxx');
      expect(input.element.value).to.equal('2xxx');
      input.trigger('change');
      expect(wrapper.emitted().change.length).to.equal(1);
      expect(wrapper.emitted().change[0][0]).to.equal(2);
    });

    it('input invalid decimal point with max number', () => {
      const propsData = {
        max: 10
      };
      const wrapper = mount(InputNumber, {
        propsData
      });
      const input = wrapper.find('input');
      input.setValue('15.');
      expect(input.element.value).to.equal('15.');
      input.trigger('change');
      expect(wrapper.emitted().change.length).to.equal(1);
      expect(wrapper.emitted().change[0][0]).to.equal(propsData.max);
    });

    it('input invalid decimal point with min number', () => {
      const propsData = {
        min: 5
      };
      const wrapper = mount(InputNumber, {
        propsData
      });
      const input = wrapper.find('input');
      input.setValue('3');
      expect(input.element.value).to.equal('3');
      input.trigger('change');
      expect(wrapper.emitted().change.length).to.equal(1);
      expect(wrapper.emitted().change[0][0]).to.equal(propsData.min);
    });

    it('input negative symbol', () => {
      input.setValue('-');
      expect(input.element.value).to.equal('-');
      input.trigger('change');
      expect(input.element.value).to.equal('');
      expect(wrapper.emitted().change).to.be.undefined;
    });

    it('input negative number', () => {
      input.setValue('-98');
      expect(input.element.value).to.equal('-98');
      input.trigger('change');
      expect(wrapper.emitted().change.length).to.equal(1);
      expect(wrapper.emitted().change[0][0]).to.equal(-98);
    });

    it('input negative zero', () => {
      input.setValue('-0');
      expect(input.element.value).to.equal('-0');
      input.trigger('change');
      expect(wrapper.emitted().change.length).to.equal(1);
      expect(wrapper.emitted().change[0][0]).to.eql(0);
    });

    it('input empty text and change', () => {
      input.setValue('  ');
      expect(input.element.value).to.equal('');
      input.trigger('change');
      expect(wrapper.emitted().change).to.be.undefined;
    });

    it('should allow to input text like "1."', () => {
      input.setValue('1.');
      expect(input.element.value).to.equal('1.');
      input.trigger('change');
      expect(wrapper.emitted().change.length).to.equal(1);
      expect(wrapper.emitted().change[0][0]).to.equal(1);
    });

    it('should allow to input text like ".1"', () => {
      input.setValue('.1');
      expect(input.element.value).to.equal('.1');
      input.trigger('change');
      expect(wrapper.emitted().change.length).to.equal(1);
      expect(wrapper.emitted().change[0][0]).to.equal(0.1);
    });

    it('input decimal value with handle up/down', () => {
      input.setValue('3.1');
      expect(input.element.value).to.equal('3.1');
      input.trigger('change');
      expect(wrapper.emitted().change.length).to.equal(1);
      expect(wrapper.emitted().change[0][0]).to.equal(3.1);

      input.setValue('3.1234');
      expect(input.element.value).to.equal('3.1234');
      input.trigger('change');
      expect(wrapper.emitted().change.length).to.equal(2);
      expect(wrapper.emitted().change[1][0]).to.equal(3.1234);
      wrapper.setProps({
        value: wrapper.emitted().change[1][0]
      });
      const upHandler = wrapper.find('span.mtd-input-number-handle-up');
      upHandler.trigger('click');
      expect(wrapper.emitted().change.length).to.equal(3);
      expect(wrapper.emitted().change[2][0]).to.equal(4.1234);
    });
  });

  it('placeholder', () => {
    const propsData = {
      placeholder: 'please type numer'
    };
    const wrapper = mount(InputNumber, {
      propsData
    });
    expect(wrapper.find('input').attributes('placeholder')).to.equal(propsData.placeholder);
  });

  it('name', () => {
    const propsData = {
      name: 'input-number'
    };
    const wrapper = mount(InputNumber, {
      propsData
    });
    expect(wrapper.find('input').attributes('name')).to.equal(propsData.name);
  });

  it('size', () => {
    const sizes = ['small', 'large'];
    sizes.forEach(size => {
      const wrapper = mount(InputNumber, {
        propsData: {
          size
        }
      });
      expect(wrapper.classes()).to.include(`mtd-input-number-${size}`);
    });
  });

  describe('disabled', () => {
    const propsData = {
      disabled: true,
      value: 5
    };
    const wrapper = mount(InputNumber, {
      propsData
    });
    it('disabled', () => {
      expect(wrapper.classes()).to.include('mtd-input-number-disabled');
      expect(wrapper.find('input').attributes('disabled')).to.equal('disabled');
    });

    it('press keyboard up/down should not work', () => {
      const input = wrapper.find('input');
      input.trigger('keydown.up');
      expect(input.element.value).to.equal(propsData.value.toString());

      input.trigger('keydown.down');
      expect(input.element.value).to.equal(propsData.value.toString());
      expect(wrapper.emitted().change).to.be.undefined;
    });

    it('click up/down button should not work', () => {
      const input = wrapper.find('input');
      const upHandler = wrapper.find('span.mtd-input-number-handle-up');
      upHandler.trigger('click');
      expect(input.element.value).to.equal(propsData.value.toString());

      const downHandler = wrapper.find('span.mtd-input-number-handle-down');
      downHandler.trigger('click');
      expect(input.element.value).to.equal(propsData.value.toString());

      expect(wrapper.emitted().change).to.be.undefined;
    });
  })

  it('invalid', () => {
    const wrapper = mount(InputNumber, {
      propsData: {
        invalid: true
      }
    });
    expect(wrapper.classes()).to.include('mtd-input-number-invalid');
  });

  describe('precision', () => {
    it('display precision', () => {
      const propsData = {
        value: 5,
        precision: 2
      };
      const wrapper = mount(InputNumber, {
        propsData
      });
      expect(wrapper.find('input').element.value).to.equal(propsData.value.toFixed(propsData.precision));
    });

    it('input valid number', () => {
      const propsData = {
        precision: 2
      };
      const wrapper = mount(InputNumber, {
        propsData
      });
      const input = wrapper.find('input');
      const _temp = 5;
      input.setValue(_temp);
      input.trigger('change');
      expect(wrapper.emitted().change.length).to.equal(1);
      expect(wrapper.emitted().change[0][0]).to.equal(_temp);

      input.setValue('5.456');
      input.trigger('change');
      expect(wrapper.emitted().change.length).to.equal(2);
      wrapper.setProps({
        value: wrapper.emitted().change[1][0]
      });
      expect(input.element.value).to.equal('5.45');
      expect(wrapper.emitted().change[1][0]).to.equal(5.45);
    });

    it('input invalid number', () => {
      const propsData = {
        precision: 2
      };
      const wrapper = mount(InputNumber, {
        propsData
      });
      const input = wrapper.find('input');
      input.setValue('5x');
      input.trigger('change');
      expect(wrapper.emitted().change.length).to.equal(1);
      expect(wrapper.emitted().change[0][0]).to.equal(5);
    });

    it('input with step decimal point', async () => {
      const propsData = {
        value: 2.01,
        precision: 2,
        step: 0.01
      };
      const nextValue = 2.02;
      const wrapper = mount(InputNumber, {
        propsData,
        listeners: {
          input: (v) => {
            wrapper.setProps({ value: v })
          }
        }
      });
      const upHandler = wrapper.find('span.mtd-input-number-handle-up');
      upHandler.trigger('click');
      await waitImmediate()
      expect(wrapper.emitted().change[0][0]).to.equal(nextValue);
      expect(wrapper.find('input').element.value).to.equal(nextValue.toString());
    });
  });

  describe('step', () => {
    it('step up', async () => {
      const values = [1, 1.1];
      return Promise.all(values.map(async (value) => {
        const propsData = {
          value,
          step: 2
        };
        const wrapper = mount(InputNumber, {
          propsData,
          listeners: {
            input: (v) => {
              wrapper.setProps({ value: v })
            }
          }
        });
        const upHandler = wrapper.find('span.mtd-input-number-handle-up');
        upHandler.trigger('click');
        await waitImmediate();
        expect(wrapper.find('input').element.value).to.equal((propsData.value + propsData.step).toString());
        expect(wrapper.emitted().change[0][0]).to.equal(propsData.value + propsData.step);
      }));
    });

    it('step down', () => {
      const values = [1, 1.1];
      const answers = [-1, -0.9]
      return Promise.all(values.map(async (value, index) => {
        const propsData = {
          value,
          step: 2
        };
        const wrapper = mount(InputNumber, {
          propsData,
          listeners: {
            input: (v) => {
              wrapper.setProps({ value: v })
            }
          }
        });
        const downHandler = wrapper.find('span.mtd-input-number-handle-down');
        downHandler.trigger('click');
        await waitImmediate();
        expect(wrapper.find('input').element.value).to.equal(answers[index].toString());
        expect(wrapper.emitted().change[0][0]).to.equal(answers[index]);
      }));
    });
  });

  it('controls', () => {
    const wrapper = mount(InputNumber, {
      propsData: {
        controls: false
      }
    });
    expect(wrapper.classes()).to.include('mtd-input-number-without-controls');
    const upHandler = wrapper.find('.mtd-input-number-handle-up');
    expect(upHandler.exists()).to.be.false;

    const downHandler = wrapper.find('.mtd-input-number-handle-down');
    expect(downHandler.exists()).to.be.false;
  });

  it('controls-position', () => {
    const wrapper = mount(InputNumber, {
      propsData: {
        'controls-position': 'right'
      }
    });
    expect(wrapper.classes()).to.include('mtd-input-number-controls-right');
  });

  describe('check events', () => {
    it('chnage/focus/blur called', () => {
      const events = ['change', 'focus', 'blur'];
      const wrapper = mount(InputNumber);
      events.forEach(event => {
        wrapper.vm.$emit(event);
        expect(wrapper.emitted()[event].length).to.equal(1);
      });
    });

    it('focus', () => {
      const wrapper = mount(InputNumber);
      const input = wrapper.find('input');
      input.trigger('focus');
      expect(wrapper.emitted().focus.length).to.equal(1);
    });

    it('blur', () => {
      const wrapper = mount(InputNumber);
      const input = wrapper.find('input');
      input.trigger('blur');
      expect(wrapper.emitted().blur.length).to.equal(1);
    });
  });

  describe('keyboard works', () => {
    it('up works', async () => {
      const propsData = {
        value: 5
      };
      const wrapper = mount(InputNumber, {
        propsData,
        listeners: {
          input: (v) => {
            wrapper.setProps({ value: v })
          }
        }
      });
      const input = wrapper.find('input');
      input.trigger('keydown.up');
      await waitImmediate();
      expect(input.element.value).to.equal((propsData.value + 1).toString());
      expect(wrapper.emitted().change.length).to.equal(1);
      expect(wrapper.emitted().change[0][0]).to.equal(propsData.value + 1);
    });

    it('press keyboard up, change value should not higher than max', async () => {
      const propsData = {
        value: 9,
        max: 10
      };
      const wrapper = mount(InputNumber, {
        propsData,
        listeners: {
          input: (v) => {
            wrapper.setProps({ value: v })
          }
        }
      });
      const input = wrapper.find('input');
      input.trigger('keydown.up');
      await waitImmediate()
      input.setValue(wrapper.emitted().change[0][0]);
      input.trigger('keydown.up');
      expect(input.element.value).to.equal((propsData.max).toString());
      expect(wrapper.emitted().change.length).to.equal(1);
      expect(wrapper.emitted().change[0][0]).to.equal(propsData.max);
    });

    it('down works', async () => {
      const propsData = {
        value: 5
      };
      const wrapper = mount(InputNumber, {
        propsData,
        listeners: {
          input: (v) => {
            wrapper.setProps({ value: v })
          }
        }
      });
      const input = wrapper.find('input');
      input.trigger('keydown.down');
      await waitImmediate();
      expect(wrapper.find('input').element.value).to.equal((propsData.value - 1).toString());
      expect(wrapper.emitted().change.length).to.equal(1);
      expect(wrapper.emitted().change[0][0]).to.equal(propsData.value - 1);
    });

    it('press keyboard down, change value should not lower than min', async () => {
      const propsData = {
        value: 9,
        min: 8
      };
      const wrapper = mount(InputNumber, {
        propsData,
        listeners: {
          input: (v) => {
            wrapper.setProps({ value: v })
          }
        }
      });
      const input = wrapper.find('input');
      input.trigger('keydown.down');
      await waitImmediate();
      input.setValue(wrapper.emitted().change[0][0]);
      input.trigger('keydown.down');
      await waitImmediate();
      expect(input.element.value).to.equal((propsData.min).toString());
      expect(wrapper.emitted().change.length).to.equal(1);
      expect(wrapper.emitted().change[0][0]).to.equal(propsData.min);
    });
  });

  describe('clickable', () => {
    it('up button works', async () => {
      const propsData = {
        value: 5
      };
      const wrapper = mount(InputNumber, {
        propsData,
        listeners: {
          input: (v) => {
            wrapper.setProps({ value: v })
          }
        }
      });
      const upHandler = wrapper.find('span.mtd-input-number-handle-up');
      upHandler.trigger('click');
      await waitImmediate();
      expect(wrapper.find('input').element.value).to.equal((propsData.value + 1).toString());
      expect(wrapper.emitted().change.length).to.equal(1);
      expect(wrapper.emitted().change[0][0]).to.equal(propsData.value + 1);
    });

    it('click up button, change value should not higher than max', async () => {
      const propsData = {
        value: 9,
        max: 10
      };
      const wrapper = mount(InputNumber, {
        propsData,
        listeners: {
          input: (v) => {
            wrapper.setProps({ value: v })
          }
        }
      });
      const input = wrapper.find('input');
      const upHandler = wrapper.find('span.mtd-input-number-handle-up');
      upHandler.trigger('click');
      await waitImmediate();
      input.setValue(wrapper.emitted().change[0][0]);
      upHandler.trigger('click');
      await waitImmediate();
      expect(input.element.value).to.equal((propsData.max).toString());
      expect(wrapper.emitted().change.length).to.equal(1);
      expect(wrapper.emitted().change[0][0]).to.equal(propsData.max);
    });

    it('down button works', async () => {
      const propsData = {
        value: 5
      };
      const wrapper = mount(InputNumber, {
        propsData,
        listeners: {
          input: (v) => {
            wrapper.setProps({ value: v })
          }
        }
      });
      const downHandler = wrapper.find('span.mtd-input-number-handle-down');
      downHandler.trigger('click');
      await waitImmediate();
      expect(wrapper.find('input').element.value).to.equal((propsData.value - 1).toString());
      expect(wrapper.emitted().change.length).to.equal(1);
      expect(wrapper.emitted().change[0][0]).to.equal(propsData.value - 1);
    });

    it('click down button, change value should not lower than min', async () => {
      const propsData = {
        value: 9,
        min: 8
      };
      const wrapper = mount(InputNumber, {
        propsData,
        listeners: {
          input: (v) => {
            wrapper.setProps({ value: v })
          }
        }
      });
      const input = wrapper.find('input');
      const downHandler = wrapper.find('span.mtd-input-number-handle-down');
      downHandler.trigger('click');
      await waitImmediate();

      input.setValue(wrapper.emitted().change[0][0]);
      downHandler.trigger('click');

      await waitImmediate();
      expect(input.element.value).to.equal((propsData.min).toString());
      expect(wrapper.emitted().change.length).to.equal(1);
      expect(wrapper.emitted().change[0][0]).to.equal(propsData.min);
    });

    it('up button works on empty input', () => {
      const wrapper = mount(InputNumber);
      const upHandler = wrapper.find('span.mtd-input-number-handle-up');
      upHandler.trigger('click');
      expect(wrapper.emitted().change[0][0]).to.equal(1);
    });

    it('down button works on empty input', () => {
      const wrapper = mount(InputNumber);
      const downHandler = wrapper.find('span.mtd-input-number-handle-down');
      downHandler.trigger('click');
      expect(wrapper.emitted().change[0][0]).to.equal(-1);
    });

    it('up button works on empty input with min and max, positive number', async () => {
      const propsData = {
        min: 2,
        max: 10
      };
      const wrapper = mount(InputNumber, {
        propsData,
        listeners: {
          input: (v) => {
            wrapper.setProps({ value: v })
          }
        }
      });
      const upHandler = wrapper.find('span.mtd-input-number-handle-up');
      upHandler.trigger('click');
      await waitImmediate();
      expect(wrapper.find('input').element.value).to.equal((propsData.min).toString());
      expect(wrapper.emitted().change[0][0]).to.equal(propsData.min);
    });

    it('up button works on empty input with min and max, negative number', async () => {
      const propsData = {
        min: -10,
        max: -2
      };
      const wrapper = mount(InputNumber, {
        propsData,
        listeners: {
          input: (v) => {
            wrapper.setProps({ value: v })
          }
        }
      });
      const upHandler = wrapper.find('span.mtd-input-number-handle-up');
      upHandler.trigger('click');
      await waitImmediate();
      expect(wrapper.find('input').element.value).to.equal((propsData.min).toString());
      expect(wrapper.emitted().change[0][0]).to.equal(propsData.min);
    });

    it('down button works on empty input with min and max, positive number', async () => {
      const propsData = {
        min: 2,
        max: 10
      };
      const wrapper = mount(InputNumber, {
        propsData,
        listeners: {
          input: (v) => {
            wrapper.setProps({ value: v })
          }
        }
      });
      const downHandler = wrapper.find('span.mtd-input-number-handle-down');
      downHandler.trigger('click');
      await waitImmediate();
      expect(wrapper.find('input').element.value).to.equal((propsData.min).toString());
      expect(wrapper.emitted().change[0][0]).to.equal(propsData.min);
    });

    it('down button works on empty input with min and max, negative number', async () => {
      const propsData = {
        min: -10,
        max: -2
      };
      const wrapper = mount(InputNumber, {
        propsData,
        listeners: {
          input: (v) => {
            wrapper.setProps({ value: v })
          }
        }
      });
      const downHandler = wrapper.find('span.mtd-input-number-handle-down');
      downHandler.trigger('click');
      await waitImmediate();
      expect(wrapper.find('input').element.value).to.equal((propsData.min).toString());
      expect(wrapper.emitted().change[0][0]).to.equal(propsData.min);
    });
  });

  describe('formatter', () => {
    it('formatter on default', () => {
      const propsData = {
        value: 5,
        formatter: num => `$ ${num}`
      };
      const wrapper = mount(InputNumber, {
        propsData,
      });
      expect(wrapper.find('input').element.value).to.equal(`$ ${propsData.value}`);
    });

    it('formatter on click', async () => {
      const propsData = {
        value: 5,
        formatter: num => `$ ${num}`
      };
      const wrapper = mount(InputNumber, {
        propsData,
        listeners: {
          input: (v) => {
            wrapper.setProps({ value: v })
          }
        }
      });
      const input = wrapper.find('input');
      const upHandler = wrapper.find('span.mtd-input-number-handle-up');
      upHandler.trigger('click');
      await waitImmediate();
      expect(input.element.value).to.equal(`$ ${propsData.value + 1}`);
      expect(wrapper.emitted().change[0][0]).to.equal(propsData.value + 1);

      const downHandler = wrapper.find('span.mtd-input-number-handle-down');
      downHandler.trigger('click');
      await waitImmediate();
      expect(input.element.value).to.equal(`$ ${propsData.value}`);
      expect(wrapper.emitted().change[1][0]).to.equal(propsData.value);
    });

    it('formatter on keydown', async () => {
      const propsData = {
        value: 5,
        formatter: num => `$ ${num}`
      };
      const wrapper = mount(InputNumber, {
        propsData,
        listeners: {
          input: (v) => {
            wrapper.setProps({ value: v })
          }
        }
      });
      const input = wrapper.find('input');
      input.trigger('keydown.up');
      await waitImmediate();
      expect(input.element.value).to.equal(`$ ${propsData.value + 1}`);
      expect(wrapper.emitted().change[0][0]).to.equal(propsData.value + 1);

      input.trigger('keydown.down');
      await waitImmediate();
      expect(input.element.value).to.equal(`$ ${propsData.value}`);
      expect(wrapper.emitted().change[1][0]).to.equal(propsData.value);
    });

    it('formatter on direct input', async () => {
      const propsData = {
        formatter: num => `$ ${num}`
      };
      const wrapper = mount(InputNumber, {
        propsData,
        listeners: {
          input: (v) => {
            wrapper.setProps({ value: v })
          }
        }
      });
      const input = wrapper.find('input');
      input.setValue('100');
      expect(input.element.value).to.equal('$ 100');
      input.trigger('change');
      await waitImmediate();
      expect(wrapper.emitted().change.length).to.equal(1);
      expect(wrapper.emitted().change[0][0]).to.equal(100);
    });
  });

  describe('formatter and parser', () => {
    let wrapper;
    let input;

    beforeEach(() => {
      wrapper = mount(InputNumber, {
        propsData: {
          formatter: num => `$ ${num}`,
          parser: num => num.replace('$', '')
        },
        listeners: {
          input: (v) => {
            wrapper.setProps({ value: v })
          }
        }
      });
      input = wrapper.find('input');
    });

    it('parser on default', async () => {
      input.setValue(5);
      expect(wrapper.find('input').element.value).to.equal(`$ 5`);
      input.trigger('change');
      await waitImmediate();
      expect(wrapper.emitted().change.length).to.equal(1);
      expect(wrapper.emitted().change[0][0]).to.equal(5);
    });

    it('parser on click', async () => {
      wrapper.setProps({
        value: 5
      });
      const input = wrapper.find('input');
      const upHandler = wrapper.find('span.mtd-input-number-handle-up');
      upHandler.trigger('click');
      await waitImmediate();
      expect(input.element.value).to.equal('$ 6');
      expect(wrapper.emitted().change[0][0]).to.equal(6);

      const downHandler = wrapper.find('span.mtd-input-number-handle-down');
      downHandler.trigger('click');
      await waitImmediate();
      expect(input.element.value).to.equal('$ 5');
      expect(wrapper.emitted().change[1][0]).to.equal(5);
    });

    it('parser on keydown', async () => {
      wrapper.setProps({
        value: 5
      });
      const input = wrapper.find('input');
      input.trigger('keydown.up');
      await waitImmediate();
      expect(input.element.value).to.equal('$ 6');
      expect(wrapper.emitted().change[0][0]).to.equal(6);

      input.trigger('keydown.down');
      await waitImmediate();
      expect(input.element.value).to.equal('$ 5');
      expect(wrapper.emitted().change[1][0]).to.equal(5);
    });

    it('parser on direct input', async () => {
      input.setValue('100');
      expect(input.element.value).to.equal('$ 100');
      input.trigger('change');
      await waitImmediate();
      expect(wrapper.emitted().change.length).to.equal(1);
      expect(wrapper.emitted().change[0][0]).to.equal(100);
    });
  });

  it('only input int', async () => {
    const wrapper = mount(InputNumber, {
      propsData: {
        precision: 0,
        value: 3.5,
      }
    });
    const input = wrapper.find('input');
    expect(input.element.value).to.equal('3');
    input.setValue('4.5');
    expect(input.element.value).to.equal('4.5');
    input.trigger('change');
    await waitImmediate();
    expect(wrapper.emitted().change.length).to.equal(1);
    expect(wrapper.emitted().change[0][0]).to.equal(4);
  });

  createDemoTest(DemoContexts);
});
