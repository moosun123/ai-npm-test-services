import { mount, shallowMount, createLocalVue } from '@vue/test-utils';
import Tabs from '../src/tabs.vue';
import tabPane from '../src/tab-pane.vue';
import tabDrop from '../src/tab-drop.vue';
import TabOne from '../src/tab-one';

import { createDemoTest, wait, waitImmediate } from '@test/util';
import { expect } from 'chai';
const DemoContexts = require.context('./demo', true, /\.vue$/);

describe('Tabs', function () {
  describe('base', function () {
    before(function () {
      const vue = createLocalVue();
      vue.component(tabPane.name, tabPane);
      vue.component(tabDrop.name, tabDrop);
      const tabList = [1, 2, 3, 4, 5].map((number, index) => {
        const n = 'Tab' + number;
        return {
          label: n,
          value: n,
          disabled: index === 1
        };
      });
      let slots = tabList.map(function (tab) {
        return `<mtd-tab-pane value="${tab.value}" label="${tab.label}" ${tab.disabled ? 'disabled' : '' }></mtd-tab-pane>`;
      });
      slots.push(`<mtd-tab-drop label="xxx"><mtd-tab-pane label="tab6" value="6"></mtd-tab-pane>
        <mtd-tab-pane label="tab7" value="7"></mtd-tab-pane>
        <mtd-tab-pane label="tab8" value="8"></mtd-tab-pane>
      </mtd-tab-drop>`);
      // tabList.push({
      //   tabDropInfo: {
      //     moreTabs: [
      //       {label: "Tab6", value: "6"},
      //       {label: "Tab7", value: "7"},
      //       {label: "Tab8", value: "8"}
      //     ]
      //   }
      // })
      let value = '1';
      this.wrapper = mount(Tabs, {
        propsData: {
          value: value,
        },
        listeners: {
          input: (v) => { this.wrapper.setProps({ value: v }); }
        },
        slots: {
          default: slots
        },
        localVue: vue,
        sync: false,
      });

      // this.wrapper.setData({
      //   panes: tabList
      // });
    });
    it('class', function (done) {
      const { wrapper } = this;
      expect(wrapper.classes()).to.include('mtd-tabs');
      setTimeout(() => {
        const items = wrapper.findAll(".mtd-tabs-item");

        expect(items.exists()).to.be.true;
        expect(items.length).to.be.eql(6);
        done();
      }, 200);
    });

    it('test tabs click active', async function () {
      await waitImmediate();
      const { wrapper } = this;

      wrapper.setProps({
        value: 'Tab1'
      });

      const tabs = wrapper.find({
        ref: 'nav'
      }).findAll('.mtd-tabs-item').wrappers;

      const tabWillActive = tabs[2];
      tabWillActive.trigger('click');
      await waitImmediate();
      expect(wrapper.emitted()['tab-click']).to.be.ok;
      expect(tabWillActive.classes()).to.include('mtd-tab-active');
    });

    xit('test tabs props size', function (done) {
      // 内部组件取到的 size 有问题
      const { wrapper } = this;
      const sizeList = ['small'];
      sizeList.forEach((item) => {
        wrapper.setProps({
          size: item
        });
        setTimeout(() => {
          const tabs =  wrapper.find({
            ref: 'nav'
          }).find({
            ref: 'tabs'
          });
          const classes = tabs.classes();
          expect(tabs.props().size).to.equal(item);
          expect(classes).to.include(`mtd-tabs-item-${item}`);
          done();
        }, 200);
      });
    });

    it('test tabs disabled', function () {
      const { wrapper } = this;
      const tabs = wrapper.find({
        ref: 'nav'
      }).findAll('.mtd-tabs-item').wrappers;
      const tabWillDisabel = tabs[1];

      expect(tabWillDisabel.classes()).to.include(`mtd-tabs-item-disabled`);
    });

    it('test tabs more', function (){
      const { wrapper } = this;
      const more = wrapper.find({
        ref: 'nav'
      }).findAll('.mtd-tabs-select-item').wrappers;

      expect(more[0].classes()).to.include('mtd-tabs-select-item');
    });
  });

  // 组件内部获取到的数据类型与期望的数据类型不一致
  xdescribe('test tabs tabPosition', function () {
    before(function () {
      const tabList = [1, 2, 3, 4, 5].map((number) => {
        const n = 'Tab' + number;
        return {
          label: n,
          value: n
        };
      });
      const vue = createLocalVue();
      vue.component(tabPane.name, tabPane);
      vue.component(tabDrop.name, tabDrop);

      this.wrapper = mount(Tabs, {
        propsData: {
          tabPosition: 'left',
          value: '1'
        },
        slots: {
          default: tabList.map(function (tab) {
            return `<mtd-tab-pane label="${tab.label}" value="${tab.value}"></mtd-tab-pane>`;
          })
        },
        localVue: vue,
      });

      this.wrapper.setData({
        panes: tabList
      });
    })
    it('test tabs class', function () {
      const { wrapper } = this;
      expect(wrapper.classes()).to.include('mtd-tabs');
      expect(wrapper.classes()).to.include('mtd-tabs-left');
    });

  });

  describe('Tabs type card', function () {
    before(function () {
      const tabList = [1, 2, 3, 4, 5].map((number) => {
        const n = 'Tab' + number;
        return {
          label: n,
          value: n
        };
      });

      const vue = createLocalVue();
      vue.component(tabPane.name, tabPane);
      vue.component(tabDrop.name, tabDrop);

      this.wrapper = mount(Tabs, {
        localVue: vue,
        propsData: {
          type: 'card'
        },
        slots: {
          default: tabList.map(function (tab) {
            return `<mtd-tab-pane value="${tab.value}" label="${tab.label}" ${tab.disabled ? 'disabled' : '' }></mtd-tab-pane>`;
          })
        },
        sync: false,
      });
    })
    it('test tabs class', function () {
      const { wrapper } = this;
      expect(wrapper.classes()).to.include('mtd-tabs');
      expect(wrapper.classes()).to.include('mtd-tabs-card');
    });
  });

  createDemoTest(DemoContexts);
});
