import { mount } from '@vue/test-utils';
import Rate from '../rate.vue';

describe('Rate', function () {
  it('create', () => {
    const wrapper = mount(Rate);
    expect(wrapper.vm).to.exist;
  });

  it('count', () => {
    const wrapper = mount(Rate, {
      propsData: {
        count: 10
      }
    });
    const stars = wrapper.findAll('.mtd-rate-item');
    expect(stars.length).to.equal(10);
  });

  it('color', () => {
    const wrapper = mount(Rate, {
      propsData: {
        color: { 2: '#FACE3A', 4: '#F7BA2A', 5: '#FF9900' },
        value: 4
      }
    });
    const currentIcon = wrapper.findAll('.mtd-rate-item').wrappers[3].find('.mtd-rate-icon').element;
    expect(currentIcon.style.color).to.equal('rgb(247, 186, 42)'); // #F7BA2A
  });

  it('texts', () => {
    const wrapper = mount(Rate, {
      propsData: {
        texts: ['1', '2', '3', '4', '5'],
        value: 4
      }
    });
    const text = wrapper.find('.mtd-rate-text');
    expect(text.text()).to.equal('4');
  });

  it('disabled', () => {
    const wrapper = mount(Rate, {
      propsData: {
        disabled: true,
        value: 4,
      }
    });
    const firstStar = wrapper.findAll('.mtd-rate-item').wrappers[0];
    firstStar.trigger('click');
    expect(wrapper.vm.value).to.equal(4);
  });

  it('test rate click and value change', () => {
    const wrapper = mount(Rate, {
      propsData: {
        value: 1
      }
    });
    expect(wrapper.vm.value).to.equal(1);
    const fourthStar = wrapper.findAll('.mtd-rate-item').wrappers[3];
    fourthStar.trigger('click');
    expect(wrapper.emitted().input.length).to.equal(1);
    expect(wrapper.emitted().input[0]).to.eql([4]);
  });

  it('test rate allow half', () => {
    const wrapper = mount(Rate, {
      propsData: {
        value: 1.5,
        allowHalf: true
      }
    });
    const secondStar = wrapper.findAll('.mtd-rate-item').wrappers[1];
    wrapper.vm.setCurrentValue(2, {
      currentTarget: {
        clientWidth: 24,
      },
      offsetX: 2,
    });
    secondStar.trigger('click');
    expect(wrapper.emitted().input.length).to.equal(1);
    expect(wrapper.emitted().input[0]).to.eql([1.5]);
  });

  it('test rate allow clear', () => {
    const wrapper = mount(Rate, {
      propsData: {
        value: 2,
        allowClear: true
      }
    });
    const secondStar = wrapper.findAll('.mtd-rate-item').wrappers[1];
    secondStar.trigger('click');
    expect(wrapper.emitted().input.length).to.equal(1);
    expect(wrapper.emitted().input[0]).to.eql([0]);
  });
});
