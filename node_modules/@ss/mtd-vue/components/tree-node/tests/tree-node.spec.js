import { mount } from '@vue/test-utils';
import TreeNode from '../tree-node.vue';

function noop () {}

describe('TreeNode', function () {
  it('create', () => {
    const node = {};
    const data = {};

    const wrapper = mount(TreeNode, {
      propsData: {
        node,
        data,
      },
      provide: {
        tree () {
          return {
            indent: 16,
            handleDragStart: noop,
            handleDragOver: noop,
            handleDragEnd: noop,
          };
        },
      },
    });
    expect(wrapper.vm).to.exist;
  });
  it('node.checkable', function () {
    const node = {};
    const data = {};

    const wrapper = mount(TreeNode, {
      propsData: {
        node,
        data,
      },
      provide: {
        tree () {
          return {
            indent: 16,
            handleDragStart: noop,
            handleDragOver: noop,
            handleDragEnd: noop,
          };
        },
      },
    });
    expect(wrapper.find('.mtd-checkbox').exists(), 'expect checkbox is never existed.').to.be.false;

    const checkableWrapper = mount(TreeNode, {
      propsData: {
        node: {
          checkable: true,
        },
        data: data,
      },
      provide: {
        tree () {
          return {
            indent: 16,
            handleDragStart: noop,
            handleDragOver: noop,
            handleDragEnd: noop,
          };
        },
      },
    })
    expect(checkableWrapper.find('.mtd-checkbox').exists(), 'expect checkbox is exists').to.be.true;
  });

  it('node.disableCheckbox', function () {
    const data = {};
    const wrapper = mount(TreeNode, {
      propsData: {
        node: {
          checkable: true,
          disableCheckbox: false,
        },
        data,
      },
      provide: {
        tree () {
          return {
            indent: 16,
            handleDragStart: noop,
            handleDragOver: noop,
            handleDragEnd: noop,
          };
        },
      },
    });
    const checkbox = wrapper.find({ name: 'Checkbox' });
    expect(checkbox.props('disabled'), 'expect checkbox is enabled').to.be.not.true;

    const disabledWrapper = mount(TreeNode, {
      propsData: {
        node: {
          checkable: true,
          disableCheckbox: true,
        },
        data,
      },
      provide: {
        tree () {
          return {
            indent: 16,
            handleDragStart: noop,
            handleDragOver: noop,
            handleDragEnd: noop,
          };
        },
      },
    });
    const disableCheckbox = disabledWrapper.find({ name: 'Checkbox'});
    expect(disableCheckbox.props('disabled'), 'expect checkbox is disabled').to.be.true;
  });

  it('node.expanded', function () {
    const wrapper = mount(TreeNode, {
      propsData: {
        node: {
          expanded: true,
          children: [{ data: {} }],
        },
        data: {},
      },
      provide: {
        tree () {
          return {
            indent: 16,
            handleDragStart: noop,
            handleDragOver: noop,
            handleDragEnd: noop,
          };
        },
      },
    });
    expect(wrapper.classes('mtd-tree-node-expanded'), 'expect has expanded class').to.be.true;
    expect(wrapper.find('.mtd-tree-node-children').exists(), 'expect has children wrapper').to.be.true;

    const collapseWrapper = mount(TreeNode, {
      propsData: {
        node: {
          expanded: false,
        },
        data: {},
      },
      provide: {
        tree () {
          return {
            indent: 16,
            handleDragStart: noop,
            handleDragOver: noop,
            handleDragEnd: noop,
          };
        },
      },
    });
    expect(collapseWrapper.classes('mtd-tree-node-expanded')).to.be.false;
    expect(collapseWrapper.find('.mtd-tree-node-children').exists()).to.be.false;
  });

  xit('should emit expand event when content click', function () {
    // todo 没写完
    const node = { expanded: true, };
    const data = {
      children: [{}],
    };
    const wrapper = mount(TreeNode, {
      propsData: {
        node: node,
        data,
      },
      provide: {
        tree () {
          return {
            indent: 16,
          };
        },
      },
    });
    wrapper.find('.mtd-tree-node-content').trigger('click');
    const expandEvent = wrapper.emitted().expand;
    expect(expandEvent.length).to.equal(1);
    // expand 事件参数 (node, data, { expanded })
    const args = expandEvent[0];
    expect(args[0]).to.equal(node);
    expect(args[1]).to.equal(data);
    expect(args[2]).to.eql({ expanded: false });

  });
});
