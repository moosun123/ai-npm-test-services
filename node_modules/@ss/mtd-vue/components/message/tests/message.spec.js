import { mount } from '@vue/test-utils';
import Message from '../component.vue';

describe('Message', function () {
  it('create', () => {
    const wrapper = mount(Message);
    expect(wrapper.vm).to.exist;
  });

  it('test string message', () => {
    const wrapper = mount(Message, {
      data () {
        return {
          message: 'string message',
        };
      },
    });
    expect(wrapper.find('.mtd-message-content').text()).to.equal('string message');
  });

  it('test html message', () => {
    const wrapper = mount(Message, {
      data () {
        return {
          message: '<p>html message</p>',
          dangerouslyUseHTMLString: true,
        };
      },
    });
    expect(wrapper.find('.mtd-message-content').find('p').text()).to.equal('html message');
  });

  it('invoke with type', () => {
    const wrapper = mount(Message, {
      data () {
        return {
          message: 'super!',
          type: 'loading',
        }
      },
    });
    expect(wrapper.find('i').find('.mtdicon-loading').exists()).to.be.true;
  });

  it('test custom class', () => {
    const wrapper = mount(Message, {
      data () {
        return {
          message: 'super!',
          className: 'my-skr',
        }
      },
    });
    expect(wrapper.find('.mtd-message').find('.my-skr').exists()).to.be.true;
  });

  it('test icon class', () => {
    const wrapper = mount(Message, {
      data () {
        return {
          message: 'super!',
          icon: 'mtdicon-search',
        };
      },
    });
    expect(wrapper.find('i').find('.mtdicon-search').exists()).to.be.true;
  });

  it('hide close btn', () => {
    const wrapper = mount(Message, {
      data () {
        return {
          message: 'super!',
          showClose: true,
        };
      },
    });
    expect(wrapper.find('.mtd-message-close').exists()).to.be.true;
  });

  it('custom close method', () => {
    const closeSpy = sinon.spy();
    const wrapper = mount(Message, {
      data () {
        return {
          message: 'super!',
          showClose: true,
          onClose: closeSpy,
        };
      },
    });

    expect(wrapper.find('.mtd-message-close').exists()).to.be.true;
    wrapper.find('.mtd-message-close').trigger('click');
    closeSpy.should.have.been.calledOnce;
  });
});
