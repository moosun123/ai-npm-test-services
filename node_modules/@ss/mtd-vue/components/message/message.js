import Vue from 'vue';
import Main from './component.vue';
import { isVNode } from '@/utils/vnode';
import { PopupManage } from '@/utils/popper';
import {
  getConfig,
} from '@/utils/config';

const MessageConstructor = Vue.extend(Main);

const instances = [];
let seed = 1;
// message的间隔距离px
const spacing = 12;

function updateOffset () {
  let position = spacing;
  instances.forEach((instance) => {
    instance.verticalOffset = position + instance.offset;
    position = position + instance.$el.offsetHeight + spacing;
  });
}

const Message = function (options) {
  options = options || {};
  if (typeof options === 'string') {
    options = {
      message: options,
    };
  }

  const userOnClose = options.onClose;
  const id = 'message_' + seed++;

  options.onClose = function () {
    Message.close(id, userOnClose);
  };
  const instance = new MessageConstructor({
    data: options,
  });
  if (isVNode(instance.message)) {
    instance.$slots.default = [instance.message];
    instance.message = null;
  }
  instance.id = id;
  instance.$mount();

  const { getPopupContainer } = options;
  const parent = getPopupContainer ? getPopupContainer() : getConfig().getPopupContainer();
  parent.appendChild(instance.$el);

  instance.dom = instance.$el;
  instance.dom.style.zIndex = PopupManage.nextZIndex();
  PopupManage.open(instance);

  let verticalOffset = options.offset || 0;
  instances.forEach(item => {
    verticalOffset += item.$el.offsetHeight + spacing;
  });
  verticalOffset += spacing;
  instance.verticalOffset = verticalOffset;
  instances.push(instance);
  return instance;
};

['success', 'warning', 'info', 'error', 'loading'].forEach(type => {
  Message[type] = options => {
    if (typeof options === 'string' || isVNode(options)) {
      options = {
        message: options,
      };
    }
    options.type = type;
    return Message(options);
  };
});

Message.close = function (id, userOnClose) {
  let index = -1;
  const len = instances.length;
  const instance = instances.filter((instance, i) => {
    if (instance.id === id) {
      index = i;
      return true;
    }
    return false;
  })[0];
  if (!instance) return;
  PopupManage.close(instance);

  if (typeof userOnClose === 'function') {
    userOnClose(instance);
  }
  instances.splice(index, 1);

  if (len <= 1) return;
  const removedHeight = instance.dom.offsetHeight;
  for (let i = index; i < len - 1; i++) {
    instances[i].dom.style[instance.verticalProperty] =
      parseInt(instances[i].dom.style[instance.verticalProperty], 10) -
        removedHeight - spacing + 'px';
  }
};

Message.closeAll = function () {
  for (let i = instances.length - 1; i >= 0; i--) {
    instances[i].close();
  }
  instances.splice(0, instances.length);
};

Message.updateOffset = updateOffset;
Message.COMPONENT = Main;

export default Message;
