import {
  mount
} from '@vue/test-utils';
import withRadioGroup from '../with';
import RadioGroup from '../radio-group';
import SlotDemo from './demo/slot.vue';

const TestRadioComponent = {
  name: 'TestRadioComponent',
  props: {
    value: [String, Number],
    disabled: Boolean,
    size: String,
    checked: Boolean,
    name: String,
  },
  methods: {
    handleClick (v) {
      this.$emit('input', true);
    },
  },
  render (h) {
    return h('div', {
      on: {
        click: this.handleClick,
      },
    });
  },
};
describe('withRadioGroup', function () {
  const TestRadio = withRadioGroup('TestRadio', TestRadioComponent);
  it('inject props from current element attrs if not has RadioGroup context', function () {
    const props = {
      name: 'name1',
      value: 'value1',
      disabled: true,
      checked: true,
      size: 'small',
    };

    const wrapper = mount(TestRadio, {
      propsData: props,
    });

    const radio = wrapper.find(TestRadioComponent)
    expect(radio.vm).to.be.include(props);
  });

  it('inject props from RadioGroup context', function () {
    const props = {
      value: '1',
      disabled: false,
      size: 'small',
      name: 'xxxx'
    };
    const wrapper = mount(SlotDemo, {
      attrs: props,
    });
    const radios = wrapper.findAll({ name: 'Radio' });
    const dumbRadios = wrapper.findAll({ name: 'DumbRadio' });

    expect(dumbRadios.at(0).vm.checked).to.be.true;
    expect(dumbRadios.at(1).vm.name).to.be.equal(props.name);
    expect(dumbRadios.at(1).vm.disabled).to.be.false;
    expect(dumbRadios.at(2).vm.disabled).to.be.true;
    expect(dumbRadios.at(3).vm.checked).to.be.false;
    expect(dumbRadios.at(4).vm.size).to.be.equal(props.size);

    const item = dumbRadios.at(4);
    item.trigger('click');

    const group = wrapper.find(RadioGroup);
    expect(group.emitted().input.length).to.be.equal(1);
    expect(group.emitted().input[0][0]).to.be.equal('5');

  });
});
