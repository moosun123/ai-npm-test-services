import { mount } from '@vue/test-utils';
import Transfer from '../transfer';

const testData = () => ([
  { key: 1, label: 'item1' },
  { key: 2, label: 'item2' },
  { key: 3, label: 'item3' },
  { key: 4, label: 'item4' },
  { key: 5, label: 'item5' },
  { key: 6, label: 'item6' },
  { key: 7, label: 'item7' },
  { key: 8, label: 'item8' },
  { key: 9, label: 'item9' },
  { key: 10, label: 'item10' },
  { key: 11, label: 'item11' },
  { key: 12, label: 'item12' }
]);
// todo: 暂时将 mount 选项 sync 设置成 false
// see https://github.com/vuejs/vue-test-utils/issues/532
describe('Transfer', function () {
  it('create', () => {
    const wrapper = mount(Transfer, { sync: false  });
    expect(wrapper.vm).to.exist;
  });

  it('default target list', () => {
    const wrapper = mount(Transfer, {
      propsData: {
        value: [1, 4],
        data: testData()
      },
      sync: false
    });
    expect(wrapper.findAll('.mtd-transfer-panel-item').at(0).classes()).to.include('mtd-checkbox');
    expect(wrapper.findAll('.mtd-transfer-panel-item').at(3).classes()).to.include('mtd-checkbox');
  });

  it('disabled', () => {
    const wrapper = mount(Transfer, {
      propsData: {
        value: [],
        data: [...testData(), {
          key: 13,
          label: 'item-13',
          disabled: true
        }]
      },
      sync: false
    });
    expect(wrapper.findAll('.mtd-transfer-panel-item').at(12).classes()).to.include('mtd-checkbox-disabled');
  });

  it('filterable', () => {
    const wrapper = mount(Transfer, {
      propsData: {
        filterable: true
      },
      sync: false
    });
    expect(wrapper.find('.mtd-transfer-panel-filter').exists()).to.be.true;
  });

  it('will handle filter method', (done) => {
    const wrapper = mount(Transfer, {
      propsData: {
        value: [],
        data: testData(),
        filterable: true,
        'filter-method': function (query, data) {
          return data.label.includes(query);
        }
      },
      sync: false
    });
    const input = wrapper.find('.mtd-input');
    input.setValue('item10');
    setTimeout(() => {
      expect(wrapper.findAll('.mtd-transfer-panel-item').length).to.be.equal(1);
      // 异步更新
      done();
    }, 0);
  });

  it('default checked', (done) => {
    const wrapper = mount(Transfer, {
      propsData: {
        value: [1, 2],
        data: testData(),
        sourceDefaultChecked: [3, 4],
        targetDefaultChecked: [1, 2]
      },
      sync: false
    });
    function isChecked (panel, index) {
      expect(panel.findAll('.mtd-transfer-panel-item').at(index).classes()).to.include('mtd-checkbox-checked');
    }

    setTimeout(() => {
      const w = wrapper.findAll({ name: 'MtdTransferPanel' });
      const leftPanel = w.at(0);
      const rightPanel = w.at(1);
      isChecked(leftPanel, 0);
      isChecked(leftPanel, 1);
      isChecked(rightPanel, 0);
      isChecked(rightPanel, 1);
      done();
    }, 0);
  });

  it('will handle change', (done) => {
    const wrapper = mount(Transfer, {
      propsData: {
        value: [],
        data: testData(),
        sourceDefaultChecked: [1, 2]
      },
      sync: false
    });
    setTimeout(() => {
      const toTargetButton = wrapper.findAll('.mtd-transfer-buttons .mtd-transfer-button').at(1);
      toTargetButton.trigger('click');
      expect(wrapper.emitted().change[0][0]);
      done();
    }, 0);

  });

});
