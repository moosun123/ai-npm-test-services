import createHoc from '@/utils/hoc';
import { hasProps } from '@/utils/vnode';

export default function withCheckboxGroup (name, Component) {
  return createHoc({
    name: name,
    props: {
      value: [String, Number, Boolean, Function, Object, Symbol],
      trueValue: {
        type: [String, Number, Boolean, Function, Object, Symbol],
        default: true,
      },
      falseValue: {
        type: [String, Number, Boolean, Function, Object, Symbol],
        default: false,
      },
      disabled: Boolean,
      name: String,
      checked: Boolean,
      isUnderControl: {
        type: Boolean,
        default: true,
      },
    },
    inject: {
      checkboxGroup: {
        default: '',
      },
    },
    computed: {
      _isUnderControl () {
        return this.isUnderControl && this.checkboxGroup;
      },
      _checked () {
        return this._isUnderControl
          ? (this.checkboxGroup.value.indexOf(this.value) > -1)
          : (hasProps(this, 'checked')) ? this.checked : this.value === this.trueValue;
      },
      _disabled () {
        return this._isUnderControl
          ? (this.checkboxGroup.disabled || this.disabled) : this.disabled;
      },
      inputName () {
        return this._isUnderControl ? this.checkboxGroup.name : this.name;
      },
      _size () {
        return this._isUnderControl ? this.checkboxGroup.size : this.size;
      },
    },
    methods: {
      getChangeValue (checked) {
        return checked ? this.trueValue : this.falseValue;
      },
    },
  }, {
    mapStateToProps (context) {
      return {
        checked: context._checked,
        disabled: context._disabled,
        name: context.inputName,
        value: context.value,
      };
    },
    mapMethodToListener (context) {
      return {
        input (checked) {
          if (context._isUnderControl) {
            context.checkboxGroup.$emit('checkboxChange', checked, context.value);
          } else {
            context.$emit('input', context.getChangeValue(checked));
            context.$emit('change', context.getChangeValue(checked));
          }
        },
      };
    },
  })(Component);
}
