'use strict';

var _testUtils = require('@vue/test-utils');

var _hoc = require('../hoc.js');

var _hoc2 = _interopRequireDefault(_hoc);

var _dumb = require('./hoc/dumb.vue');

var _dumb2 = _interopRequireDefault(_dumb);

var _todos = require('./hoc/todos.vue');

var _todos2 = _interopRequireDefault(_todos);

var _attrs = require('./hoc/attrs.vue');

var _attrs2 = _interopRequireDefault(_attrs);

var _scopeSlot = require('./hoc/scopeSlot.vue');

var _scopeSlot2 = _interopRequireDefault(_scopeSlot);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

describe('Create Hight Order Components', function () {
  it('create', function () {
    var HocComponent = (0, _hoc2.default)()(_dumb2.default);
    var wrapper = (0, _testUtils.mount)(HocComponent);
    expect(wrapper.vm).to.exist;
    expect(wrapper.find(_dumb2.default).exists()).to.be.ok;
  });

  it('WrappedComponent Prop', function () {
    var HocComponent = (0, _hoc2.default)()(_dumb2.default);
    expect(HocComponent.WrappedComponent).to.be.equal(_dumb2.default);
  });

  it('data & methods', function () {
    var HocComponent = (0, _hoc2.default)({
      data: function data() {
        return {
          syncValue: '11111'
        };
      },

      methods: {
        handleSave: function handleSave() {}
      }
    })(_dumb2.default);
    var wrapper = (0, _testUtils.mount)(HocComponent);
    expect(wrapper.vm.syncValue).to.equal('11111');
    expect(wrapper.vm.handleSave).to.be.a('function');
  });

  it('should no render dumb component.prop to html', function () {
    var wrapper = (0, _testUtils.mount)(_attrs2.default);
    expect(wrapper.classes()).to.be.include('some-classname');

    expect(wrapper.attributes()['default-inner-value']).to.be.undefined;
    expect(wrapper.attributes()['defaultInnerValue']).to.be.undefined;
    expect(wrapper.attributes().someattr).to.be.eql('2222');
  });

  it('should transmit attrs to dumb component', function () {
    var HocComponent = (0, _hoc2.default)({})(_dumb2.default);
    var notHasValueWrapper = (0, _testUtils.mount)(HocComponent);
    var form = notHasValueWrapper.find(_dumb2.default);
    expect(form.vm.defaultInnerValue).to.be.equal('');

    var hasValueWrapper = (0, _testUtils.mount)(HocComponent, {
      attrs: {
        defaultInnerValue: '11111'
      }
    });
    var form2 = hasValueWrapper.find(_dumb2.default);
    expect(form2.vm.defaultInnerValue).to.be.equal('11111');
  });

  it('should transmit slot to dumb component', function () {
    var HocComponent = (0, _hoc2.default)()(_dumb2.default);
    var wrapper = (0, _testUtils.mount)(HocComponent, {
      slots: {
        default: '<div class="default-slot-div">something</div>',
        header: '<div class="header-slot-div">something</div>',
        footer: '<div class="footer-slot-div">something</div>'
      }
    });
    expect(wrapper.find('.test-form > .default-slot-div').exists(), 'should support default slot').to.be.true;
    expect(wrapper.find('.test-form-header > .header-slot-div').exists(), 'should support named slot: header').to.be.true;
    expect(wrapper.find('.test-form-footer > .footer-slot-div').exists(), 'should support named slot: footer').to.be.true;
  });

  it('should transmit scopeslot to dumb component', function () {
    var wrapper = (0, _testUtils.mount)(_scopeSlot2.default);

    var lis = wrapper.findAll('li');
    expect(lis.length).to.be.equal(_scopeSlot.length);

    var li = lis.at(0);
    expect(li.find('.todo-slot-template').exists()).to.be.true;
    expect(li.text()).to.be.equal('name-todo-item-0');
  });

  it('should transmit lisenters to dumb component', function () {
    var HocComponent = (0, _hoc2.default)()(_dumb2.default);
    var cancelSpy = sinon.spy();
    var saveSpy = sinon.spy();
    var wrapper = (0, _testUtils.mount)(HocComponent, {
      listeners: {
        cancel: cancelSpy,
        save: saveSpy
      }
    });

    wrapper.find('.btn-cancel').trigger('click');
    cancelSpy.should.have.been.calledOnce;
    var form = wrapper.find(_dumb2.default);
    form.vm.innerValue = '1111';

    wrapper.find('.btn-save').trigger('click');
    saveSpy.should.have.been.calledOnce;
    saveSpy.should.have.been.calledWithMatch({ innerValue: '1111' });
  });

  it('should inject data to dumb component', function () {
    var HocComponent = (0, _hoc2.default)({
      data: function data() {
        return {
          syncValue: '11111'
        };
      }
    }, {
      mapStateToProps: function mapStateToProps(instance) {
        return {
          syncValue: instance.syncValue
        };
      }
    })(_dumb2.default);
    var wrapper = (0, _testUtils.mount)(HocComponent);

    var form = wrapper.find(_dumb2.default);
    expect(form.vm.syncValue).to.be.equal('11111');
  });

  it('handle event', function () {
    var HocComponent = (0, _hoc2.default)({
      data: function data() {
        return {
          syncValue: '11111'
        };
      },

      methods: {
        hanldeUpdate: function hanldeUpdate(v) {
          this.syncValue = v;
        }
      }
    }, {
      mapStateToProps: function mapStateToProps(instance) {
        return {
          syncValue: instance.syncValue
        };
      },
      mapMethodToListener: function mapMethodToListener(instance) {
        return {
          'update:syncValue': instance.hanldeUpdate
        };
      }
    })(_dumb2.default);
    var wrapper = (0, _testUtils.mount)(HocComponent);

    var form = wrapper.find(_dumb2.default);
    expect(form.vm.syncValue).to.be.equal('11111');

    form.vm.handleSyncInput('22222');
    expect(form.vm.syncValue).to.be.equal('22222');
    expect(wrapper.vm.syncValue).to.be.equal('22222');
  });
});