'use strict';

var _regenerator = require('babel-runtime/regenerator');

var _regenerator2 = _interopRequireDefault(_regenerator);

var _asyncToGenerator2 = require('babel-runtime/helpers/asyncToGenerator');

var _asyncToGenerator3 = _interopRequireDefault(_asyncToGenerator2);

var _from = require('babel-runtime/core-js/array/from');

var _from2 = _interopRequireDefault(_from);

var _extends2 = require('babel-runtime/helpers/extends');

var _extends3 = _interopRequireDefault(_extends2);

var _chai = require('chai');

var _message = require('@components/message');

var _message2 = _interopRequireDefault(_message);

var _modal = require('@components/modal');

var _modal2 = _interopRequireDefault(_modal);

var _util = require('@test/util');

var _config = require('../config');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

describe("Global Config Function", function () {
  var _DEFAULT_ = (0, _extends3.default)({}, (0, _config.getConfig)());

  afterEach(function () {
    (0, _config.config)(_DEFAULT_);
    _message2.default.closeAll();
  });

  it("must override by custom", function () {
    (0, _config.config)({
      prefixCls: 'xx',
      iconPrefixCls: 'xxicon'
    });
    (0, _chai.expect)((0, _config.getPrefix)()).to.be.eql('xx');
    (0, _chai.expect)((0, _config.getIconPrefix)()).to.be.eql('xxicon');
    (0, _chai.expect)((0, _config.getPrefixCls)('button')).to.be.eql('xx-button');
    (0, _chai.expect)((0, _config.getIconCls)('search')).to.be.eql('xxicon xxicon-search');
  });

  it("should render by custom prefixCls", function () {
    (0, _config.config)({
      prefixCls: 'xx',
      iconPrefixCls: 'xxicon'
    });
    (0, _message2.default)({
      message: '这是一条正常的消息',
      type: 'info',
      className: 'test-config-message'
    });
    var el = document.querySelector('.test-config-message');
    (0, _chai.expect)(el).to.be.not.eql(null);
    var classes = (0, _from2.default)(el.classList);
    (0, _chai.expect)(classes).to.be.include('xx-message');
  });
  describe("popup component", function () {
    var el = void 0;
    var vm = void 0;
    function getPopupContainer() {
      return el;
    }
    before(function () {
      el = document.createElement('div');
      document.body.append(el);
    });

    afterEach(function () {
      (0, _util.destroyVM)(vm);
    });

    after(function () {
      document.body.remove(el);
    });

    it("Message Component should append in custom el", function () {
      // 原型链上的方法
      (0, _config.config)({
        getPopupContainer: getPopupContainer
      });
      (0, _message2.default)({
        message: '这是一条正常的消息',
        type: 'info',
        className: 'test-config-message'
      });
      var m = el.querySelector('.test-config-message');
      (0, _chai.expect)(m, 'should append in custom dom').to.be.not.eql(null);
    });

    it("Modal Component should append in custom el", (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee() {
      var modal;
      return _regenerator2.default.wrap(function _callee$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              (0, _config.config)({
                getPopupContainer: getPopupContainer
              });
              vm = (0, _util.mount)(_modal2.default, { props: { visible: true }, attrs: { visible: true } });
              _context.next = 4;
              return (0, _util.waitImmediate)();

            case 4:
              modal = el.querySelector('.mtd-modal');

              (0, _chai.expect)(modal).to.be.not.eql(null);

            case 6:
            case 'end':
              return _context.stop();
          }
        }
      }, _callee, this);
    })));
  });
});