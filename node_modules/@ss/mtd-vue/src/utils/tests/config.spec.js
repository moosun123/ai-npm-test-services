import { expect } from 'chai';
import Message from '@components/message';
import Modal from '@components/modal';
import { mount, destroyVM, waitImmediate } from '@test/util'
import {
  config,
  getConfig,
  getPrefix,
  getIconPrefix,
  getPrefixCls,
  getIconCls,
} from '../config';

describe("Global Config Function", function () {
  const _DEFAULT_ = {
    ...getConfig(),
  }

  afterEach(() => {
    config(_DEFAULT_);
    Message.closeAll();
  });

  it ("must override by custom", function () {
    config({
      prefixCls: 'xx',
      iconPrefixCls: 'xxicon',
    });
    expect(getPrefix()).to.be.eql('xx');
    expect(getIconPrefix()).to.be.eql('xxicon');
    expect(getPrefixCls('button')).to.be.eql('xx-button');
    expect(getIconCls('search')).to.be.eql('xxicon xxicon-search');
  });

  it ("should render by custom prefixCls", function () {
    config({
      prefixCls: 'xx',
      iconPrefixCls: 'xxicon',
    });
    Message({
      message: '这是一条正常的消息',
      type: 'info',
      className: 'test-config-message',
    });
    const el = document.querySelector('.test-config-message');
    expect(el).to.be.not.eql(null);
    const classes = Array.from(el.classList);
    expect(classes).to.be.include('xx-message');
  });
  describe("popup component", function () {
    let el;
    let vm;
    function getPopupContainer () {
      return el;
    }
    before(() => {
      el = document.createElement('div');
      document.body.append(el);
    });

    afterEach(() => {
      destroyVM(vm);
    });

    after(() => {
      document.body.remove(el);
    });

    it ("Message Component should append in custom el", function () {
      // 原型链上的方法
      config({
        getPopupContainer,
      });
      Message({
        message: '这是一条正常的消息',
        type: 'info',
        className: 'test-config-message',
      });
      const m = el.querySelector('.test-config-message');
      expect(m, 'should append in custom dom').to.be.not.eql(null);
    });

    it ("Modal Component should append in custom el", async function () {
      config({
        getPopupContainer,
      });
      vm = mount(Modal, { props: { visible: true }, attrs: { visible: true }} );
      await waitImmediate();
      const modal = el.querySelector('.mtd-modal');
      expect(modal).to.be.not.eql(null);
    });
  })
});
