import { mount } from '@vue/test-utils';
import createHoc from '../hoc.js';
import DumbForm from './hoc/dumb.vue';
import Todos from './hoc/todos.vue';
import AttrsTestComponent from './hoc/attrs.vue';
import ScopeSlotComponent, { length as todoLength} from './hoc/scopeSlot.vue';

describe('Create Hight Order Components', function () {
  it('create', function () {
    const HocComponent = createHoc()(DumbForm);
    const wrapper = mount(HocComponent);
    expect(wrapper.vm).to.exist;
    expect(wrapper.find(DumbForm).exists()).to.be.ok;
  });

  it('WrappedComponent Prop', function () {
    const HocComponent = createHoc()(DumbForm);
    expect(HocComponent.WrappedComponent).to.be.equal(DumbForm);
  });

  it('data & methods', function () {
    const HocComponent = createHoc({
      data () {
        return {
          syncValue: '11111'
        }
      },
      methods: {
        handleSave () {}
      },
    })(DumbForm);
    const wrapper = mount(HocComponent);
    expect(wrapper.vm.syncValue).to.equal('11111');
    expect(wrapper.vm.handleSave).to.be.a('function');
  });

  it('should no render dumb component.prop to html', function () {
    const wrapper = mount(AttrsTestComponent);
    expect(wrapper.classes()).to.be.include('some-classname');

    expect(wrapper.attributes()['default-inner-value']).to.be.undefined;
    expect(wrapper.attributes()['defaultInnerValue']).to.be.undefined;
    expect(wrapper.attributes().someattr).to.be.eql('2222');
  });

  it('should transmit attrs to dumb component', function () {
    const HocComponent = createHoc({})(DumbForm);
    const notHasValueWrapper = mount(HocComponent);
    const form = notHasValueWrapper.find(DumbForm);
    expect(form.vm.defaultInnerValue).to.be.equal('');

    const hasValueWrapper = mount(HocComponent, {
      attrs: {
        defaultInnerValue: '11111',
      }
    });
    const form2 = hasValueWrapper.find(DumbForm);
    expect(form2.vm.defaultInnerValue).to.be.equal('11111');
  });

  it('should transmit slot to dumb component', function () {
    const HocComponent = createHoc()(DumbForm);
    const wrapper = mount(HocComponent, {
      slots: {
        default: '<div class="default-slot-div">something</div>',
        header: '<div class="header-slot-div">something</div>',
        footer: '<div class="footer-slot-div">something</div>'
      }
    });
    expect(
      wrapper.find('.test-form > .default-slot-div').exists(),
      'should support default slot'
    ).to.be.true;
    expect(
      wrapper.find('.test-form-header > .header-slot-div').exists(),
      'should support named slot: header'
    ).to.be.true;
    expect(
      wrapper.find('.test-form-footer > .footer-slot-div').exists(),
      'should support named slot: footer'
    ).to.be.true;
  });

  it('should transmit scopeslot to dumb component', function () {
    const wrapper = mount(ScopeSlotComponent)

    const lis = wrapper.findAll('li');
    expect(lis.length).to.be.equal(todoLength);

    const li = lis.at(0);
    expect(li.find('.todo-slot-template').exists()).to.be.true;
    expect(li.text()).to.be.equal('name-todo-item-0');
  });

  it('should transmit lisenters to dumb component', function () {
    const HocComponent = createHoc()(DumbForm);
    const cancelSpy = sinon.spy();
    const saveSpy = sinon.spy();
    const wrapper = mount(HocComponent, {
      listeners: {
        cancel: cancelSpy,
        save: saveSpy,
      }
    });

    wrapper.find('.btn-cancel').trigger('click');
    cancelSpy.should.have.been.calledOnce;
    const form = wrapper.find(DumbForm);
    form.vm.innerValue = '1111'

    wrapper.find('.btn-save').trigger('click');
    saveSpy.should.have.been.calledOnce;
    saveSpy.should.have.been.calledWithMatch({ innerValue: '1111' });
  });

  it('should inject data to dumb component', function () {
    const HocComponent = createHoc({
      data () {
        return {
          syncValue: '11111'
        };
      }
    }, {
      mapStateToProps (instance) {
        return {
          syncValue: instance.syncValue,
        }
      }
    })(DumbForm);
    const wrapper = mount(HocComponent);

    const form = wrapper.find(DumbForm);
    expect(form.vm.syncValue).to.be.equal('11111');
  });

  it('handle event', function () {
    const HocComponent = createHoc({
      data () {
        return {
          syncValue: '11111',
        };
      },
      methods: {
        hanldeUpdate (v) {
          this.syncValue = v;
        }
      },
    }, {
      mapStateToProps (instance) {
        return {
          syncValue: instance.syncValue,
        };
      },
      mapMethodToListener (instance) {
        return {
          'update:syncValue': instance.hanldeUpdate,
        };
      },
    })(DumbForm);
    const wrapper = mount(HocComponent);

    const form = wrapper.find(DumbForm);
    expect(form.vm.syncValue).to.be.equal('11111');

    form.vm.handleSyncInput('22222');
    expect(form.vm.syncValue).to.be.equal('22222');
    expect(wrapper.vm.syncValue).to.be.equal('22222');
  });
});
