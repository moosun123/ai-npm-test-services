const pkg = require('../../package.json');
const components = require('../../components.json');
const navbar = require('../../examples/nav.config.json');
const getToken = require('../token');
const nanoid = require('nanoid').nanoid;
const file = require('fs');
const path = require('path');
const https = require('https');

const baseExampleUrl = 'https://mtdui.sankuai.com/mtd/vue';
const lockFile = 'desc-lock.json';

function resolve (...dirs) {
  return path.join(__dirname, '..', '..', ...dirs);
}

const NavbarComponents = {};

navbar.forEach((nav) => {
  nav.groups && nav.groups.forEach((group) => {
    const { list } = group;
    list && list.forEach((item) => {
      NavbarComponents[item.name.toLowerCase()] = item.cnName;
      NavbarComponents[item.path.toLowerCase()] = item.cnName;
    });
  })
})
function getCNName (componentName) {
  return NavbarComponents[componentName.replace('-', '').toLowerCase()] || '';
}


async function importToComponent () {
  let componentsMapping = {};
  try {
    componentsMapping = require(resolve(lockFile));
  } catch(e) {
    // no lock file, will be generate file `desc-lock.json`
  }
  const json = {
    token: getToken('components'),
    lib_id: "834ab0c1f4a646f9a99c45478963ba06",
    version: pkg.version,
    dependencies: pkg.dependencies,
    install_doc: "mnpm install @ss/mtd-vue",
    import_doc: "import Vue from 'vue'; \nimport MTD from '@ss/mtd-vue'\nimport '@ss/mtd-vue/lib/theme2/index.css",
    components: Object.keys(components).sort((a, b) => {
      return a > b ? 1 : -1;
    }).map((componentName) => {
      const filePath = resolve(components[componentName]);
      const demoPath = `${filePath}/doc/base.vue`;
      let demoContent = '';
      if (file.existsSync(demoPath)) {
        demoContent = file.readFileSync(demoPath, { encoding: 'utf-8' });
      } else if (componentName === 'icon') {
        demoContent = '<mtdicon name="bell" />';
      }

      const authors = pkg.author ? (
        Array.isArray(pkg.author) ? pkg.author : [pkg.author]
      ) : [];

      const id = componentsMapping[componentName] || nanoid();
      componentsMapping[componentName] = id;
      return {
        name: componentName,
        cnName: getCNName(componentName),
        component_id: id,
        url: `${baseExampleUrl}/components/${componentName}?hideSidebar=true&hideTopNav=true`,
        developers: authors.map((author) => {
          const index = author.indexOf('@');
          if (index === -1) {
            return author;
          }
          return author.substr(0, index);
        }), // 踢掉邮箱后缀
        screenshots: '',
        component_desc: `${componentName}`,
        keyword: `mtdui ${componentName}`,
        import_doc: `import { ${componentName} } from '@ss/mtd-vue';\nimport Vue from 'vue';\nVue.use(${componentName}); `,
        usage_doc: demoContent || '',
      };
    }).filter((item) => {
      return !!item.usage_doc
    }),
  };
  // write lock file
  file.writeFileSync(resolve(lockFile), JSON.stringify(componentsMapping, null, '  '));

  // write api params
  // file.writeFileSync(resolve('desc.json'),JSON.stringify(json));

  function request (data) {
    return new Promise((resolve, reject) => {
      let timer;
      const req = https.request({
        hostname: 'component.sankuai.com',
        path: '/openapi/third/publish',
        method: 'POST',
        headers: {
          'Content-Type': 'application/json; charset=utf-8'
        },
        timeout: 2000
      }, function (res) {
        const responseBuffer = [];
        res.on('data', function (chunk) {
          responseBuffer.push(chunk);
        });
        res.on('end', function () {
          clearTimeout(timer);
          let responseData = Buffer.concat(responseBuffer);
          responseData = responseData.toString('utf-8');
          try {
            const data = JSON.parse(responseData);
            if (data.code === 0) {
              return resolve(responseData);
            }
          } catch(e) {
          }
          reject(responseData);
        });
      });
      req.on('error', function (error) {
        clearTimeout(timer);
        reject(error);
      });
      req.write(JSON.stringify(data));
      req.end();
      console.log('send');
      timer = setTimeout(() => {
        console.log('abort');
        reject('abort request')
        req.abort();
      }, 2000);
    })
  }
  await request(json);
}
module.exports = importToComponent;
