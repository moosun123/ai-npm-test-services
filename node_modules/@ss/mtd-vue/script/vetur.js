const fs = require('fs');
const components = require('../components.json');

function hasReference (type, tag) {
  if(typeof type == 'string') {
    return type.match(/<a/);
  }
  return true;
}

function getReference(type) {
  if(Array.isArray(type)) {
    return type.join(" | ");
  }
  return "any"
}

async function createVeturHelper(prefix = 'mtd-') {
  let attributes = {};
  let tags= {}

  for (const tag of Object.keys(components)) {
    const file = `./${components[tag]}/api.json`;

    if(!fs.existsSync(file)) continue

    try {
      const data = fs.readFileSync(file);
      let componentAttributesData = JSON.parse(data);
      let name = `${prefix}${tag}`

      const {props = [], events = []} = componentAttributesData;

      tags[name] = {
        attributes: props.concat(events).map(item => item.name),
      }

      for (const prop of props) {
        attributes[`${name}/${prop.name}`] = {
          type: hasReference(prop.type, name) ? getReference(prop.type) :prop.type.replace("/", "|"),
          description: prop.desc
        };
      }
    } catch (e) {
      console.log(`${tag} api.json no exist`, e, tag);
    }
  }

  if(!fs.existsSync('./vetur')) {
    fs.mkdirSync("./vetur")
  }

  const tags_data = JSON.stringify(tags, null, 2);
  const attributes_data = JSON.stringify(attributes, null, 2);
  fs.writeFileSync('./vetur/tags.json', tags_data, console.log)
  fs.writeFileSync('./vetur/attributes.json', attributes_data, console.log)
}

module.exports = createVeturHelper;
