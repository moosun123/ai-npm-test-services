import _defineProperty from 'babel-runtime/helpers/defineProperty';
import { CONFIG_PROVIDER, getPrefixCls, getSize } from '@ss/mtd-vue/es/utils/config';
import Icon from '@ss/mtd-vue/es/components/icon';

var __vue_render__ = function __vue_render__() {
  var _vm = this;var _h = _vm.$createElement;var _c = _vm._self._c || _h;return _c('span', { class: _vm.className, on: { "click": _vm.handleClick } }, [_c('span', { class: _vm.prefix + "-content" }, [_vm._t("default")], 2), _vm.canClosed ? _c('span', { class: _vm.prefix + "-close", on: { "click": _vm.handleClose } }, [_c('Icon', { class: _vm.prefix + "-close-icon", attrs: { "name": "close" } }), _c('Icon', { class: _vm.prefix + "-close-hover-icon", attrs: { "name": "error-circle" } })], 1) : _vm._e()]);
};
var __vue_staticRenderFns__ = [];

export default {
  render: __vue_render__,

  staticRenderFns: __vue_staticRenderFns__,

  name: 'MtdTag',
  components: {
    Icon: Icon
  },
  model: {
    prop: 'checked'
  },
  props: {
    size: String,
    theme: {
      type: String,
      default: 'blue'
    },
    closeable: Boolean, // 兼容历史
    closable: {
      type: Boolean,
      default: false
    },
    disabled: {
      type: Boolean,
      default: false
    },
    type: {
      type: String
    },
    rounded: Boolean
    // checkable: Boolean, // 暂时下掉
    // checked: Boolean,
  },
  inject: {
    config: {
      from: CONFIG_PROVIDER,
      default: {
        getPrefixCls: getPrefixCls,
        getSize: getSize
      }
    }
  },
  computed: {
    prefix: function prefix() {
      return this.config.getPrefixCls('tag');
    },
    _size: function _size() {
      return this.config.getSize(this);
    },
    className: function className() {
      var _ref;

      var prefix = this.prefix;

      return _ref = {}, _defineProperty(_ref, prefix, true), _defineProperty(_ref, prefix + '-' + this.theme, this.theme), _defineProperty(_ref, prefix + '-' + this._size, this._size), _defineProperty(_ref, prefix + '-rounded', this.rounded), _defineProperty(_ref, prefix + '-' + this.type, this.type), _defineProperty(_ref, prefix + '-closable', this.canClosed), _defineProperty(_ref, prefix + '-disabled', this.disabled), _defineProperty(_ref, prefix + '-clickable', !!this.$listeners.click), _ref;
    },
    canClosed: function canClosed() {
      return this.closeable || this.closable;
    }
  },
  methods: {
    handleClose: function handleClose(e) {
      e.preventDefault();
      e.stopPropagation();
      if (this.disabled) {
        return false;
      }
      this.$emit('close', e);
    },
    handleClick: function handleClick(e) {
      e.preventDefault();
      if (this.disabled) {
        return false;
      }
      // if (this.checkable) {
      //   const value = !this.checked;
      //   this.$emit('change', value);
      //   this.$emit('input', value);
      // }
      this.$emit('click', e);
    }
  }
};