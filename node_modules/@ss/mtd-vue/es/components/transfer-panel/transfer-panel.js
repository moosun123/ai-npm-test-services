import MtdCheckboxGroup from '@ss/mtd-vue/es/components/checkbox-group';
import MtdCheckbox from '@ss/mtd-vue/es/components/checkbox';
import MtdInput from '@ss/mtd-vue/es/components/input';
import { isFunction } from '@ss/mtd-vue/es/utils/type';
import { CONFIG_PROVIDER, getPrefixCls, getIconCls } from '@ss/mtd-vue/es/utils/config';

var __vue_render__ = function __vue_render__() {
  var _vm = this;var _h = _vm.$createElement;var _c = _vm._self._c || _h;return _c('div', { class: _vm.prefix }, [_c('p', { class: _vm.prefix + "-header" }, [_c('mtd-checkbox', { attrs: { "is-under-control": false, "indeterminate": _vm.isIndeterminate }, on: { "change": _vm.handleAllCheckedChange }, model: { value: _vm.allChecked, callback: function callback($v) {
        _vm.allChecked = $v;
      }, expression: "allChecked" } }, [_vm._v(" " + _vm._s(_vm.title) + " ")]), _c('span', { class: _vm.transferPrefix + "-sum" }, [_vm._v(_vm._s(_vm.checkedSummary))])], 1), _c('div', { class: [_vm.prefix + "-body", { 'with-footer': _vm.hasFooter }] }, [_vm.filterable ? _c('mtd-input', { class: _vm.prefix + "-filter", attrs: { "suffix-icon": _vm.iconPrefix('search'), "placeholder": _vm.placeholder, "clearable": "" }, model: { value: _vm.query, callback: function callback($v) {
        _vm.query = $v;
      }, expression: "query" } }) : _vm._e(), _c('mtd-checkbox-group', { directives: [{ name: "show", rawName: "v-show", value: !_vm.hasNoMatch && _vm.data.length > 0, expression: "!hasNoMatch && data.length > 0" }], class: [_vm.prefix + "-list", { 'is-filterable': _vm.filterable }], model: { value: _vm.checked, callback: function callback($v) {
        _vm.checked = $v;
      }, expression: "checked" } }, _vm._l(_vm.filteredData, function (item) {
    return _c('mtd-checkbox', { key: item[_vm.keyProp], class: _vm.prefix + "-item", attrs: { "disabled": item[_vm.disabledProp], "value": item[_vm.keyProp] } }, [!_vm.$parent.$scopedSlots.default && item ? [_vm._v(" " + _vm._s(item[_vm.labelProp]) + " ")] : _vm._t("default", null, { "row": item })], 2);
  }), 1), _c('p', { directives: [{ name: "show", rawName: "v-show", value: _vm.hasNoMatch, expression: "hasNoMatch" }], class: _vm.prefix + "-empty" }, [_vm._v(_vm._s(_vm.noMatchText))]), _c('p', { directives: [{ name: "show", rawName: "v-show", value: _vm.data.length === 0 && !_vm.hasNoMatch, expression: "data.length === 0 && !hasNoMatch" }], class: _vm.prefix + "-empty" }, [_vm._v(" " + _vm._s(_vm.noDataText) + " ")])], 1), _vm.hasFooter ? _c('div', { class: _vm.prefix + "-footer" }, [_vm._t("footer")], 2) : _vm._e()]);
};
var __vue_staticRenderFns__ = [];

export default {
  render: __vue_render__,

  staticRenderFns: __vue_staticRenderFns__,

  name: 'MtdTransferPanel',
  components: {
    MtdCheckboxGroup: MtdCheckboxGroup,
    MtdCheckbox: MtdCheckbox,
    MtdInput: MtdInput
  },
  componentName: 'MtdTransferPanel',
  props: {
    data: {
      type: Array,
      default: function _default() {
        return [];
      }
    },
    placeholder: String,
    title: String,
    filterable: Boolean,
    format: {
      type: Object,
      default: function _default() {
        return {};
      }
    },
    filterMethod: Function,
    defaultChecked: Array,
    props: {
      type: Object,
      default: function _default() {
        return {};
      }
    },
    noMatchText: {
      type: String,
      default: function _default() {
        return '暂无搜索结果';
      }
    },
    noDataText: {
      type: String,
      default: function _default() {
        return '暂无数据';
      }
    }
  },
  inject: {
    config: {
      from: CONFIG_PROVIDER,
      default: {
        getPrefixCls: getPrefixCls,
        getIconCls: getIconCls
      }
    }
  },
  data: function data() {
    return {
      checked: [],
      selected: [],
      allChecked: false,
      query: '',
      checkChangeByUser: true
    };
  },

  computed: {
    prefix: function prefix() {
      return this.config.getPrefixCls('transfer-panel');
    },
    transferPrefix: function transferPrefix() {
      return this.config.getPrefixCls('transfer');
    },
    iconPrefix: function iconPrefix() {
      return this.config.getIconCls;
    },
    filter: function filter() {
      var _this = this;

      return isFunction(this.filterMethod) ? this.filterMethod : function (query, item) {
        var label = item[_this.labelProp] || item[_this.keyProp].toString();
        return label.toLowerCase().indexOf(query.toLowerCase()) > -1;
      };
    },
    filteredData: function filteredData() {
      var _this2 = this;

      if (!this.filterable) {
        return this.data;
      }
      return this.data.filter(function (item) {
        return _this2.filter(_this2.query, item);
      });
    },
    checkableData: function checkableData() {
      var _this3 = this;

      return this.filteredData.filter(function (item) {
        return !item[_this3.disabledProp];
      });
    },
    checkedSummary: function checkedSummary() {
      var checkedLength = this.checked.length;
      var dataLength = this.data.length;
      var _format = this.format,
          noChecked = _format.noChecked,
          hasChecked = _format.hasChecked;

      if (noChecked && hasChecked) {
        return checkedLength > 0 ? hasChecked.replace(/\${checked}/g, checkedLength).replace(/\${total}/g, dataLength) : noChecked.replace(/\${total}/g, dataLength);
      } else {
        return checkedLength + '/' + dataLength;
      }
    },
    isIndeterminate: function isIndeterminate() {
      var checkedLength = this.checked.length;
      return checkedLength > 0 && checkedLength < this.checkableData.length;
    },
    hasNoMatch: function hasNoMatch() {
      return this.query.length > 0 && this.filteredData.length === 0;
    },
    labelProp: function labelProp() {
      return this.props.label || 'label';
    },
    keyProp: function keyProp() {
      return this.props.key || 'key';
    },
    disabledProp: function disabledProp() {
      return this.props.disabled || 'disabled';
    },
    hasFooter: function hasFooter() {
      return !!this.$slots.footer;
    }
  },
  watch: {
    checked: function checked(val, oldVal) {
      this.updateAllChecked();
      if (this.checkChangeByUser) {
        var movedKeys = val.concat(oldVal).filter(function (v) {
          return val.indexOf(v) === -1 || oldVal.indexOf(v) === -1;
        });
        this.$emit('checked-change', val, movedKeys);
      } else {
        this.$emit('checked-change', val);
        this.checkChangeByUser = true;
      }
    },
    data: function data() {
      var _this4 = this;

      var checked = [];
      var filteredDataKeys = this.filteredData.map(function (item) {
        return item[_this4.keyProp];
      });
      this.checked.forEach(function (item) {
        if (filteredDataKeys.indexOf(item) > -1) {
          checked.push(item);
        }
      });
      this.checkChangeByUser = false;
      this.checked = checked;
    },
    checkableData: function checkableData() {
      this.updateAllChecked();
    },

    defaultChecked: {
      immediate: true,
      handler: function handler(val, oldVal) {
        var _this5 = this;

        if (oldVal && val.length === oldVal.length && val.every(function (item) {
          return oldVal.indexOf(item) > -1;
        })) return;
        var checked = [];
        var checkableDataKeys = this.checkableData.map(function (item) {
          return item[_this5.keyProp];
        });
        val.forEach(function (item) {
          if (checkableDataKeys.indexOf(item) > -1) {
            checked.push(item);
          }
        });
        this.checkChangeByUser = false;
        this.checked = checked;
      }
    }
  },
  methods: {
    updateAllChecked: function updateAllChecked() {
      var _this6 = this;

      var checkableDataKeys = this.checkableData.map(function (item) {
        return item[_this6.keyProp];
      });
      this.allChecked = checkableDataKeys.length > 0 && checkableDataKeys.every(function (item) {
        return _this6.checked.indexOf(item) > -1;
      });
    },
    handleAllCheckedChange: function handleAllCheckedChange(value) {
      var _this7 = this;

      this.checked = value ? this.checkableData.map(function (item) {
        return item[_this7.keyProp];
      }) : [];
    }
  }
};