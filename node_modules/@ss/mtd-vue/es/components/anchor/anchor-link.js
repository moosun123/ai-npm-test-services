import _extends from 'babel-runtime/helpers/extends';
import _defineProperty from 'babel-runtime/helpers/defineProperty';
import { sharpMatcherRegx } from '@ss/mtd-vue/es/utils/util';
import { CONFIG_PROVIDER, getPrefixCls } from '@ss/mtd-vue/es/utils/config';

var __vue_render__ = function __vue_render__() {
  var _vm = this;var _h = _vm.$createElement;var _c = _vm._self._c || _h;return _c('div', { class: _vm.anchorLinkClasses }, [_c('a', { class: _vm.linkTitleClasses, attrs: { "href": _vm.href, "data-scroll-offset": _vm.scrollOffset, "data-href": _vm.href, "title": _vm.title }, on: { "click": function click($event) {
        $event.preventDefault();return _vm.goAnchor($event);
      } } }, [_vm._v(" " + _vm._s(_vm.title) + " ")]), _vm._t("default")], 2);
};
var __vue_staticRenderFns__ = [];

export default {
  render: __vue_render__,

  staticRenderFns: __vue_staticRenderFns__,

  name: 'MtdAnchorLink',
  inject: {
    'anchorCom': { from: 'anchorCom' },
    config: {
      from: CONFIG_PROVIDER,
      default: {
        getPrefixCls: getPrefixCls
      }
    }
  },
  props: {
    href: String,
    title: String,
    scrollOffset: {
      type: Number,
      default: function _default() {
        return this.anchorCom.scrollOffset;
      }
    }
  },
  computed: {
    prefix: function prefix() {
      return this.config.getPrefixCls('anchor-link');
    },
    placement: function placement() {
      return this.anchorCom.placement;
    },
    anchorLinkClasses: function anchorLinkClasses() {
      var _ref;

      var prefix = this.prefix,
          placement = this.placement;

      return [prefix, (_ref = {}, _defineProperty(_ref, prefix + '-active', this.anchorCom.currentLink === this.href), _defineProperty(_ref, prefix + '-' + placement, placement && placement !== 'left'), _ref)];
    },
    linkTitleClasses: function linkTitleClasses() {
      return [this.prefix + '-title'];
    }
  },
  mounted: function mounted() {
    var _this = this;

    this.$nextTick(function () {
      _this.anchorCom.init();
    });
  },

  methods: {
    goAnchor: function goAnchor() {
      var _this2 = this;

      this.anchorCom.currentLink = this.href;
      this.anchorCom.handleHashChange();
      this.anchorCom.handleScrollTo();
      var lastScrollTop = this.anchorCom.scrollElement.scrollTop;
      this.anchorCom.$emit('select', this.href);
      var isRoute = this.$router;
      if (isRoute) {
        var sharpLinkMatch = sharpMatcherRegx.exec(this.href);
        if (sharpLinkMatch) {
          this.$router.push(_extends({}, this.$route, {
            hash: sharpLinkMatch[0]
          })).catch(function () {});
        } else {
          this.$router.push(this.href).catch(function () {});
        }
      } else {
        window.location.href = this.href;
        this.anchorCom.handleHashChange();
        this.$nextTick(function () {
          _this2.anchorCom.handleScrollTo();
        });
      }
      // 在上面路由改变之后，会触发页面刷新，滚动条会回到0的位置，所以要将滚动条回归到上次的位置
      this.anchorCom.scrollElement.scrollTop = lastScrollTop;
    }
  }
};