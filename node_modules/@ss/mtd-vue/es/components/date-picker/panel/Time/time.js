import _Object$keys from 'babel-runtime/core-js/object/keys';
import TimeSpinner from '../../base/time-spinner';
import Confirm from '../../base/confirm';
import Options from '../../time-mixins';

import Mixin from '../panel-mixin';
import Locale from '@ss/mtd-vue/es/mixins/locale';

import { initTimeDate } from '@ss/mtd-vue/es/utils/date';

var capitalize = function capitalize(str) {
  return str[0].toUpperCase() + str.slice(1);
};
/* const mergeDateHMS = (date, hours, minutes, seconds) => {
  const newDate = new Date(date.getTime());
  newDate.setHours(hours);
  newDate.setMinutes(minutes);
  newDate.setSeconds(seconds);
  return newDate;
}; */
// const unique = (el, i, arr) => arr.indexOf(el) === i;
var returnFalse = function returnFalse() {
  return false;
};

var __vue_render__ = function __vue_render__() {
  var _vm = this;var _h = _vm.$createElement;var _c = _vm._self._c || _h;return _c('div', { class: [_vm.panelPrefix + '-body-wrapper'], on: { "mousedown": function mousedown($event) {
        $event.preventDefault();
      } } }, [_c('div', { class: [_vm.panelPrefix + '-body'] }, [_vm.showDate ? _c('div', { class: [_vm.timePrefix + '-header'] }, [_vm._v(" " + _vm._s(_vm.visibleDate) + " ")]) : _vm._e(), _c('div', { class: [_vm.panelPrefix + '-content'] }, [_c('time-spinner', { ref: "timeSpinner", attrs: { "show-seconds": _vm.showSeconds, "show-minutes": _vm.showMinutes, "steps": _vm.steps, "hours": _vm.timeSlots[0], "minutes": _vm.timeSlots[1], "seconds": _vm.timeSlots[2], "disabled-hours": _vm.disabledHMS.disabledHours, "disabled-minutes": _vm.disabledHMS.disabledMinutes, "disabled-seconds": _vm.disabledHMS.disabledSeconds, "hide-disabled-options": _vm.hideDisabledOptions }, on: { "change": _vm.handleChange } })], 1), _vm.confirm ? _c('Confirm', { attrs: { "show-btn-now": _vm.showBtnNow }, on: { "click-now": _vm.handlePickClickNow, "confirm": _vm.handlePickSuccess } }) : _vm._e()], 1)]);
};
var __vue_staticRenderFns__ = [];

export default {
  render: __vue_render__,

  staticRenderFns: __vue_staticRenderFns__,

  name: 'TimePickerPanel',
  components: { TimeSpinner: TimeSpinner, Confirm: Confirm },
  mixins: [Mixin, Locale, Options],
  props: {
    disabledDate: {
      type: Function,
      default: returnFalse
    },
    steps: {
      type: Array,
      default: function _default() {
        return [];
      }
    },
    format: {
      type: String,
      default: 'HH:mm:ss'
    },
    value: {
      type: Array,
      required: true
    }
  },
  data: function data() {
    return {
      date: this.value[0] || initTimeDate(),
      showDate: false
    };
  },

  computed: {
    timePrefix: function timePrefix() {
      return this.config.getPrefixCls('time-picker');
    },
    showSeconds: function showSeconds() {
      return !!(this.format || '').match(/s$/);
    },
    showMinutes: function showMinutes() {
      return !!(this.format || '').match(/m/);
    },
    visibleDate: function visibleDate() {
      // TODO
      var date = this.date;
      var month = date.getMonth() + 1;
      var tYear = this.t('el.datepicker.year');
      var tMonth = this.t('el.datepicker.month' + month);
      return '' + date.getFullYear() + tYear + ' ' + tMonth;
    },
    timeSlots: function timeSlots() {
      var _this = this;

      if (!this.value[0]) return [];
      return ['getHours', 'getMinutes', 'getSeconds'].map(function (slot) {
        return _this.date[slot]();
      });
    },

    /*     disabledHMS () {
      const disabledTypes = [
        'disabledHours',
        'disabledMinutes',
        'disabledSeconds',
      ];
      if (this.disabledDate === returnFalse || !this.value[0]) {
        console.log(123);
        const disabled = disabledTypes.reduce((obj, type) => {
          obj[type] = this[type];
          return obj;
        }, {});
        return disabled;
      } else {
        const slots = [24, 60, 60];
        const disabled = ['Hours', 'Minutes', 'Seconds']
          .map(type => this[`disabled${type}`]);
        const disabledHMS = disabled.map((preDisabled, j) => {
          const slot = slots[j];
          const toDisable = preDisabled;
          for (let i = 0; i < slot; i += (this.steps[j] || 1)) {
            const hms = this.timeSlots.map((slot, x) => x === j ? i : slot);
            const testDateTime = mergeDateHMS(this.date, ...hms);
            if (this.disabledDate(testDateTime, true)) toDisable.push(i);
          }
          return toDisable.filter(unique);
        });
        return disabledTypes.reduce((obj, type, i) => {
          obj[type] = disabledHMS[i];
          return obj;
        }, {});
      }
    }, */
    disabledHMS: function disabledHMS() {
      // 时
      var disabledHours = typeof this.disabledHours === 'function' ? this.disabledHours() : this.disabledHours;

      // 分
      var disabledMinutes = typeof this.disabledMinutes === 'function' ? this.disabledMinutes(this.value[0] ? this.value[0].getHours() : undefined) : this.disabledMinutes;

      // 秒
      var disabledSeconds = typeof this.disabledSeconds === 'function' ? this.disabledSeconds(this.value[0] ? this.value[0].getHours() : undefined, this.value[0] ? this.value[0].getMinutes() : undefined) : this.disabledSeconds;

      var result = {
        disabledHours: disabledHours,
        disabledMinutes: disabledMinutes,
        disabledSeconds: disabledSeconds
      };

      return result;
    }
  },
  watch: {
    value: function value(dates) {
      var newVal = dates[0] || initTimeDate();
      newVal = new Date(newVal);
      this.date = newVal;
    }
  },
  methods: {
    handleChange: function handleChange(date) {
      var emit = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;

      var newDate = new Date(this.date);
      _Object$keys(date).forEach(function (type) {
        return newDate['set' + capitalize(type)](date[type]);
      });

      if (emit) this.$emit('pick', newDate, true);
    }
  }
};