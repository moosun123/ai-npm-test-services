import _extends from 'babel-runtime/helpers/extends';
import { Popper, Drop, Reference } from '@ss/mtd-vue/es/components/popper';
import { typeOf } from '@ss/mtd-vue/es/utils/util';
import MtdSelectInput from '@ss/mtd-vue/es/components/select-input';
import OptionWrap from './option-wrap';
import MtdOption from '@ss/mtd-vue/es/components/option';
import NavigationMixin from '@ss/mtd-vue/es/components/select/navigation-mixin';
import scrollIntoView from '@ss/mtd-vue/es/utils/scroll-into-view';
import { CONFIG_PROVIDER, getPrefixCls, getSize } from '@ss/mtd-vue/es/utils/config';

var __vue_render__ = function __vue_render__() {
  var _obj, _obj$1;
  var _vm = this;var _h = _vm.$createElement;var _c = _vm._self._c || _h;return _c('popper', { ref: "popper", class: (_obj = {}, _obj[_vm.prefix + "-" + _vm._size] = _vm._size, _obj[_vm.prefix] = true, _obj), attrs: { "visible": _vm.visible, "trigger": "click", "append-to-container": _vm.appendToContainer, "get-popup-container": _vm.getPopupContainer, "popper-options": _vm.popperOptions }, on: { "clickoutside": _vm.handleClickoutside } }, [_c('reference', [_c('mtd-select-input', _vm._g(_vm._b({ ref: "reference", class: (_obj$1 = {}, _obj$1[_vm.selectPrefix + "-search-focus"] = _vm.focused, _obj$1), attrs: { "type": "text", "value": _vm.value, "size": _vm._size, "loading": _vm.loading, "clearable": _vm.clearable }, on: { "keydown": [function ($event) {
        if (!$event.type.indexOf('key') && _vm._k($event.keyCode, "down", 40, $event.key, ["Down", "ArrowDown"])) {
          return null;
        }$event.stopPropagation();$event.preventDefault();return _vm.navigateOptions('next');
      }, function ($event) {
        if (!$event.type.indexOf('key') && _vm._k($event.keyCode, "up", 38, $event.key, ["Up", "ArrowUp"])) {
          return null;
        }$event.stopPropagation();$event.preventDefault();return _vm.navigateOptions('prev');
      }, function ($event) {
        if (!$event.type.indexOf('key') && _vm._k($event.keyCode, "enter", 13, $event.key, "Enter")) {
          return null;
        }$event.stopPropagation();$event.preventDefault();return _vm.selectOption($event);
      }, function ($event) {
        if (!$event.type.indexOf('key') && _vm._k($event.keyCode, "esc", 27, $event.key, ["Esc", "Escape"])) {
          return null;
        }$event.stopPropagation();$event.preventDefault();_vm.focused = false;
      }], "compositionstart": _vm.handleComposition, "compositionend": _vm.handleComposition } }, 'mtd-select-input', _vm.$attrs, false), _vm.inputLisenter))], 1), _c('drop', { ref: "drop", class: [_vm.popperClass, _vm.selectPrefix + "-dropdown"], style: {
      'min-width': _vm.minWidth
    }, attrs: { "use-show": true } }, [_c('ul', { ref: "menu", class: _vm.dropdownPrefix + "-menu" }, [_c('div', { directives: [{ name: "show", rawName: "v-show", value: !_vm.loading, expression: "!loading" }], class: _vm.prefix + "-dropdown-menu" }, [_vm.$slots.default ? _c('option-wrap', { on: { "updated": _vm.handleSlotUpdated } }, [_vm._t("default")], 2) : _vm.$props.data.length ? _vm._l(_vm.optionData, function (option, i) {
    return _c('mtd-option', { key: i, ref: "dataOption", refInFor: true, attrs: { "label": option, "value": option } });
  }) : _vm._e()], 2), _vm.loading ? _vm._t("loading", [_c('li', { class: _vm.dropdownPrefix + "-menu-item " + _vm.selectPrefix + "-dropdown-loading" }, [_vm._v(" " + _vm._s(_vm.loadingText) + " ")])]) : _vm._e()], 2)])], 1);
};
var __vue_staticRenderFns__ = [];

export default {
  render: __vue_render__,

  staticRenderFns: __vue_staticRenderFns__,

  name: 'Autocomplete',
  components: {
    MtdSelectInput: MtdSelectInput,
    Popper: Popper,
    Drop: Drop,
    OptionWrap: OptionWrap,
    Reference: Reference,
    MtdOption: MtdOption
  },
  mixins: [NavigationMixin],
  inheritAttrs: false,
  provide: function provide() {
    return {
      'select': this
    };
  },

  props: {
    value: [String, Number, Object],
    size: String,
    data: {
      type: Array,
      default: function _default() {
        return [];
      }
    },
    loading: Boolean,
    clearable: Boolean,
    loadingText: {
      type: String,
      default: function _default() {
        return '搜索中';
      }
    },
    popperClass: String,
    filterMethod: {
      type: [Function, Boolean],
      default: null
    },
    appendToContainer: {
      type: Boolean,
      default: true
    },
    getPopupContainer: Function,
    popperOptions: Object
  },
  inject: {
    config: {
      from: CONFIG_PROVIDER,
      default: {
        getPrefixCls: getPrefixCls,
        getSize: getSize
      }
    }
  },
  data: function data() {
    return {
      minWidth: 0,
      inputWidth: 0,
      options: [], // 默认的无效options;
      selfOptions: [], // 使用的options;
      hasAnySelfOptions: false,
      focused: false,
      hasDefaultSlot: false,
      dataOptions: [],
      isOnComposition: false
    };
  },

  computed: {
    prefix: function prefix() {
      return this.config.getPrefixCls('autocomplete');
    },
    _size: function _size() {
      return this.config.getSize(this);
    },
    selectPrefix: function selectPrefix() {
      return this.config.getPrefixCls('select');
    },
    dropdownPrefix: function dropdownPrefix() {
      return this.config.getPrefixCls('dropdown');
    },
    allOptions: function allOptions() {
      return this.dataOptions || this.selfOptions;
    },
    navOptions: function navOptions() {
      return this.allOptions.filter(function (o) {
        return o.visible && !o._disabled;
      });
    },
    isEmpty: function isEmpty() {
      if (!this.hasDefaultSlot) {
        return !this.optionData.length;
      }
      return !this.hasAnySelfOptions;
    },
    visible: function visible() {
      return this.focused && !this.isEmpty;
    },
    optionData: function optionData() {
      var _this = this;

      if (!this.hasDefaultSlot && this.$props.data.length && this.value) {
        if (this.filterMethod === true) {
          return this.$props.data;
        } else if (this.filterMethod === false) {
          return [];
        } else if (typeOf(this.filterMethod) === 'function') {
          return this.$props.data.filter(function (option) {
            return _this.filterMethod(_this.value, option);
          });
        }
      }
      return this.$props.data;
    },
    inputLisenter: function inputLisenter() {
      var lisenter = _extends({}, this.$listeners, {
        input: this.handleInputQuery,
        blur: this.handleBlur,
        focus: this.handleFocus
      });
      delete lisenter.select;
      delete lisenter.search;
      return lisenter;
    }
  },
  watch: {
    focused: function focused(val) {
      if (!val) {
        this.resetHover();
      }
      this.getInputWidth();
    },
    inputWidth: function inputWidth(val) {
      this.minWidth = val + 'px';
    },
    optionData: function optionData() {
      var _this2 = this;

      this.$nextTick(function () {
        _this2.dataOptions = _this2.$refs.dataOption;
        _this2.updatePopper();
      });
    }
  },
  created: function created() {
    this.$on('optionClick', this.handleOptionClick);
  },
  mounted: function mounted() {
    this.dataOptions = this.$refs.dataOption;
  },

  methods: {
    addOption: function addOption(option) {
      this.options.push(option);
    },
    focus: function focus() {
      this.$refs.reference.focus();
    },
    blur: function blur() {
      this.$refs.reference.blur();
    },
    handleSlotUpdated: function handleSlotUpdated() {
      if (this.$slots.default) {
        this.hasDefaultSlot = true;
        this.selfOptions = this.getOptionsFromSlotAnyLevel();
      } else {
        this.hasDefaultSlot = false;
        this.selfOptions = [];
      }
      this.hasAnySelfOptions = !!this.selfOptions.length;
      this.updatePopper();
    },
    getInputWidth: function getInputWidth() {
      this.inputWidth = this.$refs.reference.$el.getBoundingClientRect().width;
    },
    handleComposition: function handleComposition(e) {
      var type = e.type;

      if (type === 'compositionend') {
        this.isOnComposition = false;
        // 当混合输入前后值不变时，不会触发后续的 input 事件，所以需要再次触发 query
        this.$emit('search', e.target.value);
      } else {
        this.isOnComposition = true;
      }
    },
    handleBlur: function handleBlur(event) {
      if (!this.visible) {
        this.handleClickoutside(event);
        this.$emit('blur', event);
      }
    },
    handleClickoutside: function handleClickoutside(event) {
      this.focused = false;
    },
    handleInputQuery: function handleInputQuery(value) {
      this.focused = true;
      this.$emit('input', value);
      this.$emit('change', value);
      if (!this.isOnComposition) {
        this.$emit('search', value);
      }
    },
    handleOptionClick: function handleOptionClick(option, keyboard) {
      this.focused = false;
      if (option.value !== this.value) {
        this.$emit('input', option.value);
        this.$emit('change', option.value);
      }
      // 事件顺序参照: https://tt.sankuai.com/ticket/detail?id=4148656
      this.$emit('select', option.value);
      !keyboard && this.$emit('blur');
    },
    handleFocus: function handleFocus(event) {
      this.focused = true;
      this.$emit('focus', event);
    },
    getOptionsFromSlotFirstLevel: function getOptionsFromSlotFirstLevel() {
      if (!this.$slots.default || !this.$slots.default.length) {
        return [];
      } else {
        return this.$slots.default.filter(function (item) {
          return item.componentOptions && (item.$options.name === 'MtdOption' || item.componentOptions.tag === 'mtd-option');
        });
      }
    },
    getOptionsFromSlotAnyLevel: function getOptionsFromSlotAnyLevel() {
      if (!this.$children || !this.$children.length) {
        return [];
      } else {
        var options = [];
        this.searchOption(this, options);
        return options;
      }
    },
    searchOption: function searchOption(node, options) {
      var _this3 = this;

      if (!node.$children || !this.$children.length) {
        return;
      }
      node.$children.forEach(function (item) {
        if (item.$options.name === 'MtdOption' || item.$options._componentTag === 'mtd-option') {
          options.push(item);
        } else {
          _this3.searchOption(item, options);
        }
      });
    },
    scrollToOption: function scrollToOption(option) {
      // 超长滚动;
      var target = Array.isArray(option) && option[0] ? option[0].$el : option.$el;
      if (this.$refs.popper && target) {
        var menu = this.$refs.menu;
        scrollIntoView(menu, target);
      }
    },
    selectOption: function selectOption(option) {
      if (this.hoverOption && this.hoverOption.visible) {
        this.handleOptionClick(this.hoverOption, true);
      }
    },
    toggleMenu: function toggleMenu() {
      if (!this.disabled) {
        if (!this.filterable || !this.focused) {
          this.focused = !this.focused;
        }
        if (this.focused) {
          this.$refs.tagInput && this.$refs.tagInput.focus();
        }
      }
    },
    updatePopper: function updatePopper() {
      if (this.visible) {
        this.$refs.popper.updatePopper();
      }
    }
  }
};