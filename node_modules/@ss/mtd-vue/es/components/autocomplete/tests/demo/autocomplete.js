import _regeneratorRuntime from 'babel-runtime/regenerator';
import _asyncToGenerator from 'babel-runtime/helpers/asyncToGenerator';
import { setInputValue, waitImmediate, triggerEvent, triggerClick } from '@test/util';

var __vue_render__ = function __vue_render__() {
  var _vm = this;var _h = _vm.$createElement;var _c = _vm._self._c || _h;return _c('mtd-autocomplete', { attrs: { "placeholder": "请输入" }, on: { "search": _vm.handleSearch, "blur": _vm.handleBlur, "change": _vm.handleChange, "select": _vm.handleSelect }, model: { value: _vm.value, callback: function callback($v) {
        _vm.value = $v;
      }, expression: "value" } }, _vm._l(_vm.options, function (item, i) {
    return _c('mtd-option', { key: i, attrs: { "label": item.label, "value": item.value } });
  }), 1);
};
var __vue_staticRenderFns__ = [];

export default {
  render: __vue_render__,

  staticRenderFns: __vue_staticRenderFns__,

  data: function data() {
    return {
      options: [],
      value: '',

      handleSelect: function handleSelect() {},
      handleBlur: function handleBlur() {},
      handleChange: function handleChange() {}
    };
  },

  methods: {
    handleSearch: function handleSearch(value) {
      this.options = value.split('').map(function (v, index) {
        return {
          label: value.slice(0, index + 1),
          value: value.slice(0, index + 1)
        };
      });
    },
    doTest: function doTest(done) {
      var _this = this;

      return _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {
        var text, input, option;
        return _regeneratorRuntime.wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                _this.handleSelect = sinon.spy();
                _this.handleBlur = sinon.spy();
                _this.handleChange = sinon.spy();

                text = '李白';
                input = _this.$el.querySelector('input');

                triggerEvent(input, 'focus', true, true);
                setInputValue(input, text);
                _context.next = 9;
                return waitImmediate();

              case 9:
                expect(_this.value).to.be.eql(text);

                option = document.body.querySelector('.mtd-autocomplete-dropdown-menu .mtd-dropdown-menu-item');

                triggerEvent(input, 'blur', true, true);
                triggerClick(option, true, true);

                expect(_this.value).to.be.eql(text.charAt(0));
                _this.handleSelect.should.have.been.calledOnce();
                _this.handleBlur.should.have.been.calledOnce();
                _this.handleChange.should.have.been.calledOnce();

                expect(_this.handleSelect.calledAfter(_this.handleChange), 'select should after change').to.be.true();
                expect(_this.handleBlur.calledAfter(_this.handleSelect), 'blur should after select').to.be.true();
                done();

              case 20:
              case 'end':
                return _context.stop();
            }
          }
        }, _callee, _this);
      }))();
    }
  }
};