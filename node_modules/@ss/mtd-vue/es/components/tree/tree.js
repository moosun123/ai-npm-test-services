import _Set from 'babel-runtime/core-js/set';
import _Array$from from 'babel-runtime/core-js/array/from';
import _defineProperty from 'babel-runtime/helpers/defineProperty';
import _Object$assign from 'babel-runtime/core-js/object/assign';
import _toConsumableArray from 'babel-runtime/helpers/toConsumableArray';
import _extends from 'babel-runtime/helpers/extends';
import MtdTreeNode from '@ss/mtd-vue/es/components/tree-node';
import { contains, removeChild, insertBefore, insertAfter, insertChild } from './util';
import { addClass, removeClass } from '@ss/mtd-vue/es/utils/dom';
import { CONFIG_PROVIDER, getPrefixCls, getIconCls } from '@ss/mtd-vue/es/utils/config';
import debounce from 'throttle-debounce/debounce';

function remove(key, keys) {
  var index = keys.indexOf(key);
  if (index > -1) {
    keys.splice(index, 1);
  }
  return index > -1;
}

function convertToMap(array) {
  return array.reduce(function (state, key) {
    state[key] = true;
    return state;
  }, {});
}

var DEFAULT_FIELD_NAMES = {
  title: 'title',
  icon: 'icon',
  children: 'children',
  isLeaf: 'isLeaf',
  disabled: 'disabled',
  checkable: 'checkable',
  disableCheckbox: 'disableCheckbox'
};

var __vue_render__ = function __vue_render__() {
  var _obj;
  var _vm = this;var _h = _vm.$createElement;var _c = _vm._self._c || _h;return _c('div', { class: [_vm.prefix, (_obj = {}, _obj[_vm.prefix + "-expand-on-node"] = _vm.expandOnClickNode, _obj[_vm.prefix + "-draggable"] = _vm.draggable, _obj)] }, [_vm._l(_vm.root, function (child) {
    return _c('mtd-tree-node', { key: child.key, attrs: { "node": child, "data": child.data } });
  }), !_vm.data || !_vm.data.length || _vm.root.allHidden ? _vm._t("empty", [_vm._v(" " + _vm._s(_vm.emptyText) + " ")]) : _vm._e(), _c('div', { directives: [{ name: "show", rawName: "v-show", value: _vm.dragState.showDropIndicator, expression: "dragState.showDropIndicator" }], ref: "dropIndicator", class: _vm.prefix + "-drop-indicator" })], 2);
};
var __vue_staticRenderFns__ = [];

export default {
  render: __vue_render__,

  staticRenderFns: __vue_staticRenderFns__,

  name: 'Tree',
  components: {
    MtdTreeNode: MtdTreeNode
  },
  inheritAttrs: false,
  props: {
    nodeClass: {
      type: [String, Function],
      default: ''
    },
    expandIcon: {
      type: String
    },
    data: {
      type: Array,
      default: function _default() {
        return [];
      }
    },
    checkable: Boolean,
    checkedKeys: {
      type: Array,
      default: function _default() {
        return [];
      }
    },
    checkStrictly: {
      type: Boolean,
      default: false
    },
    disabledStrictly: {
      type: Boolean,
      default: true
    },
    checkedStrategy: {
      type: String,
      default: 'all',
      validator: function validator(v) {
        return ['all', 'parent', 'children'].indexOf(v) > -1;
      }
    },

    selectable: {
      type: Boolean,
      default: true
    },
    selectedKeys: {
      type: Array,
      default: function _default() {
        return [];
      }
    },

    // defaultExpandAll: {
    //   type: Boolean,
    //   default: false,
    // },
    expandedKeys: {
      type: Array,
      default: function _default() {
        return [];
      }
    },
    autoExpandParent: {
      type: Boolean,
      default: false
    },
    loadData: Function,
    loadedKeys: {
      type: Array,
      default: function _default() {
        return [];
      }
    },
    expandOnClickNode: {
      type: Boolean,
      default: true
    },
    checkOnClickNode: {
      type: Boolean,
      default: false
    },
    nodeKey: {
      type: String,
      default: 'id'
    },
    baseIndent: {
      type: Number,
      default: 0
    },
    indent: {
      type: Number,
      default: 20
    },
    participateDisabled: {
      type: Boolean,
      default: false
    },
    emptyText: String,

    props: {
      type: Object,
      default: function _default() {
        return {};
      }
    },

    draggable: Boolean,
    allowDrag: Function,
    allowDrop: Function,
    filterNodeMethod: Function,
    filterWithExpand: Boolean // 过滤是否伴随更新expandKeys的动作
  },
  provide: function provide() {
    return {
      tree: this
    };
  },

  inject: {
    config: {
      from: CONFIG_PROVIDER,
      default: {
        getPrefixCls: getPrefixCls,
        getIconCls: getIconCls
      }
    }
  },
  data: function data() {
    return {
      forceNumber: 1,
      dragState: {
        showDropIndicator: false,
        draggingNode: undefined,
        dropNode: null,
        allowDrop: true
      },
      state: {
        expandedKeys: []
      },
      query: ''
    };
  },

  computed: {
    prefix: function prefix() {
      return this.config.getPrefixCls('tree');
    },
    _expandIcon: function _expandIcon() {
      return this.expandIcon || this.config.getIconCls('triangle');
    },
    fieldNames: function fieldNames() {
      return _extends({}, DEFAULT_FIELD_NAMES, this.props);
    },
    checkedKeyMap: function checkedKeyMap() {
      if (!this.checkable) {
        return {};
      }
      return convertToMap(this.checkedKeys);
    },
    loadedKeyMap: function loadedKeyMap() {
      return convertToMap(this.loadedKeys);
    },
    selectedKeyMap: function selectedKeyMap() {
      return convertToMap(this.selectedKeys);
    },
    root: function root() {
      var flatNodes = {};
      var root = this.createNodes(this.data, flatNodes);
      this.buildNodes(flatNodes);
      if (this.forceNumber) {
        // 仅仅是让 root 重新计算
        root.forceNumber = this.forceNumber;
      }
      this.flatNodes = flatNodes; // eslint-disable-line
      return root;
    }
  },
  watch: {
    data: function data(n, v) {
      if (n !== v) {
        this.state.expandedKeys = [];
        this.filterNodeMethod && this.filter('');
      }
    }
  },
  created: function created() {
    this.$on('expandedChange', this.handleExpanded);
    this.$on('checkedChange', this.handleChecked);
    this.$on('loadedData', this.handleDataLoaded);
    this.$on('selectedNode', this.handleSelectedNoded);
    this.$on('nodeClick', this.handleNodeClick);
    this.filter = debounce(500, this.filter);
  },

  methods: {
    // public methods
    filter: debounce(300, function (val) {
      var tempExpandedKeys = [];
      var filterNodeMethod = this.filterNodeMethod;

      if (!filterNodeMethod) {
        throw new Error('[MTD Tree] filterNodeMethod is required when filter');
      }
      var traverse = function traverse(nodes) {
        if (nodes) {
          nodes.forEach(function (node) {
            var childVisible = false;
            if (node.children) {
              childVisible = traverse(node.children);
            }
            node.visible = childVisible || filterNodeMethod(val, node.data, node);
            if (node.visible && node.children) {
              var key = node.key;

              tempExpandedKeys.push(key);
            }
          });
          return nodes.some(function (node) {
            return node.visible;
          });
        }
        return false;
      };
      this.root.allHidden = !traverse(this.root);
      if (this.filterWithExpand && val) {
        this.$emit('update:expandedKeys', tempExpandedKeys);
      }
      this.query = val;
      this.$forceUpdate();
    }),

    // private
    handleDataLoaded: function handleDataLoaded(node, data, children) {
      var key = node.key;

      this.$set(data, 'children', children);
      this.$emit('update:loadedKeys', [].concat(_toConsumableArray(this.loadedKeys), [key]));
      this.filterNodeMethod && this.filter(this.query);
    },
    handleExpanded: function handleExpanded(node, expanded) {
      var key = node.key;

      var next = [].concat(_toConsumableArray(this.state.expandedKeys));
      if (expanded) {
        next.push(key);
      } else {
        remove(key, next);
      }
      var nodes = this.getNodesByKeys(next);
      this.$emit('update:expandedKeys', next);
      this.$emit('toggle-expand', next, {
        node: node,
        nodes: nodes,
        data: node.data,
        expanded: expanded
      });
    },
    getNodesByKeys: function getNodesByKeys(keys) {
      var _this = this;

      return keys.map(function (key) {
        return _this.flatNodes[key];
      });
    },
    getNode: function getNode(key) {
      return this.flatNodes[key];
    },
    handleChecked: function handleChecked(node, checked) {
      var key = node.key;

      var keys = [].concat(_toConsumableArray(this.checkedKeys));
      var nodes = void 0;
      if (this.checkStrictly) {
        if (checked) {
          keys.push(key);
        } else {
          var index = keys.indexOf(key);
          if (index > -1) {
            keys.splice(index, 1);
          }
        }
      } else {
        if (checked) {
          node.checked = true;
          this.updateParentChecked(node);
          this.updateChildChecked(node);
        } else {
          node.checked = false;
          this.updateParentUnChecked(node);
          this.updateChildUnChecked(node);
        }
        nodes = this.getCheckedNodes(this.root);
        keys = nodes.map(function (n) {
          return n.key;
        });
      }
      this.forceNumber++;
      if (!nodes) {
        nodes = this.getNodesByKeys(keys);
      }
      this.$emit('update:checkedKeys', keys);
      this.$emit('toggle-checked', keys, {
        node: node,
        nodes: nodes,
        checked: checked
      });
    },
    getCheckedNodes: function getCheckedNodes(nodes) {
      var checkedStrategy = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.checkedStrategy;

      var checkedNodes = [];
      function flatChecked(node) {
        var children = node.children,
            checked = node.checked,
            checkable = node.checkable;

        if (checked && checkable) {
          checkedNodes.push(node);
        }
        children && children.forEach(flatChecked);
      }
      nodes.forEach(flatChecked);
      if (checkedStrategy === 'children') {
        return checkedNodes.filter(function (node) {
          return !node.children;
        });
      } else if (checkedStrategy === 'parent') {
        return checkedNodes.filter(function (node) {
          var $parent = node.$parent;

          return !$parent || !$parent.checkable || !$parent.checked;
        });
      };
      return checkedNodes;
    },
    getHalfCheckedNodes: function getHalfCheckedNodes() {
      var nodes = this.root;
      var halfCheckedNodes = [];
      function flatHalfChecked(node) {
        var children = node.children,
            checked = node.checked,
            checkable = node.checkable,
            indeterminate = node.indeterminate;

        if (indeterminate) {
          halfCheckedNodes.push(node);
        }
        if (checkable && (checked || indeterminate)) {
          children && children.forEach(flatHalfChecked);
        }
      }
      nodes.forEach(flatHalfChecked);
      return halfCheckedNodes;
    },
    createNodes: function createNodes(data, flats, parentNode) {
      var _this2 = this;

      var level = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 0;
      var _fieldNames = this.fieldNames,
          disabledField = _fieldNames.disabled,
          checkableField = _fieldNames.checkable,
          disableCheckboxField = _fieldNames.disableCheckbox,
          childField = _fieldNames.children,
          isLeafField = _fieldNames.isLeaf,
          titleField = _fieldNames.title,
          iconField = _fieldNames.icon;


      return data.map(function (item) {
        var key = item[_this2.nodeKey];
        var oldNode = _this2.flatNodes && _this2.flatNodes[key];

        var node = {
          key: key,
          $parent: parentNode,
          data: item,
          level: level,
          disabled: disabledField in item ? item[disabledField] : !_this2.disabledStrictly ? false : parentNode && parentNode.disabled,
          checkable: checkableField in item ? item[checkableField] : _this2.checkable,
          isLeaf: item[isLeafField],
          title: item[titleField],
          icon: item[iconField],
          visible: oldNode ? oldNode.visible : true // 上一次节点的visible状态缓存
        };
        _Object$assign(node, {
          selected: _this2.selectedKeyMap[node.key],
          loaded: _this2.loadedKeyMap[node.key],
          disableCheckbox: item[disableCheckboxField] || node.disabled,
          children: item[childField] && item[childField].length ? _this2.createNodes(item[childField], flats, node, level + 1) : undefined
        });
        flats[node.key] = node;
        return node;
      });
    },
    buildNodes: function buildNodes(flatNodes) {
      var _this3 = this;

      var expandedNodes = this.expandedKeys.map(function (key) {
        return flatNodes[key];
      }).filter(function (node) {
        return !!node;
      });

      var expandedKeys = [].concat(_toConsumableArray(this.expandedKeys));

      expandedNodes.forEach(function (node) {
        node.expanded = true;
        var parent = node.$parent;
        if (!_this3.state.expandedKeys.length && _this3.autoExpandParent) {
          while (parent && !parent.expanded) {
            // 首次生效
            parent.expanded = true;
            expandedKeys.push(parent.key);
            parent = parent.$parent;
          }
        }
      });
      this.state.expandedKeys = this.removeDuplicationFromArr(expandedKeys);
      // this.state.expandedKeys = expandedKeys;
      if (expandedKeys.length !== this.expandedKeys.length) {
        this.$emit('update:expandedKeys', this.state.expandedKeys);
      }

      var checkedNodes = this.checkedKeys.map(function (key) {
        return flatNodes[key];
      }).filter(function (node) {
        return !!node;
      });
      checkedNodes.forEach(function (node) {
        node.checked = true;
      });
      if (!this.checkStrictly) {
        checkedNodes.forEach(this.updateChildChecked);
        checkedNodes.forEach(this.updateParentChecked);
      }
    },
    updateParentChecked: function updateParentChecked(node) {
      var _this4 = this;

      var parent = node.$parent;
      // participateDisabled即便disabled父节点无法主动改变状态，但是子节点的改变是可以影响的

      if (this.participateDisabled ? parent : parent && !parent.disableCheckbox) {
        var children = parent.children;

        var allChecked = children.every(function (child) {
          return child.checked || !_this4.participateDisabled && child.disableCheckbox;
        });

        parent.checked = allChecked;
        parent.indeterminate = !allChecked;
        this.updateParentChecked(parent);
      }
    },
    updateChildChecked: function updateChildChecked(node) {
      var _this5 = this;

      var children = node.children;

      if (this.participateDisabled ? children && !node.disabled : children) {
        children.forEach(function (item) {
          if (!item.checked && !item.disableCheckbox) {
            item.checked = true;
            _this5.updateChildChecked(item);
          }
        });
      }
    },
    updateParentUnChecked: function updateParentUnChecked(node) {
      var parent = node.$parent;

      if (parent) {
        var children = parent.children;

        var anyChecked = children.some(function (child) {
          // 忽略 disabledCheckbox 的选项
          return !child.disableCheckbox && (child.checked || child.indeterminate);
        });

        parent.checked = false;
        parent.indeterminate = anyChecked;
        this.updateParentUnChecked(parent);
      }
    },
    updateChildUnChecked: function updateChildUnChecked(node) {
      var _this6 = this;

      var children = node.children;

      if (children) {
        children.forEach(function (item) {
          if (!item.disableCheckbox) {
            item.checked = false;
            _this6.updateChildUnChecked(item);
          }
        });
      }
    },
    handleSelectedNoded: function handleSelectedNoded(node, selected) {
      var next = selected ? [node.key] : [];
      this.$emit('update:selectedKeys', next);
      this.$emit('toggle-selected', node, selected);
    },
    handleNodeClick: function handleNodeClick() {
      for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }

      this.$emit.apply(this, ['node-click'].concat(_toConsumableArray(args)));
    },

    // Thanks to https://github.com/ElemeFE/element/blob/dev/packages/tree/src/tree.vue
    handleDragStart: function handleDragStart(event, treeNode) {
      if (typeof this.allowDrag === 'function' && !this.allowDrag(treeNode.node)) {
        event.preventDefault();
        return false;
      }
      event.dataTransfer.effectAllowed = 'move';
      // wrap in try catch to address IE's error when first param is 'text/plain'
      try {
        // setData is required for draggable to work in FireFox
        // the content has to be '' so dragging a node out of the tree won't open a new tab in FireFox
        event.dataTransfer.setData('text/plain', '');
      } catch (e) {}
      this.dragState.draggingNode = treeNode;
      this.$emit('node-drag-start', treeNode.node);
    },
    handleDragOver: function handleDragOver(event, treeNode) {
      var dropNode = treeNode;
      var dragState = this.dragState;


      var oldDropNode = dragState.dropNode;
      if (oldDropNode && oldDropNode !== dropNode) {
        removeClass(oldDropNode.$el, this.prefix + '-drop-inner');
      }
      var draggingNode = dragState.draggingNode;
      if (!draggingNode || !dropNode) {
        return;
      }

      // 判断插入位置
      var dropPrev = true;
      var dropInner = true;
      var dropNext = true;
      var userAllowDropInner = true;
      if (typeof this.allowDrop === 'function') {
        dropPrev = this.allowDrop(draggingNode.node, dropNode.node, 'prev');
        userAllowDropInner = dropInner = this.allowDrop(draggingNode.node, dropNode.node, 'inner');
        dropNext = this.allowDrop(draggingNode.node, dropNode.node, 'next');
      }
      event.dataTransfer.dropEffect = dropInner ? 'move' : 'none';
      if ((dropPrev || dropInner || dropNext) && oldDropNode !== dropNode) {
        if (oldDropNode) {
          this.$emit('node-drag-leave', draggingNode.node, oldDropNode.node);
        }
        this.$emit('node-drag-enter', draggingNode.node, dropNode.node);
      }
      if (dropPrev || dropInner || dropNext) {
        dragState.dropNode = dropNode;
      }

      if (dropNode.node.nextNode === draggingNode.node) {
        // 已经是下一级，不能插入在下一个
        dropNext = false;
      }
      if (dropNode.node.previousNode === draggingNode.node) {
        // 已经是上一级，不能插入在前一个
        dropPrev = false;
      }
      if (contains(dropNode.node, draggingNode.node, false)) {
        // 已经是子集，不能插入在内
        dropInner = false;
      }
      if (draggingNode.node === dropNode.node || contains(draggingNode.node, dropNode.node)) {
        // 原位置 或是 移动至自身的子集
        dropPrev = false;
        dropInner = false;
        dropNext = false;
      }
      var targetPosition = dropNode.$el.querySelector('.' + this.prefix + '-node-content').getBoundingClientRect();
      var treePosition = this.$el.getBoundingClientRect();

      var dropType = void 0;
      var prevPercent = dropPrev ? dropInner ? 0.25 : dropNext ? 0.45 : 1 : -1;
      var nextPercent = dropNext ? dropInner ? 0.75 : dropPrev ? 0.55 : 0 : 1;

      var distance = event.clientY - targetPosition.top;
      if (distance < targetPosition.height * prevPercent) {
        dropType = 'before';
      } else if (distance > targetPosition.height * nextPercent) {
        dropType = 'after';
      } else if (dropInner) {
        dropType = 'inner';
      } else {
        dropType = 'none';
      }

      var indicatorTop = -9999;
      var iconPosition = dropNode.$el.querySelector('.' + this.prefix + '-node-expand-icon').getBoundingClientRect();

      var contentPosition = dropNode.$el.querySelector('.' + this.prefix + '-node-content-wrapper').getBoundingClientRect();

      var dropIndicator = this.$refs.dropIndicator;
      if (dropType === 'before') {
        indicatorTop = contentPosition.top - treePosition.top - 2; // 样式问题，顶部增加 2px 位移
      } else if (dropType === 'after') {
        indicatorTop = contentPosition.bottom - treePosition.top;
      }
      dropIndicator.style.top = indicatorTop + 'px';
      dropIndicator.style.left = iconPosition.right - treePosition.left + 'px';

      if (dropType === 'inner') {
        addClass(dropNode.$el, this.prefix + '-drop-inner');
      } else {
        removeClass(dropNode.$el, this.prefix + '-drop-inner');
      }
      dragState.showDropIndicator = dropType === 'before' || dropType === 'after';
      dragState.allowDrop = dragState.showDropIndicator || userAllowDropInner;
      dragState.dropType = dropType;
      this.$emit('node-drag-over', draggingNode.node, dropNode.node);
    },
    handleDragEnd: function handleDragEnd(event, treeNode) {
      var dragState = this.dragState;
      var draggingNode = dragState.draggingNode,
          dropType = dragState.dropType,
          dropNode = dragState.dropNode;

      event.preventDefault();
      event.dataTransfer.dropEffect = 'move';

      // 将 node 改为 data
      if (draggingNode && dropNode) {
        var draggingNodeCopy = draggingNode.node;
        var draggingParent = draggingNode.node.$parent ? draggingNode.node.$parent : { data: _defineProperty({}, this.fieldNames.children, this.data), children: this.root };
        var drogParent = dropNode.node.$parent ? dropNode.node.$parent : { data: _defineProperty({}, this.fieldNames.children, this.data), children: this.root };

        if (dropType !== 'none') {
          removeChild(draggingParent, draggingNode.node, this.fieldNames);
        }
        if (dropType === 'before') {
          insertBefore(drogParent, draggingNodeCopy, dropNode.node, this.fieldNames);
        } else if (dropType === 'after') {
          insertAfter(drogParent, draggingNodeCopy, dropNode.node, this.fieldNames);
        } else if (dropType === 'inner') {
          insertChild(dropNode.node, draggingNodeCopy, -1, this.fieldNames);
        }

        removeClass(dropNode.$el, this.prefix + '-drop-inner');

        this.$emit('node-drag-end', draggingNode.node, dropNode.node, dropType);
        if (dropType !== 'none') {
          this.$emit('node-drop', draggingNode.node, dropNode.node, dropType);
        }
      }
      if (draggingNode && !dropNode) {
        this.$emit('node-drag-end', draggingNode.node, null, dropType);
      }
      dragState.showDropIndicator = false;
      dragState.draggingNode = null;
      dragState.dropNode = null;
      dragState.allowDrop = true;
    },


    // 数组去重
    removeDuplicationFromArr: function removeDuplicationFromArr(arr) {
      return _Array$from(new _Set(arr));
    }
  }
};