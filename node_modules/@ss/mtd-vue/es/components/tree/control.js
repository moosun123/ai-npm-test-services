import createHoc from '@ss/mtd-vue/es/utils/hoc';

function isControlled(context, propName) {
  return propName in context.$options.propsData;
}

export default function (name, component) {
  return createHoc({
    name: name,
    props: {
      data: {
        type: Array,
        default: function _default() {
          return [];
        }
      },
      checkedKeys: {
        type: Array,
        default: function _default() {
          return [];
        }
      },
      selectedKeys: {
        type: [Array, String],
        default: function _default() {
          return [];
        }
      },
      expandedKeys: {
        type: [Array, String],
        default: function _default() {
          return [];
        }
      },
      defaultExpandAll: {
        type: Boolean,
        default: function _default() {
          return false;
        }
      },
      nodeKey: {
        type: String,
        default: function _default() {
          return 'id';
        }
      },
      loadedKeys: {
        type: Array,
        default: function _default() {
          return [];
        }
      },
      props: {
        type: Object
      }
    },
    data: function data() {
      return {
        isCheckedControlled: isControlled(this, 'checkedKeys'),
        isSelectedControlled: isControlled(this, 'selectedKeys'),
        isExpandedControlled: isControlled(this, 'expandedKeys'),
        isLoadedControlled: isControlled(this, 'loadedKeys'),
        state: {
          checkedKeys: [],
          selectedKeys: [],
          expandedKeys: [],
          loadedKeys: []
        }
      };
    },

    watch: {
      data: {
        immediate: true,
        handler: function handler(n, v) {
          if (!this.isExpandedControlled && this.defaultExpandAll) {
            this.state.expandedKeys = this.getDefaultExpandedKeys(this.data);
          }
        }
      }
    },
    computed: {
      checked: function checked() {
        return this.isCheckedControlled ? this.checkedKeys : this.state.checkedKeys;
      },
      selected: function selected() {
        return this.isSelectedControlled ? this.selectedKeys : this.state.selectedKeys;
      },
      expanded: function expanded() {
        return this.isExpandedControlled ? this.expandedKeys : this.state.expandedKeys;
      },
      loaded: function loaded() {
        return this.isLoadedControlled ? this.loadedKeys : this.state.loadedKeys;
      }
    },
    methods: {
      // private methods
      updateCheckedKeys: function updateCheckedKeys(v) {
        this.state.checkedKeys = v;
        this.$emit('update:checkedKeys', v);
      },
      updateSelectedKeysKeys: function updateSelectedKeysKeys(v) {
        this.state.selectedKeys = v;
        this.$emit('update:selectedKeys', v);
      },
      updateExpandedKeys: function updateExpandedKeys(v) {
        this.state.expandedKeys = v;
        this.$emit('update:expandedKeys', v);
      },
      updateLoadedKeys: function updateLoadedKeys(v) {
        this.state.loadedKeys = v;
        this.$emit('update:loadedKeys', v);
      },
      getDefaultExpandedKeys: function getDefaultExpandedKeys(data) {
        var defaultExpandedKeys = [];
        if (data.length) {
          this.handleExpandedKeys(data, defaultExpandedKeys);
        }
        return defaultExpandedKeys;
      },
      handleExpandedKeys: function handleExpandedKeys(source, target) {
        var _this = this;

        var childField = (this.props || {}).children || 'children';
        source.forEach(function (item, index) {
          if (item[childField] && item[childField].length) {
            target.push(item[_this.nodeKey]);
            _this.handleExpandedKeys(item[childField], target);
          }
        });
      },


      // public methods
      getCheckedNodes: function getCheckedNodes(checkedStrategy) {
        var wrappedInstance = this.$refs.wrappedInstance;

        var cs = checkedStrategy === undefined ? wrappedInstance.checkedStrategy : checkedStrategy;
        return wrappedInstance.getCheckedNodes(wrappedInstance.root, cs);
      },
      getHalfCheckedNodes: function getHalfCheckedNodes() {
        var wrappedInstance = this.$refs.wrappedInstance;

        return wrappedInstance.getHalfCheckedNodes();
      },
      getNode: function getNode(key) {
        var wrappedInstance = this.$refs.wrappedInstance;

        return wrappedInstance.getNode(key);
      },
      filter: function filter(val) {
        this.$refs.wrappedInstance.filter(val);
      }
    }
  }, {
    mapStateToProps: function mapStateToProps(context) {
      return {
        checkedKeys: context.checked,
        selectedKeys: context.selected,
        expandedKeys: context.expanded,
        loadedKeys: context.loaded,
        data: context.data,
        nodeKey: context.nodeKey,
        props: context.props
      };
    },
    mapMethodToListener: function mapMethodToListener(context) {
      // warning 动态监听会造成错误
      var lisenter = {};
      if (!context.isCheckedControlled) {
        lisenter['update:checkedKeys'] = context.updateCheckedKeys;
      }
      if (!context.isSelectedControlled) {
        lisenter['update:selectedKeys'] = context.updateSelectedKeysKeys;
      }
      if (!context.isExpandedControlled) {
        lisenter['update:expandedKeys'] = context.updateExpandedKeys;
      }
      if (!context.isLoadedControlled) {
        lisenter['update:loadedKeys'] = context.updateLoadedKeys;
      }
      return lisenter;
    },

    withRef: true
  })(component);
}