import _extends from 'babel-runtime/helpers/extends';
import MtdPopover from '@ss/mtd-vue/es/components/popover';
import Button from '@ss/mtd-vue/es/components/button';
import { hasProps } from '@ss/mtd-vue/es/utils/vnode';
import { CONFIG_PROVIDER, getPrefixCls, getIconCls } from '@ss/mtd-vue/es/utils/config';
var Popover = MtdPopover.WrappedComponent;

var __vue_render__ = function __vue_render__() {
  var _vm = this;var _h = _vm.$createElement;var _c = _vm._self._c || _h;return _c('popover', _vm._g(_vm._b({ ref: "popover", attrs: { "popper-class": _vm.prefix } }, 'popover', _vm.$attrs, false), _vm.$listeners), [_vm._t("default"), _c('template', { slot: "content" }, [_c('div', { class: _vm.prefix + "-inner" }, [_vm.sIcon ? _c('span', { class: _vm.prefix + "-icon" }, [_c('i', { class: _vm.sIcon })]) : _vm._e(), _c('div', { class: _vm.prefix + "-content" }, [_vm.$slots.title || _vm.title ? _c('div', { class: _vm.pp + "-title" }, [_vm._t("title", [_vm._v(_vm._s(_vm.title))])], 2) : _vm._e(), _vm.$slots.message || _vm.message ? _c('div', { class: _vm.prefix + "-message" }, [_vm._t("message", [_vm._v(" " + _vm._s(_vm.message) + " ")])], 2) : _vm._e()])]), _c('div', { class: _vm.prefix + "-actions" }, [_c('Button', _vm._b({ on: { "click": _vm.cancel } }, 'Button', _vm.cancelProps, false), [_vm._v(_vm._s(_vm.cancelButtonText))]), _c('Button', _vm._b({ on: { "click": _vm.ok } }, 'Button', _vm.okProps, false), [_vm._v(_vm._s(_vm.okButtonText))])], 1)])], 2);
};
var __vue_staticRenderFns__ = [];

export default {
  render: __vue_render__,

  staticRenderFns: __vue_staticRenderFns__,

  name: 'Popconfirm',
  components: {
    Popover: Popover,
    Button: Button
  },
  inheritAttrs: false,
  props: {
    title: String,
    message: String,
    icon: String,
    okButtonText: {
      type: String,
      default: '确定'
    },
    cancelButtonText: {
      type: String,
      default: '取消'
    },
    okButtonProps: Object,
    cancelButtonProps: Object
  },
  inject: {
    config: {
      from: CONFIG_PROVIDER,
      default: {
        getPrefixCls: getPrefixCls,
        getIconCls: getIconCls
      }
    }
  },
  computed: {
    prefix: function prefix() {
      return this.config.getPrefixCls('popconfirm');
    },
    pp: function pp() {
      return this.config.getPrefixCls('popover');
    },
    sIcon: function sIcon() {
      return hasProps(this, 'icon') ? this.icon : this.config.getIconCls('warning-circle');
    },
    okProps: function okProps() {
      return _extends({
        type: 'danger',
        size: 'small'
      }, this.okButtonProps);
    },
    cancelProps: function cancelProps() {
      return _extends({
        size: 'small'
      }, this.cancelButtonProps);
    }
  },
  methods: {
    ok: function ok() {
      this.$emit('ok');
      this.$emit('input', false);
    },
    cancel: function cancel() {
      this.$emit('cancel');
      this.$emit('input', false);
    },
    updatePopper: function updatePopper() {
      this.$refs.popover.updatePopper();
    }
  }
};