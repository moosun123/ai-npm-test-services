import _regeneratorRuntime from 'babel-runtime/regenerator';
import _asyncToGenerator from 'babel-runtime/helpers/asyncToGenerator';
import { findVM } from '@test/util';

var __vue_render__ = function __vue_render__() {
  var _vm = this;var _h = _vm.$createElement;var _c = _vm._self._c || _h;return _c('div', [_c('mtd-popconfirm', { attrs: { "placement": "top", "visible": "", "message": "您确定要删除现有文档内容吗？", "icon": _vm.icon }, on: { "ok": _vm.confirm } }, [_c('mtd-button', { staticStyle: { "margin-right": "40px" } }, [_vm._v(" 删除 ")])], 1)], 1);
};
var __vue_staticRenderFns__ = [];

export default {
  render: __vue_render__,

  staticRenderFns: __vue_staticRenderFns__,

  data: function data() {
    return {
      icon: 'mtdicon mtdicon-error-circle'
    };
  },

  methods: {
    confirm: function confirm() {
      this.$mtd.message({
        type: 'success',
        message: '删除成功'
      });
    },
    doTest: function doTest(done) {
      var _this = this;

      return _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {
        var vm;
        return _regeneratorRuntime.wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                vm = findVM(_this, { name: 'MtdPopperDrop' });

                expect(vm.$el.querySelector('.mtdicon-error-circle')).to.be.ok();
                done();

              case 3:
              case 'end':
                return _context.stop();
            }
          }
        }, _callee, _this);
      }))();
    }
  }
};