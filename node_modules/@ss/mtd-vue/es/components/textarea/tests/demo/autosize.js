import _regeneratorRuntime from 'babel-runtime/regenerator';
import _asyncToGenerator from 'babel-runtime/helpers/asyncToGenerator';
import { waitImmediate } from '@test/util';
import Textarea from '../../textarea';

var __vue_render__ = function __vue_render__() {
  var _vm = this;var _h = _vm.$createElement;var _c = _vm._self._c || _h;return _c('div', [_c('mtd-textarea', { ref: "textarea1", style: {
      lineHeight: _vm.lineHeight + "px",
      borderWidth: _vm.borderWidth + "px",
      padding: _vm.paddingSize + "px",
      boxSizing: 'border-box'
    }, attrs: { "autosize": "", "placeholder": "请输入内容" }, model: { value: _vm.textarea, callback: function callback($v) {
        _vm.textarea = $v;
      }, expression: "textarea" } }), _c('mtd-textarea', { ref: "textarea2", style: {
      lineHeight: _vm.lineHeight + "px",
      borderWidth: _vm.borderWidth + "px",
      padding: _vm.paddingSize + "px",
      boxSizing: 'border-box'
    }, attrs: { "autosize": { minRows: 2, maxRows: 4 }, "placeholder": "请输入内容" }, model: { value: _vm.textarea, callback: function callback($v) {
        _vm.textarea = $v;
      }, expression: "textarea" } })], 1);
};
var __vue_staticRenderFns__ = [];

export default {
  render: __vue_render__,

  staticRenderFns: __vue_staticRenderFns__,

  name: 'TextAreaAutosize',
  components: {
    MtdTextarea: Textarea
  },
  data: function data() {
    return {
      paddingSize: 8,
      borderWidth: 1,
      lineHeight: 22,
      textarea: '1xxxxx\n2xxxxx\n3xxxxx\n4xxxxx\n5xxxxx\n6xxxxx\n7xxxxx'
    };
  },

  methods: {
    doTest: function doTest(done) {
      var _this = this;

      return _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {
        var paddingSize, borderWidth, lineHeight, textarea1, textarea2;
        return _regeneratorRuntime.wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                paddingSize = _this.paddingSize, borderWidth = _this.borderWidth, lineHeight = _this.lineHeight;
                textarea1 = _this.$refs.textarea1;
                textarea2 = _this.$refs.textarea2;
                _context.next = 5;
                return waitImmediate();

              case 5:

                // singleHeight 22px; paddingSize: 2*8px; borderSize: 2px;
                expect(parseInt(textarea1.textareaCalcStyle.height)).to.be.equal(7 * lineHeight + 2 * paddingSize + 2 * borderWidth);
                expect(parseInt(textarea2.textareaCalcStyle.height)).to.be.equal(4 * lineHeight + 2 * paddingSize + 2 * borderWidth);

                _this.textarea = '';
                _context.next = 10;
                return waitImmediate();

              case 10:

                expect(parseInt(textarea1.textareaCalcStyle.height)).to.be.equal(1 * lineHeight + 2 * paddingSize + 2 * borderWidth);
                expect(parseInt(textarea2.textareaCalcStyle.height)).to.be.equal(2 * lineHeight + 2 * paddingSize + 2 * borderWidth);

                done();

              case 13:
              case 'end':
                return _context.stop();
            }
          }
        }, _callee, _this);
      }))();
    }
  }
};