import _Object$assign from 'babel-runtime/core-js/object/assign';
import calcNodeHeight from './calcNodeHeight';
import { CONFIG_PROVIDER, getPrefixCls } from '@ss/mtd-vue/es/utils/config';
import { isKey } from '@ss/mtd-vue/es/utils/key-codes';

var __vue_render__ = function __vue_render__() {
  var _obj;
  var _vm = this;var _h = _vm.$createElement;var _c = _vm._self._c || _h;return _c('textarea', _vm._g(_vm._b({ ref: "textarea", class: [_vm.prefix, (_obj = {}, _obj[_vm.prefix + "-disabled"] = _vm.disabled, _obj[_vm.prefix + "-readonly"] = _vm.readonly, _obj[_vm.prefix + "-invalid"] = _vm.invalid, _obj)], style: _vm.textareaCalcStyle, attrs: { "readonly": _vm.readonly, "disabled": _vm.disabled }, domProps: { "value": _vm.value } }, 'textarea', _vm.$attrs, false), _vm.inputLisenters));
};
var __vue_staticRenderFns__ = [];

export default {
  render: __vue_render__,

  staticRenderFns: __vue_staticRenderFns__,

  name: 'Textarea',
  props: {
    disabled: Boolean,
    readonly: Boolean,
    invalid: Boolean,
    value: [String, Number],
    autosize: {
      type: [Boolean, Object],
      default: false
    }
  },
  inject: {
    config: {
      from: CONFIG_PROVIDER,
      default: {
        getPrefixCls: getPrefixCls
      }
    }
  },
  data: function data() {
    return {
      textareaCalcStyle: {},
      isComposing: false
    };
  },

  computed: {
    prefix: function prefix() {
      return this.config.getPrefixCls('textarea');
    },
    inputLisenters: function inputLisenters() {
      var lisenters = _Object$assign({}, this.$listeners, {
        input: this.handleInput,
        compositionstart: this.handleComposition,
        compositionupdate: this.handleComposition,
        compositionend: this.handleComposition,
        keyup: this.handleKeyup
      });
      if (lisenters.change) {
        // it will trigger change event twice if not remove
        delete lisenters.change;
      }
      return lisenters;
    }
  },
  watch: {
    value: function value(val) {
      this.$nextTick(this.resizeTextarea);
    }
  },
  mounted: function mounted() {
    this.resizeTextarea();
  },

  methods: {
    setNativeInput: function setNativeInput() {
      var textarea = this.$refs.textarea;

      if (textarea && textarea.value !== this.value) {
        textarea.value = this.inputValue;
      }
    },
    handleInput: function handleInput(event, options) {
      var value = event.target.value;

      if (value !== this.value) {
        this.$emit('input', value);
        if (!this.isComposing) {
          setTimeout(this.setNativeInput, 0);
        }
      }
      if (!this.isComposing || options && options.change) {
        this.$emit('change', value);
      }
    },
    handleComposition: function handleComposition(e) {
      var type = e.type;

      if (this.$listeners[type]) {
        this.$emit(type, e);
      }
      if (type === 'compositionend') {
        this.isComposing = false;
        this.handleInput(e, { change: true });
      } else {
        this.isComposing = true;
      }
    },
    handleKeyup: function handleKeyup(e) {
      if (this.$listeners.keyup) {
        this.$emit('keyup', e);
      }
      if (isKey(e, 'enter') && !this.isComposing) {
        this.$emit('enter', e);
      }
    },
    focus: function focus() {
      this.$refs.textarea.focus();
    },
    blur: function blur() {
      this.$refs.textarea.blur();
    },
    select: function select() {
      this.$refs.textarea.select();
    },
    resizeTextarea: function resizeTextarea() {
      if (this.$isServer || !this.autosize) return;
      var _autosize = this.autosize,
          minRows = _autosize.minRows,
          maxRows = _autosize.maxRows;

      this.textareaCalcStyle = calcNodeHeight(this.$refs.textarea, minRows, maxRows);
    }
  }
};