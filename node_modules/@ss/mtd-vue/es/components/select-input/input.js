import _Object$assign from 'babel-runtime/core-js/object/assign';
import { CONFIG_PROVIDER, getPrefixCls, getIconCls, getSize } from '@ss/mtd-vue/es/utils/config';

var __vue_render__ = function __vue_render__() {
  var _obj;
  var _vm = this;var _h = _vm.$createElement;var _c = _vm._self._c || _h;return _c('div', { class: [_vm.prefix + "-wrapper", _vm.selectPrefix + "-input", (_obj = {}, _obj[_vm.prefix + "-prefix"] = _vm.hasPrefix, _obj[_vm.prefix + "-suffix"] = _vm.hasSuffix, _obj[_vm.prefix + "-disabled"] = _vm.disabled, _obj[_vm.prefix + "-invalid"] = _vm.invalid, _obj[_vm.prefix + "-readonly"] = _vm.readonly, _obj[_vm.prefix + "-" + _vm._size] = !!_vm._size, _obj[_vm.prefix + "-" + _vm.genre] = !!_vm.genre, _obj)], on: { "mouseenter": function mouseenter($event) {
        _vm.hovering = true;
      }, "mouseleave": function mouseleave($event) {
        _vm.hovering = false;
      } } }, [_vm.hasPrefix ? _c('span', { class: _vm.prefix + "-prefix-inner" }, [_vm._t("prefix", [_c('i', { class: _vm.prefixIcon, on: { "click": _vm.handlePrefixClick } })])], 2) : _vm._e(), _c('input', _vm._g(_vm._b({ ref: "input", class: _vm.prefix, attrs: { "type": _vm.type, "readonly": _vm.readonly, "disabled": _vm.disabled, "autocomplete": "off" }, domProps: { "value": _vm.value } }, 'input', _vm.$attrs, false), _vm.inputLisenters)), _vm.hasSuffix ? _c('span', { class: _vm.prefix + "-suffix-inner" }, [_vm.showClear ? _c('i', { class: _vm.prefix + "-clear " + _vm.iconPrefix('error-circle'), on: { "click": function click($event) {
        $event.stopPropagation();return _vm.handleClearClick($event);
      } } }) : _vm._t("suffix", [_c('i', { class: _vm.suffixIcon, on: { "click": _vm.handleSuffixIconClick } })])], 2) : _vm._e()]);
};
var __vue_staticRenderFns__ = [];

export default {
  render: __vue_render__,

  staticRenderFns: __vue_staticRenderFns__,

  name: 'MtdSelectInput',
  inheritAttrs: false,
  props: {
    type: {
      type: String,
      default: 'text'
    },
    size: String,
    clearable: Boolean,
    disabled: Boolean,
    readonly: Boolean,
    invalid: Boolean,
    value: [String, Number, Array],
    prefixIcon: String,
    suffixIcon: String,
    multiple: Boolean,
    inputWidth: Number,
    genre: String,
    filterable: {
      type: Boolean,
      default: function _default() {
        return false;
      }
    }
  },
  inject: {
    config: {
      from: CONFIG_PROVIDER,
      default: {
        getPrefixCls: getPrefixCls,
        getIconCls: getIconCls,
        getSize: getSize
      }
    }
  },
  data: function data() {
    return {
      focused: false,
      hovering: false,
      query: ''
    };
  },

  computed: {
    prefix: function prefix() {
      return this.config.getPrefixCls('input');
    },
    _size: function _size() {
      return this.config.getSize(this);
    },
    iconPrefix: function iconPrefix() {
      return this.config.getIconCls;
    },
    selectPrefix: function selectPrefix() {
      return this.config.getPrefixCls('select');
    },
    hasPrefix: function hasPrefix() {
      return !!(this.prefixIcon || this.$slots.prefix);
    },
    hasSuffix: function hasSuffix() {
      return this.clearable || !!(this.suffixIcon || this.$slots.suffix);
    },
    hasValue: function hasValue() {
      return this.value === 0 || !!this.value;
    },
    inputLisenters: function inputLisenters() {
      var lisenters = _Object$assign({}, this.$listeners, {
        input: this.handleInput
      });
      if (lisenters.change) {
        // it will trigger change event twice if not remove
        delete lisenters.change;
      }
      return lisenters;
    },
    showClear: function showClear() {
      return this.clearable && !this.disabled && this.hasValue && (this.focused || this.hovering);
    }
  },
  watch: {
    value: function value(val) {
      this.query = val;
    }
  },
  methods: {
    handleInput: function handleInput(event) {
      this.$emit('input', event.target.value);
    },
    handleClearClick: function handleClearClick() {
      this.$emit('clear');
      this.$emit('input', '');
    },
    handlePrefixClick: function handlePrefixClick(e) {
      this.$emit('click-prefix', e);
    },
    handleSuffixIconClick: function handleSuffixIconClick(e) {
      this.focus();
      this.$emit('click-suffix', e);
    },
    focus: function focus() {
      this.$refs.input.focus();
    },
    blur: function blur() {
      this.$refs.input.blur();
    }
  }
};