import Icon from '@ss/mtd-vue/es/components/icon';
import { CONFIG_PROVIDER, getPrefixCls, getSize } from '@ss/mtd-vue/es/utils/config';

function isEmptyNullUndefined(val) {
  return val === '' || val === undefined || val === null;
}

var __vue_render__ = function __vue_render__() {
  var _obj, _obj$1, _obj$2;
  var _vm = this;var _h = _vm.$createElement;var _c = _vm._self._c || _h;return _c('div', { class: (_obj = {}, _obj[_vm.prefix + "-wrapper"] = true, _obj[_vm.prefix + "-disabled"] = _vm.disabled, _obj[_vm.prefix + "-invalid"] = _vm.invalid, _obj[_vm.prefix + "-without-controls"] = !_vm.controls, _obj[_vm.prefix + "-controls-right"] = _vm.controlsPosition === 'right', _obj[_vm.prefix + "-" + _vm._size] = !!_vm._size, _obj) }, [_vm.controls ? _c('span', { class: [_vm.prefix + "-handle " + _vm.prefix + "-handle-down", (_obj$1 = {}, _obj$1[_vm.prefix + "-handle-disabled"] = _vm.downHandleDisabled, _obj$1)], on: { "click": function click($event) {
        $event.preventDefault();return _vm.handleDownStep($event);
      } } }, [_c('Icon', { attrs: { "name": _vm.controlsPosition === 'right' ? 'down' : 'remove' } })], 1) : _vm._e(), _vm.controls ? _c('span', { class: (_obj$2 = {}, _obj$2[_vm.prefix + "-handle " + _vm.prefix + "-handle-up"] = true, _obj$2[_vm.prefix + "-handle-disabled"] = _vm.upHandleDisabled, _obj$2), on: { "click": function click($event) {
        $event.preventDefault();return _vm.handleUpStep($event);
      } } }, [_c('Icon', { attrs: { "name": _vm.controlsPosition === 'right' ? 'up' : 'add' } })], 1) : _vm._e(), _c('input', _vm._b({ ref: "input", class: _vm.prefix, attrs: { "type": "text", "autocomplete": "off", "placeholder": _vm.placeholder, "name": _vm.name, "disabled": _vm.disabled }, domProps: { "value": _vm.displayValue }, on: { "input": _vm.handleInput, "change": _vm.handleChange, "focus": _vm.handleFocus, "blur": _vm.handleBlur, "keyup": _vm.handleKeyUp, "keydown": [function ($event) {
        if (!$event.type.indexOf('key') && _vm._k($event.keyCode, "up", 38, $event.key, ["Up", "ArrowUp"])) {
          return null;
        }$event.preventDefault();return _vm.handleUpStep($event);
      }, function ($event) {
        if (!$event.type.indexOf('key') && _vm._k($event.keyCode, "down", 40, $event.key, ["Down", "ArrowDown"])) {
          return null;
        }$event.preventDefault();return _vm.handleDownStep($event);
      }] } }, 'input', _vm.$attrs, false))]);
};
var __vue_staticRenderFns__ = [];

export default {
  render: __vue_render__,

  staticRenderFns: __vue_staticRenderFns__,

  name: 'InputNumber',
  components: {
    Icon: Icon
  },
  props: {
    value: [String, Number],
    placeholder: String,
    name: String,
    size: String,
    disabled: {
      type: Boolean,
      default: false
    },
    invalid: {
      type: Boolean,
      default: false
    },
    max: {
      type: Number,
      default: Infinity
    },
    min: {
      type: Number,
      default: -Infinity
    },
    precision: {
      type: Number,
      validator: function validator(val) {
        return val === undefined || val >= 0 && val === parseInt(val, 10);
      }
    },
    step: {
      type: Number,
      default: 1
    },
    formatter: Function,
    parser: Function,
    controls: {
      type: Boolean,
      default: true
    },
    controlsPosition: {
      type: String,
      default: '',
      validator: function validator(val) {
        return ['right', ''].indexOf(val) !== -1;
      }
    },
    allowEmpty: Boolean,
    illegalClear: Boolean
  },
  data: function data() {
    return {
      currentValue: '',
      userInput: null
    };
  },

  inject: {
    config: {
      from: CONFIG_PROVIDER,
      default: {
        getPrefixCls: getPrefixCls,
        getSize: getSize
      }
    }
  },
  computed: {
    prefix: function prefix() {
      return this.config.getPrefixCls('input-number');
    },
    _size: function _size() {
      return this.config.getSize(this);
    },
    upHandleDisabled: function upHandleDisabled() {
      return this.increase(this.currentValue) > this.max;
    },
    downHandleDisabled: function downHandleDisabled() {
      return this.decrease(this.currentValue) < this.min;
    },
    displayValue: function displayValue() {
      if (this.userInput !== null) {
        return this.formatWrapper(this.userInput);
      }
      var val = this.currentValue;
      var parseFloatValue = parseFloat(val, 10);
      if (!isNaN(parseFloatValue)) {
        val = this.precisionWrapper(parseFloatValue);
      }
      val = this.formatWrapper(val);
      return val;
    },
    numPrecision: function numPrecision() {
      var value = this.value,
          step = this.step,
          getPrecision = this.getPrecision,
          precision = this.precision,
          currentValue = this.currentValue;

      var stepPrecision = getPrecision(step);
      if (precision !== undefined) {
        if (stepPrecision > precision) {
          console.warn('precision should not be less than the decimal places of step');
        }
        return precision;
      } else {
        var inputValuePrecision = getPrecision(value);
        if (value !== undefined && currentValue && typeof currentValue === 'number') {
          inputValuePrecision = getPrecision(currentValue);
        }
        return Math.max(inputValuePrecision, stepPrecision);
      }
    }
  },
  watch: {
    value: {
      immediate: true,
      handler: function handler(val) {
        if (!this.isNumber(val)) {
          console.warn('MTD[InputNumber] value shoule be number');
          return;
        }
        val = isEmptyNullUndefined(val) ? '' : parseFloat(val, 10);
        this.currentValue = val;
        this.userInput = null;
      }
    }
  },
  methods: {
    handleInput: function handleInput(event) {
      var val = event.target.value.trim().replace(/。/g, '.');
      val = this.parserWrapper(val);
      this.userInput = val;
    },
    handleChange: function handleChange(event) {
      var val = this.userInput;
      if (this.isNumber(val)) {
        // double parseFloag, -0 -> 0
        var newVal = val === '' ? '' : parseFloat(parseFloat(val, 10), 10);
        this.setCurrentValue(newVal);
      }
      this.userInput = null;
    },
    handleFocus: function handleFocus(event) {
      this.$emit('focus', event);
    },
    handleBlur: function handleBlur(event) {
      this.$emit('blur', event);
    },
    handleUpStep: function handleUpStep() {
      if (this.disabled || this.upHandleDisabled) {
        return;
      }
      var val = this.userInput || this.currentValue;
      var newVal = this.increase(val);
      this.setCurrentValue(newVal);
    },
    handleDownStep: function handleDownStep() {
      if (this.disabled || this.downHandleDisabled) {
        return;
      }
      var val = this.userInput || this.currentValue;
      var newVal = this.decrease(val);
      this.setCurrentValue(newVal);
    },
    commonCrease: function commonCrease(type, val) {
      var newVal = val || 0;
      if (!this.isNumber(newVal)) {
        return this.currentValue;
      }
      if (isEmptyNullUndefined(val) && (this.min && this.min !== -Infinity || this.min === 0)) {
        return this.min;
      }
      newVal = parseFloat(newVal, 10);
      var precisionFactor = Math.pow(10, this.numPrecision);
      var precisionNewVal = precisionFactor * newVal;
      var precisionStep = precisionFactor * this.step;
      var result = (type === 'up' ? precisionNewVal + precisionStep : precisionNewVal - precisionStep) / precisionFactor;
      return Number(result.toFixed(this.numPrecision));
    },
    increase: function increase(val) {
      return this.commonCrease('up', val);
    },
    decrease: function decrease(val) {
      return this.commonCrease('down', val);
    },
    setCurrentValue: function setCurrentValue(val) {
      if (this.precision !== undefined) {
        if (!(this.allowEmpty && val === '')) {
          val = this.precisionWrapper(val);
        }
      }
      val = this.getValidValueByMinAndMax(val);
      if (this.currentValue === val) {
        return;
      }
      // toFixed返回的是字符串
      val = isEmptyNullUndefined(val) ? null : Number(val);
      this.$emit('input', val);
      this.$emit('change', val);
    },
    isNumber: function isNumber(val) {
      return isEmptyNullUndefined(val) ? true : !isNaN(parseFloat(val, 10));
    },
    getPrecision: function getPrecision(val) {
      if (isEmptyNullUndefined(val)) {
        return 0;
      }
      var valString = val.toString();
      var dotPosition = valString.indexOf('.');
      var precision = 0;
      if (dotPosition !== -1) {
        precision = valString.length - dotPosition - 1;
      }
      return precision;
    },
    precisionWrapper: function precisionWrapper(num) {
      if (this.numPrecision !== undefined) {
        var numStr = String(num);
        if (numStr.includes('e') && num > 1) {
          // 如果是科学计数法，则不做处理，且对于小于1的小数保持原来的处理（不会使用科学计数法）
          return num;
        };
        // 超出精度的舍弃，toFixed会四舍五入
        var pointArr = numStr.split('.');
        if (pointArr && pointArr[1] > this.numPrecision) {
          num = pointArr[0] + '.' + pointArr[1].substr(0, this.numPrecision);
        }
        num = Number(num).toFixed(this.numPrecision);
      }
      return num;
    },
    formatWrapper: function formatWrapper(num) {
      return this.formatter ? this.formatter(num) : num;
    },
    parserWrapper: function parserWrapper(num) {
      return this.parser ? this.parser(num) : num;
    },
    getValidValueByMinAndMax: function getValidValueByMinAndMax(val) {
      if (this.allowEmpty && val === '') {
        return '';
      }
      if (val < this.min) {
        val = this.illegalClear ? undefined : this.min;
      }
      if (val > this.max) {
        val = this.illegalClear ? undefined : this.max;
      }
      return val;
    },
    handleKeyUp: function handleKeyUp(e) {
      this.$emit('keyup', e);
    }
  }
};