import _defineProperty from 'babel-runtime/helpers/defineProperty';
import { hasProps } from '@ss/mtd-vue/es/utils/vnode';
import { deprecated } from '@ss/mtd-vue/es/utils/console';
import { CONFIG_PROVIDER, getPrefixCls, getSize } from '@ss/mtd-vue/es/utils/config';

var __vue_render__ = function __vue_render__() {
  var _vm = this;var _h = _vm.$createElement;var _c = _vm._self._c || _h;return _c('span', { ref: "switch", class: _vm.wrapperCls, on: { "click": _vm.handleClick } }, [_c('input', { ref: "input", class: _vm.prefix + "-input", staticStyle: { "display": "none" }, attrs: { "type": "checkbox", "name": _vm.name }, domProps: { "checked": _vm.checked } }), _c('span', { class: _vm.btnCls }, [_vm.loading ? _vm._t("loading", [_c('span', { class: _vm.prefix + "-spin" })]) : _vm._e()], 2)]);
};
var __vue_staticRenderFns__ = [];

export default {
  render: __vue_render__,

  staticRenderFns: __vue_staticRenderFns__,

  name: 'MtdSwitch',
  model: {
    prop: 'value'
  },
  props: {
    // eslint-disable-next-line
    value: {},
    actived: {
      type: Boolean
    },
    // eslint-disable-next-line
    trueValue: {
      default: true
    },
    // eslint-disable-next-line
    falseValue: {
      default: false
    },
    disabled: {
      type: Boolean
    },
    size: {
      type: String
    },
    loading: {
      type: Boolean
    },
    name: {
      type: String
    }
  },
  inject: {
    config: {
      from: CONFIG_PROVIDER,
      default: {
        getPrefixCls: getPrefixCls,
        getSize: getSize
      }
    }
  },
  computed: {
    prefix: function prefix() {
      return this.config.getPrefixCls('switch');
    },
    _size: function _size() {
      return this.config.getSize(this);
    },
    checked: function checked() {
      if (hasProps(this, 'actived')) {
        return this.actived;
      }
      return this.value === this.trueValue;
    },
    wrapperCls: function wrapperCls() {
      var _ref;

      return ['' + this.prefix, (_ref = {}, _defineProperty(_ref, this.prefix + '-active', this.checked), _defineProperty(_ref, this.prefix + '-disabled', this.disabled), _defineProperty(_ref, this.prefix + '-' + this._size, this._size), _defineProperty(_ref, this.prefix + '-loading', this.loading), _ref)];
    },
    btnCls: function btnCls() {
      return [this.prefix + '-btn'];
    }
  },
  mounted: function mounted() {
    if (hasProps(this, 'actived')) {
      deprecated('Switch', 'actived', 'please use `value` replace `active`');
    }
  },

  methods: {
    handleClick: function handleClick(e) {
      e.preventDefault();
      if (this.disabled || this.loading) {
        return false;
      }
      var value = this.checked ? this.falseValue : this.trueValue;
      this.$emit('input', value);
      this.$emit('change', value);
    }
  }
};