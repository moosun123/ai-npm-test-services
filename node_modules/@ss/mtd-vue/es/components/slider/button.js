import MtdTooltip from '@ss/mtd-vue/es/components/tooltip';
var __vue_render__ = function __vue_render__() {
  var _vm = this;var _h = _vm.$createElement;var _c = _vm._self._c || _h;return _c('mtd-tooltip', { ref: "tooltip", attrs: { "content": _vm.tooltipContent, "placement": _vm.placement, "visible": _vm.tooltipVisible, "size": "small" }, on: { "input": _vm.handleTooltipChange } }, [_c('div', { class: _vm.prefix + "-button", style: _vm.vertical ? { bottom: _vm.getPercent(_vm.value) } : { left: _vm.getPercent(_vm.value) }, on: { "mousedown": _vm.onMouseDown, "click": function click($event) {
        $event.stopPropagation();
      }, "touchstart": _vm.onMouseDown } })]);
};
var __vue_staticRenderFns__ = [];

export default {
  render: __vue_render__,

  staticRenderFns: __vue_staticRenderFns__,

  name: 'MtdSliderButton',
  components: {
    MtdTooltip: MtdTooltip
  },
  props: {
    prefix: {
      type: String,
      require: true
    },
    value: {
      type: Number,
      default: 0
    },
    vertical: {
      type: Boolean,
      default: false
    },
    type: {
      type: [String, Number]
    },
    formatTooltip: Function,
    getPercent: Function
  },
  data: function data() {
    return {
      tip: false,
      dragging: false
    };
  },

  computed: {
    tooltipContent: function tooltipContent() {
      return this.formatTooltip ? this.formatTooltip(this.value) : this.value.toString();
    },
    placement: function placement() {
      return this.vertical ? 'right' : 'top';
    },
    tooltipVisible: function tooltipVisible() {
      return this.dragging ? true : this.tip;
    }
  },
  watch: {
    value: function value() {
      this.$refs.tooltip.updatePopper();
    }
  },
  methods: {
    handleTooltipChange: function handleTooltipChange(v) {
      this.tip = v;
    },
    onMouseDown: function onMouseDown(e) {
      e.preventDefault();
      window.addEventListener('mousemove', this.onDragging);
      window.addEventListener('mouseup', this.onDragEnd);
    },
    onDragging: function onDragging(e) {
      if (!this.dragging) {
        this.startValue = this.value;
      }
      this.dragging = true;
      this.$emit('dragging', e, this.type);
    },
    onDragEnd: function onDragEnd(e) {
      this.dragging = false;
      this.$emit('drag-end', e, this.type);
      if (this.startValue !== this.value) {
        this.$emit('change');
      }
      window.removeEventListener('mousemove', this.onDragging);
      window.removeEventListener('mouseup', this.onDragEnd);
    }
  }
};