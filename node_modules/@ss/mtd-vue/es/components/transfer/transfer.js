import _toConsumableArray from 'babel-runtime/helpers/toConsumableArray';
import MtdButton from '@ss/mtd-vue/es/components/button';
import TransferPanel from '@ss/mtd-vue/es/components/transfer-panel';
import Icon from '@ss/mtd-vue/es/components/icon';
import { CONFIG_PROVIDER, getPrefixCls } from '@ss/mtd-vue/es/utils/config';

var __vue_render__ = function __vue_render__() {
  var _vm = this;var _h = _vm.$createElement;var _c = _vm._self._c || _h;return _c('div', { class: _vm.prefix }, [_c('transfer-panel', _vm._b({ ref: "leftPanel", attrs: { "data": _vm.sourceData, "title": _vm.titles[0], "default-checked": _vm.sourceDefaultChecked, "placeholder": _vm.filterPlaceholder }, on: { "checked-change": _vm.onSourceCheckedChange }, scopedSlots: _vm._u([{ key: "default", fn: function fn(scope) {
        return [_vm._t("default", null, null, scope)];
      } }], null, true) }, 'transfer-panel', _vm.$props, false), [_vm.$slots.leftFooter ? _c('template', { slot: "footer" }, [_vm._t("leftFooter")], 2) : _vm._e()], 2), _c('div', { class: _vm.prefix + "-buttons" }, [_c('mtd-button', { class: [_vm.prefix + "-button", _vm.hasOperations ? _vm.prefix + "-button-with-texts" : ''], attrs: { "type": "primary", "disabled": _vm.rightChecked.length === 0 }, on: { "click": _vm.addToLeft } }, [_c('Icon', { attrs: { "name": "left" } }), _vm.operations[0] !== undefined ? _c('span', [_vm._v(_vm._s(_vm.operations[0]))]) : _vm._e()], 1), _c('mtd-button', { class: [_vm.prefix + "-button", _vm.hasOperations ? _vm.prefix + "-button-with-texts" : ''], attrs: { "type": "primary", "disabled": _vm.leftChecked.length === 0 }, on: { "click": _vm.addToRight } }, [_vm.operations[1] !== undefined ? _c('span', [_vm._v(_vm._s(_vm.operations[1]))]) : _vm._e(), _c('Icon', { attrs: { "name": "right" } })], 1)], 1), _c('transfer-panel', _vm._b({ ref: "rightPanel", attrs: { "data": _vm.targetData, "title": _vm.titles[1], "default-checked": _vm.targetDefaultChecked, "placeholder": _vm.filterPlaceholder }, on: { "checked-change": _vm.onTargetCheckedChange }, scopedSlots: _vm._u([{ key: "default", fn: function fn(scope) {
        return [_vm._t("default", null, null, scope)];
      } }], null, true) }, 'transfer-panel', _vm.$props, false), [_vm.$slots.rightFooter ? _c('template', { slot: "footer" }, [_vm._t("rightFooter")], 2) : _vm._e()], 2)], 1);
};
var __vue_staticRenderFns__ = [];

export default {
  render: __vue_render__,

  staticRenderFns: __vue_staticRenderFns__,

  name: 'MtdTransfer',
  components: {
    TransferPanel: TransferPanel,
    MtdButton: MtdButton,
    Icon: Icon
  },
  props: {
    data: {
      type: Array,
      default: function _default() {
        return [];
      }
    },
    titles: {
      type: Array,
      default: function _default() {
        return ['未选', '已选'];
      }
    },
    operations: {
      type: Array,
      default: function _default() {
        return [];
      }
    },
    filterPlaceholder: {
      type: String,
      default: '请输入字段名称'
    },
    filterMethod: Function,
    sourceDefaultChecked: {
      type: Array,
      default: function _default() {
        return [];
      }
    },
    targetDefaultChecked: {
      type: Array,
      default: function _default() {
        return [];
      }
    },
    value: {
      type: Array,
      default: function _default() {
        return [];
      }
    },
    format: {
      type: Object,
      default: function _default() {
        return {};
      }
    },
    filterable: Boolean,
    props: {
      type: Object,
      default: function _default() {
        return {
          label: 'label',
          key: 'key',
          disabled: 'disabled'
        };
      }
    },
    targetOrder: {
      type: String,
      default: 'original'
    },
    noMatchText: String,
    noDataText: String
  },
  inject: {
    config: {
      from: CONFIG_PROVIDER,
      default: {
        getPrefixCls: getPrefixCls
      }
    }
  },
  data: function data() {
    return {
      leftChecked: [],
      rightChecked: []
    };
  },

  computed: {
    prefix: function prefix() {
      return this.config.getPrefixCls('transfer');
    },
    dataObj: function dataObj() {
      var key = this.props.key;
      return this.data.reduce(function (o, cur) {
        return (o[cur[key]] = cur) && o;
      }, {});
    },
    sourceData: function sourceData() {
      var _this = this;

      return this.data.filter(function (item) {
        return _this.value.indexOf(item[_this.props.key]) === -1;
      });
    },
    targetData: function targetData() {
      var _this2 = this;

      if (this.targetOrder === 'original') {
        return this.data.filter(function (item) {
          return _this2.value.indexOf(item[_this2.props.key]) > -1;
        });
      } else {
        return this.value.reduce(function (arr, cur) {
          var val = _this2.dataObj[cur];
          if (val) {
            arr.push(val);
          }
          return arr;
        }, []);
      }
    },
    hasOperations: function hasOperations() {
      return this.operations.length === 2;
    }
  },
  methods: {
    onSourceCheckedChange: function onSourceCheckedChange(val, movedKeys) {
      this.leftChecked = val;
      if (movedKeys === undefined) return;
      this.$emit('select-change', val, 'source');
    },
    onTargetCheckedChange: function onTargetCheckedChange(val, movedKeys) {
      this.rightChecked = val;
      if (movedKeys === undefined) return;
      this.$emit('select-change', val, 'target');
    },
    addToLeft: function addToLeft() {
      var currentValue = [].concat(_toConsumableArray(this.value));

      this.rightChecked.forEach(function (item) {
        var index = currentValue.indexOf(item);
        if (index > -1) {
          currentValue.splice(index, 1);
        }
      });
      this.$emit('input', currentValue);
      this.$emit('change', currentValue, 'source', this.rightChecked);
    },
    addToRight: function addToRight() {
      var _this3 = this;

      var currentValue = this.value.slice();
      var itemsToBeMoved = [];
      var key = this.props.key;
      this.data.forEach(function (item) {
        var itemKey = item[key];
        if (_this3.leftChecked.indexOf(itemKey) > -1 && !(_this3.value.indexOf(itemKey) > -1)) {
          itemsToBeMoved.push(itemKey);
        }
      });
      currentValue = this.targetOrder === 'unshift' ? itemsToBeMoved.concat(currentValue) : currentValue.concat(itemsToBeMoved);
      this.$emit('input', currentValue);
      this.$emit('change', currentValue, 'target', this.leftChecked);
    }
  }
};