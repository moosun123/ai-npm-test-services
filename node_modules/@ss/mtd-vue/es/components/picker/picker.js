import _toConsumableArray from 'babel-runtime/helpers/toConsumableArray';
import Dropdown from '@ss/mtd-vue/es/components/dropdown';
import Option from '@ss/mtd-vue/es/components/option';
import Input from '@ss/mtd-vue/es/components/input';
import Icon from '@ss/mtd-vue/es/components/icon';
import NavigationMixin from '@ss/mtd-vue/es/components/select/navigation-mixin';
import scrollIntoView from '@ss/mtd-vue/es/utils/scroll-into-view';
import { isArray, isObject, isExist } from '@ss/mtd-vue/es/utils/type';
import { getValueByPath } from '@ss/mtd-vue/es/utils/util';
import debounce from 'throttle-debounce/debounce';
import { CONFIG_PROVIDER, getPrefixCls, getIconCls } from '@ss/mtd-vue/es/utils/config';
import { hasProps } from '@ss/mtd-vue/es/utils/vnode';

function getRealValue(value, valueKey) {
  return isObject(value) && valueKey ? getValueByPath(value, valueKey) : value;
}

var SELECT_ALL_VALUE = '__SELECT_ALL__';

var __vue_render__ = function __vue_render__() {
  var _obj;
  var _vm = this;var _h = _vm.$createElement;var _c = _vm._self._c || _h;return _c('Dropdown', { ref: "dropdown", class: (_obj = {}, _obj[_vm.prefix] = true, _obj[_vm.prefix + "-disabled"] = _vm.disabled, _obj[_vm.prefix + "-selected"] = _vm.hasSelected, _obj), attrs: { "disabled": _vm.disabled, "append-to-container": _vm.appendToContainer, "get-popup-container": _vm.getPopupContainer, "visible": _vm.visible, "popper-class": _vm.prefix + "-popper " + (_vm.popperClass || ''), "should-computed-width": false, "popper-options": _vm.popperOptions, "use-show": "" }, on: { "input": _vm.handleVisibleChange } }, [_c('div', { class: _vm.prefix + "-selection", on: { "mouseenter": function mouseenter($event) {
        _vm.hovering = true;
      }, "mouseleave": function mouseleave($event) {
        _vm.hovering = false;
      } } }, [_c('div', { class: _vm.prefix + "-rendered" }, [_c('span', { directives: [{ name: "show", rawName: "v-show", value: !_vm.hasSelected, expression: "!hasSelected" }], class: _vm.prefix + "-placeholder" }, [_vm._t("placeholder", [_vm._v(" " + _vm._s(_vm.placeholder) + " ")])], 2), _c('span', { directives: [{ name: "show", rawName: "v-show", value: _vm.hasSelected, expression: "hasSelected" }], class: _vm.prefix + "-values" }, [_vm._t("selected", [_vm._v(" " + _vm._s(_vm.valueText)), _vm.omittedValues.length ? _vm._t("maxPlaceholder", [_vm._v("，共" + _vm._s(_vm.filteredSelected.length) + "项")], { "omittedValues": _vm.omittedValues, "selected": _vm.filteredSelected }) : _vm._e()], { "selected": _vm.filteredSelected })], 2)]), _c('span', { class: _vm.prefix + "-icon" }, [_vm.showClear ? _c('Icon', { class: _vm.prefix + "-clear", attrs: { "name": "error-circle" }, on: { "click": function click($event) {
        $event.stopPropagation();return _vm.handleClearClick($event);
      } } }) : _vm._t("icon", [_c('i', { class: _vm._icon })])], 2)]), _c('div', { class: _vm.prefix + "-panel", attrs: { "slot": "dropdown" }, slot: "dropdown" }, [_vm._t("prefix-input"), _vm.filterable ? _c('div', { class: _vm.prefix + "-filter" }, [_c('mtd-input', _vm._b({ ref: "filter", attrs: { "clearable": true, "autocomplete": "off", "prefix-icon": _vm.iconPrefix('search') }, on: { "compositionstart": _vm.handleComposition, "compositionupdate": _vm.handleComposition, "compositionend": _vm.handleComposition, "clear": _vm.resetQuery, "keyup": _vm.handleInputChange, "keydown": [function ($event) {
        if (!$event.type.indexOf('key') && _vm._k($event.keyCode, "down", 40, $event.key, ["Down", "ArrowDown"])) {
          return null;
        }$event.preventDefault();return _vm.navigateOptions('next');
      }, function ($event) {
        if (!$event.type.indexOf('key') && _vm._k($event.keyCode, "up", 38, $event.key, ["Up", "ArrowUp"])) {
          return null;
        }$event.preventDefault();return _vm.navigateOptions('prev');
      }, function ($event) {
        if (!$event.type.indexOf('key') && _vm._k($event.keyCode, "enter", 13, $event.key, "Enter")) {
          return null;
        }$event.preventDefault();return _vm.selectOption($event);
      }] }, model: { value: _vm.query, callback: function callback($v) {
        _vm.query = $v;
      }, expression: "query" } }, 'mtd-input', _vm.filterInputProps, false))], 1) : _vm._e(), _c('ul', { ref: "menus", class: _vm.dropdownPrefix + "-menu " + _vm.prefix + "-menus" }, [_vm.canSelectAll ? _c('mtd-option', { directives: [{ name: "show", rawName: "v-show", value: !_vm.empty && !_vm.query && !_vm.loading, expression: "!empty && !query && !loading" }], attrs: { "value": _vm.SELECT_ALL_VALUE, "created": "", "is-select-all": "", "indeterminate": !_vm.isSelectAll && _vm.value && !!_vm.value.length } }, [_vm._v("全选")]) : _vm._e(), _c('div', { directives: [{ name: "show", rawName: "v-show", value: !_vm.loading, expression: "!loading" }] }, [_vm._t("default")], 2), _vm.loading ? _c('li', { class: _vm.dropdownPrefix + "-menu-item " + _vm.prefix + "-loading" }, [_vm._t("loading", [_vm._v(_vm._s(_vm.loadingText))])], 2) : !_vm.hasMatched ? _c('li', { class: _vm.dropdownPrefix + "-menu-item " + _vm.prefix + "-no-matched" }, [_vm._t("noMatched", [_vm._v(_vm._s(_vm.noMatchText))])], 2) : _vm.empty ? _c('li', { class: _vm.dropdownPrefix + "-menu-item " + _vm.prefix + "-empty" }, [_vm._t("empty", [_vm._v(_vm._s(_vm.noDataText))])], 2) : _vm._e()], 1)], 2)]);
};
var __vue_staticRenderFns__ = [];

export default {
  render: __vue_render__,

  staticRenderFns: __vue_staticRenderFns__,

  name: 'Picker',
  components: {
    Dropdown: Dropdown,
    MtdInput: Input,
    MtdOption: Option,
    Icon: Icon
  },
  mixins: [NavigationMixin],
  inheritAttrs: false,
  props: {
    value: [Number, String, Boolean, Object, Array],
    valueKey: String,
    disabled: Boolean,
    size: String,
    icon: String,
    placeholder: String,
    clearable: Boolean,
    debounce: {
      type: Number,
      default: 0
    },
    filterable: Boolean,
    filterMethod: {
      type: Function,
      default: function _default(query, value) {
        var parsedQuery = String(query).replace(/(\^|\(|\)|\[|\]|\$|\*|\+|\.|\?|\\|\{|\}|\|)/g, '\\$1');
        return new RegExp(parsedQuery, 'i').test(value);
      }
    },
    filterInputProps: {
      type: Object,
      default: function _default() {
        return {};
      }
    },
    remote: Boolean,
    remoteMethod: Function,
    multiple: Boolean,
    multipleLimit: {
      type: Number,
      default: 0
    },
    appendToContainer: {
      type: Boolean,
      default: true
    },
    getPopupContainer: Function,
    visible: Boolean,
    placement: String,
    popperOption: Object,
    showSelectAll: Boolean,
    popperClass: String,
    formatter: Function,
    separator: {
      type: String,
      default: '、'
    },
    noMatchText: {
      type: String,
      default: function _default() {
        return '暂无搜索结果';
      }
    },
    noDataText: {
      type: String,
      default: function _default() {
        return '暂无数据';
      }
    },
    maxCount: {
      type: Number,
      default: 0
    },
    reserveKeyword: Boolean,
    loading: Boolean,
    loadingText: {
      type: String,
      default: function _default() {
        return '搜索中';
      }
    },
    popperOptions: Object,
    filterAutofocus: {
      type: Boolean,
      default: true
    }
  },
  provide: function provide() {
    return {
      select: this
    };
  },

  inject: {
    config: {
      from: CONFIG_PROVIDER,
      default: {
        getPrefixCls: getPrefixCls,
        getIconCls: getIconCls
      }
    }
  },

  data: function data() {
    return {
      options: [],
      cachedOptions: [],
      query: '',
      showCheckbox: true,
      SELECT_ALL_VALUE: SELECT_ALL_VALUE,
      isOnComposition: false,
      isMounted: false,
      hovering: false,
      previousQuery: null,
      filteredOptionsCount: 1,
      selected: this.multiple ? [] : undefined,
      isSelectAll: false
    };
  },

  computed: {
    prefix: function prefix() {
      return this.config.getPrefixCls('picker');
    },
    iconPrefix: function iconPrefix() {
      return this.config.getIconCls;
    },
    _icon: function _icon() {
      return hasProps(this, 'icon') ? this.icon : this.config.getIconCls('down-thick');
    },
    dropdownPrefix: function dropdownPrefix() {
      return this.config.getPrefixCls('dropdown');
    },
    canSelectAll: function canSelectAll() {
      return this.showSelectAll && this.multiple;
    },
    filteredOptions: function filteredOptions() {
      if (this.canSelectAll) {
        return this.options.filter(function (option) {
          return !option.isSelectAll;
        });
      }
      return this.options;
    },
    filteredSelected: function filteredSelected() {
      if (!this.canSelectAll) {
        return this.selected;
      }
      return this.selected.filter(function (item) {
        return item.value !== SELECT_ALL_VALUE;
      });
    },
    hasValue: function hasValue() {
      return isExist(this.value) && this.value !== '';
    },
    showClear: function showClear() {
      return !this.disabled && this.clearable && this.hasValue && (this.visible || this.hovering);
    },
    empty: function empty() {
      if (!this.isMounted) {
        return false;
      }
      return !this.filteredOptions.length;
    },
    hasMatched: function hasMatched() {
      if (this.filterable && this.query) {
        if (this.remote) {
          return !!this.filteredOptions.length;
        }
        return !!this.filteredOptionsCount;
      }
      return true;
    },
    hasSelected: function hasSelected() {
      return this.multiple ? this.selected && this.selected.length : isExist(this.value) && this.value !== '';
    },
    valueText: function valueText() {
      var _this = this;

      if (this.multiple) {
        if (isArray(this.selected)) {
          var selected = this.maxCount ? this.filteredSelected.slice(0, this.maxCount) : this.filteredSelected;
          return selected.map(function (item) {
            if (_this.formatter) {
              return _this.formatterOption(item);
            }
            return item.currentLabel;
          }).join(this.separator);
        }
      } else if (isExist(this.selected)) {
        return this.formatter ? this.formatterOption(this.selected) : this.selected.currentLabel;
      }
      return '';
    },
    omittedValues: function omittedValues() {
      if (!this.hasValue || !this.multiple || !this.maxCount) {
        return [];
      }
      var omittedLength = this.value.length - this.maxCount;
      if (omittedLength > 0) {
        return this.value.slice(-omittedLength);
      }
      return [];
    }
  },
  watch: {
    value: function value() {
      if (this.isMounted) {
        this.setSelected();
        this.updatePopper();
      }
    },
    options: function options() {
      if (this.isMounted) {
        this.setSelected();
      }
      if (this.visible) {
        this.updatePopper();
      }
    },
    visible: function visible(_visible) {
      var _this2 = this;

      if (!_visible) {
        this.resetHover();
      } else {
        if (this.filterable) {
          if (this.filterAutofocus) {
            this.$nextTick(function () {
              // wait apply visible
              _this2.$nextTick(_this2.$refs.filter.focus); // wait apply position to dom
            });
          }
          this.resetQuery();
        }
      }
    }
  },
  created: function created() {
    this.$on('addOption', this.addOption);
    this.$on('removeOption', this.onOptionDestroy);
    this.$on('optionClick', this.handleOptionClick);
    this.debouncedQueryChange = this.debounce ? debounce(this.debounce, this.handleQueryChange) : this.handleQueryChange;
  },
  mounted: function mounted() {
    this.isMounted = true;
    this.setSelected();
  },
  destroyed: function destroyed() {
    this.isMounted = false;
  },

  methods: {
    addOption: function addOption(option) {
      this.options.push(option);
    },
    formatterOption: function formatterOption(option) {
      return this.formatter({
        value: option.value,
        label: option.currentLabel,
        currentLabel: option.currentLabel
      });
    },
    setSelectedAll: function setSelectedAll() {
      var _this3 = this;

      var options = this.filteredOptions.filter(function (o) {
        return !o._disabled;
      });
      if (this.canSelectAll && this.value && this.value.length && this.value.length >= options.length) {
        var realValues = this.value.map(function (val) {
          return getRealValue(val, _this3.realValue);
        });
        this.isSelectAll = options.every(function (option) {
          return realValues.indexOf(option.realValue) > -1;
        });
        return;
      }
      this.isSelectAll = false;
    },
    setSelected: function setSelected() {
      this.setSelectedAll();
      var value = this.isSelectAll ? [SELECT_ALL_VALUE].concat(_toConsumableArray(this.value)) : this.value;
      this.selected = this.multiple ? (value || []).map(this.getOption) : this.getOption(value);
    },
    getOption: function getOption(value) {
      var realValue = getRealValue(value, this.valueKey);
      var equal = function equal(option) {
        return realValue === option.realValue;
      };

      var opt = this.options.find(equal);
      if (!opt) {
        var cached = Array.isArray(this.selected) ? this.selected : isExist(this.selected) ? [this.selected] : [];

        opt = cached.find(equal);
      } else {
        opt = {
          value: opt.value,
          realValue: opt.realValue,
          currentLabel: opt.currentLabel
        };
      }
      return opt || {
        value: value,
        realValue: realValue,
        currentLabel: !isExist(value) ? '' : value.toString(),
        __DEFAULT_OPTION__: true
      };
    },
    selectOption: function selectOption() {
      if (!this.isOnComposition && this.hoverOption && this.hoverOption.visible) {
        this.handleOptionClick(this.hoverOption);
      }
    },
    handleOptionClick: function handleOptionClick(option) {
      var _this4 = this;

      if (this.disabled) {
        return;
      }
      var optionValue = option.value,
          optionRealValue = option.realValue;


      if (option.isSelectAll) {
        // 取反
        var nextValues = this.isSelectAll ? [] : this.options.filter(function (option) {
          return !option.isSelectAll && !option._disabled;
        }).map(function (option) {
          return option.value;
        });

        this.$emit('input', nextValues);
        this.$emit('change', nextValues);
      } else if (this.multiple) {
        var copyiedValue = [].concat(_toConsumableArray(this.value || []));
        var realValues = copyiedValue.map(function (val) {
          return getRealValue(val, _this4.valueKey);
        });

        var index = -1;
        realValues.some(function (v, i) {
          var r = v === optionRealValue;
          if (r) {
            index = i;
          }
          return r;
        });
        if (index > -1) {
          copyiedValue.splice(index, 1);
        } else if (!this.multipleLimit || copyiedValue.length < this.multipleLimit) {
          copyiedValue.push(optionValue);
        }
        if (!this.reserveKeyword) {
          this.query = '';
          // this.handleQueryInput();
        }
        this.$emit('input', copyiedValue);
        this.$emit('change', copyiedValue);
      } else {
        var realValue = getRealValue(this.value, this.valueKey);
        if (realValue !== optionRealValue) {
          this.$emit('input', option.value);
          this.$emit('change', option.value);
        }
        this.$emit('update:visible', false);
      }
    },
    scrollToOption: function scrollToOption(option) {
      var target = Array.isArray(option) && option[0] ? option[0].$el : option.$el;
      if (this.visible && target) {
        var menus = this.$refs.menus;
        scrollIntoView(menus, target);
      }
    },
    onOptionDestroy: function onOptionDestroy(option) {
      if (this.hoverOption === option) {
        this.resetHover();
      }
      var index = this.options.indexOf(option);
      if (index > -1) {
        this.options.splice(index, 1);
      }
    },
    handleComposition: function handleComposition(e) {
      var type = e.type;

      if (type === 'compositionend') {
        this.isOnComposition = false;
        // 当混合输入前后值不变时，不会触发后续的 input 事件，所以需要再次触发 query
        this.debouncedQueryChange(e.target.value);
      } else {
        this.isOnComposition = true;
      }
    },
    handleInputChange: function handleInputChange() {
      if (this.visible && this.filterable) {
        this.debouncedQueryChange(this.query);
      }
    },
    handleQueryChange: function handleQueryChange(val) {
      var _this5 = this;

      if (this.previousQuery === val || this.isOnComposition) {
        return;
      }
      this.previousQuery = val;
      if (this.remote && typeof this.remoteMethod === 'function') {
        this.remoteMethod(val);
      } else if (typeof this.filterMethod === 'function') {
        var filteredOptions = this.options.filter(function (item) {
          if (item.isSelectAll) {
            item.visible = !val;return false;
          }
          if (item.created) {
            return false;
          }
          item.visible = val !== '' ? _this5.filterMethod(val, item.currentLabel) : true;
          return item.visible;
        });
        this.filteredOptionsCount = filteredOptions.length;
      }
      this.updatePopper();
      this.$emit('filter', val);
    },
    updatePopper: function updatePopper() {
      var _this6 = this;

      this.$nextTick(function () {
        if (_this6.visible) {
          _this6.$refs.dropdown && _this6.$refs.dropdown.updatePopper();
        }
      });
    },
    handleClearClick: function handleClearClick() {
      if (this.disabled) {
        return;
      }
      this.$emit('clear');
      var nextValue = this.multiple ? [] : '';
      this.$emit('input', nextValue);
      this.$emit('change', nextValue);
    },
    handleVisibleChange: function handleVisibleChange(v) {
      this.$emit('update:visible', v);
      v ? this.$emit('focus') : this.$emit('blur');
    },
    resetQuery: function resetQuery() {
      this.query = '';
      this.handleQueryChange('');
    },
    focus: function focus() {
      this.handleVisibleChange(true);
    },
    blur: function blur() {
      this.handleVisibleChange(false);
    }
  }
};