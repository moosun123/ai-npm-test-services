import _regeneratorRuntime from 'babel-runtime/regenerator';
import _asyncToGenerator from 'babel-runtime/helpers/asyncToGenerator';
import MtdPicker from '@ss/mtd-vue/es/components/picker';
import MtdOption from '@ss/mtd-vue/es/components/option';
import { waitImmediate } from '@test/util';

var __vue_render__ = function __vue_render__() {
  var _vm = this;var _h = _vm.$createElement;var _c = _vm._self._c || _h;return _c('mtd-picker', { ref: "picker", attrs: { "formatter": _vm.formatter, "filterable": "", "value-key": "id", "multiple": _vm.multiple }, model: { value: _vm.value, callback: function callback($v) {
        _vm.value = $v;
      }, expression: "value" } }, _vm._l(_vm.options, function (item) {
    return _c('mtd-option', { key: item.id, attrs: { "value": item, "label": item.name } });
  }), 1);
};
var __vue_staticRenderFns__ = [];

export default {
  render: __vue_render__,

  staticRenderFns: __vue_staticRenderFns__,

  components: {
    MtdPicker: MtdPicker,
    MtdOption: MtdOption
  },
  data: function data() {
    return {
      multiple: false,
      value: {
        id: '1',
        name: '李白'
      },
      options: [{
        id: '1',
        name: '李白'
      }, {
        id: '2',
        name: '李贺'
      }, {
        id: '3',
        name: '杜甫'
      }, {
        id: '4',
        name: '白居易'
      }, {
        id: '5',
        name: '屈原'
      }]
    };
  },

  methods: {
    formatter: function formatter(option) {
      return 'name: ' + option.value.name;
    },
    doTest: function doTest(done) {
      var _this = this;

      return _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {
        var opt, textEl, selected, opt2, selected2;
        return _regeneratorRuntime.wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                opt = _this.options[0];


                _this.value = {
                  id: opt.id,
                  name: 'xxx'
                };
                _context.next = 4;
                return waitImmediate();

              case 4:
                textEl = _this.$el.querySelector('.mtd-picker-values');
                selected = {
                  value: opt,
                  label: opt.name
                };

                expect(textEl.innerText).to.be.eql(_this.formatter(selected));

                opt2 = _this.options[1];

                _this.value = [{
                  id: opt.id
                }, {
                  id: opt2.id
                }];
                _this.multiple = true;
                _context.next = 12;
                return waitImmediate();

              case 12:
                selected2 = [{
                  value: opt,
                  label: opt.name
                }, {
                  value: opt2,
                  label: opt2.name
                }];

                expect(textEl.innerText).to.be.eql(selected2.map(_this.formatter).join('、'));

                done();

              case 15:
              case 'end':
                return _context.stop();
            }
          }
        }, _callee, _this);
      }))();
    }
  }
};