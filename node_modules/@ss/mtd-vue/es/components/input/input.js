import _Object$assign from 'babel-runtime/core-js/object/assign';
import { isKey } from '@ss/mtd-vue/es/utils/key-codes';
import { CONFIG_PROVIDER, getPrefixCls, getSize } from '@ss/mtd-vue/es/utils/config';
import Icon from '@ss/mtd-vue/es/components/icon';

var __vue_render__ = function __vue_render__() {
  var _obj;
  var _vm = this;var _h = _vm.$createElement;var _c = _vm._self._c || _h;return _c('div', { class: (_obj = {}, _obj[_vm.prefix + "-wrapper"] = true, _obj[_vm.prefix + "-group"] = _vm.$slots.prepend || _vm.$slots.append || _vm.$scopedSlots.prepend || _vm.$scopedSlots.append, _obj[_vm.prefix + "-prefix"] = _vm.hasPrefix, _obj[_vm.prefix + "-suffix"] = _vm.hasSuffix, _obj[_vm.prefix + "-disabled"] = _vm.disabled, _obj[_vm.prefix + "-readonly"] = _vm.readonly, _obj[_vm.prefix + "-invalid"] = _vm.invalid, _obj[_vm.prefix + "-" + _vm._size] = !!_vm._size, _obj[_vm.prefix + "-" + _vm.genre] = !!_vm.genre, _obj), on: { "mouseenter": function mouseenter($event) {
        _vm.hovering = true;
      }, "mouseleave": function mouseleave($event) {
        _vm.hovering = false;
      } } }, [_vm.$slots.prepend || _vm.$scopedSlots.prepend ? _c('div', { class: _vm.prefix + "-group-prepend" }, [_vm._t("prepend")], 2) : _vm._e(), _vm.hasPrefix ? _c('span', { class: _vm.prefix + "-prefix-inner" }, [_vm._t("prefix", [_c('i', { class: _vm.prefixIcon, on: { "click": _vm.handlePrefixClick } })])], 2) : _vm._e(), _c('input', _vm._g(_vm._b({ ref: "input", class: _vm.prefix, attrs: { "type": _vm.type, "readonly": _vm.readonly, "disabled": _vm.disabled }, domProps: { "value": _vm.inputValue } }, 'input', _vm.$attrs, false), _vm.inputLisenters)), _vm.hasSuffix ? _c('span', { class: _vm.prefix + "-suffix-inner" }, [_vm.loading ? _c('Icon', { attrs: { "name": "loading" } }) : _vm.showClear ? _c('Icon', { class: _vm.prefix + "-clear", attrs: { "name": "error-circle" }, on: { "click": function click($event) {
        $event.stopPropagation();return _vm.handleClearClick($event);
      } } }) : _vm._t("suffix", [_c('i', { class: _vm.suffixIcon, on: { "click": _vm.handleSuffixClick } })])], 2) : _vm._e(), _vm.$slots.append || _vm.$scopedSlots.append ? _c('div', { class: _vm.prefix + "-group-append" }, [_vm._t("append")], 2) : _vm._e()]);
};
var __vue_staticRenderFns__ = [];

export default {
  render: __vue_render__,

  staticRenderFns: __vue_staticRenderFns__,

  name: 'Input',
  components: {
    Icon: Icon
  },
  inheritAttrs: false,
  props: {
    type: {
      type: String,
      default: 'text'
    },
    genre: String,
    size: String,
    clearable: Boolean,
    disabled: Boolean,
    readonly: Boolean,
    invalid: Boolean,
    value: [String, Number],
    prefixIcon: String,
    suffixIcon: String,
    loading: Boolean,
    clearableOnReadonly: Boolean // 当 readonly 时是否可以清空
  },
  inject: {
    config: {
      from: CONFIG_PROVIDER,
      default: {
        getPrefixCls: getPrefixCls,
        getSize: getSize
      }
    }
  },
  data: function data() {
    return {
      focused: false,
      hovering: false,
      isComposing: false
    };
  },


  computed: {
    prefix: function prefix() {
      return this.config.getPrefixCls('input');
    },
    _size: function _size() {
      return this.config.getSize(this);
    },

    hasPrefix: {
      cache: false,
      get: function get() {
        return !!(this.prefixIcon || this.$slots.prefix || this.$scopedSlots.prefix);
      }
    },
    hasSuffix: {
      cache: false,
      get: function get() {
        return this.loading || this.clearable || !!(this.suffixIcon || this.$slots.suffix || this.$scopedSlots.suffix);
      }
    },
    hasValue: function hasValue() {
      return this.value === 0 || !!this.value;
    },
    inputValue: function inputValue() {
      return this.hasValue ? this.value : '';
    },
    inputLisenters: function inputLisenters() {
      var lisenters = _Object$assign({}, this.$listeners, {
        input: this.handleInput,
        focus: this.handleFocus,
        blur: this.handleBlur,
        keyup: this.handleKeyup,
        compositionstart: this.handleComposition,
        compositionupdate: this.handleComposition,
        compositionend: this.handleComposition
      });
      if (lisenters.change) {
        // it will trigger change event twice if not remove
        delete lisenters.change;
      }
      return lisenters;
    },
    canClear: function canClear() {
      return this.clearable && !this.disabled && (this.clearableOnReadonly || !this.readonly);
    },
    showClear: function showClear() {
      return this.canClear && this.hasValue && (this.focused || this.hovering);
    }
  },
  methods: {
    handleInput: function handleInput(event, options) {
      var value = event.target.value;

      if (value !== this.value) {
        this.$emit('input', value);
        if (!this.isComposing) {
          setTimeout(this.setNativeInput, 0);
        }
      }
      if (!this.isComposing || options && options.change) {
        this.$emit('change', value);
      }
    },
    handleClearClick: function handleClearClick(event) {
      this.$emit('clear');
      this.handleInput({ target: { value: '' } });
    },
    handlePrefixClick: function handlePrefixClick(e) {
      this.focus();
      this.$emit('click-prefix', e);
    },
    handleSuffixClick: function handleSuffixClick(e) {
      this.focus();
      this.$emit('click-suffix', e);
    },
    handleFocus: function handleFocus(e) {
      this.focused = true;
      this.$emit('focus', e);
    },
    handleBlur: function handleBlur(e) {
      this.focused = false;
      this.$emit('blur', e);
    },
    focus: function focus() {
      this.$refs.input.focus();
    },
    blur: function blur() {
      this.$refs.input.blur();
    },
    select: function select() {
      this.$refs.input.select();
    },
    setNativeInput: function setNativeInput() {
      var input = this.$refs.input;

      if (input && input.value !== this.value) {
        input.value = this.inputValue;
      }
    },
    handleComposition: function handleComposition(e) {
      var type = e.type;

      if (this.$listeners[type]) {
        this.$emit(type, e);
      }
      if (type === 'compositionend') {
        this.isComposing = false;
        this.handleInput(e, { change: true });
      } else {
        this.isComposing = true;
      }
    },
    handleKeyup: function handleKeyup(e) {
      if (this.$listeners.keyup) {
        this.$emit('keyup', e);
      }
      if (isKey(e, 'enter') && !this.isComposing) {
        this.$emit('enter', e);
      }
    }
  }
};