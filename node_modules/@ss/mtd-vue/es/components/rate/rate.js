import _Object$keys from 'babel-runtime/core-js/object/keys';
import _defineProperty from 'babel-runtime/helpers/defineProperty';
import { isString } from '@ss/mtd-vue/es/utils/type';
import MtdTooltip from '@ss/mtd-vue/es/components/tooltip';
import { CONFIG_PROVIDER, getPrefixCls, getIconCls } from '@ss/mtd-vue/es/utils/config';

function parseToKV(v, count) {
  var map = v;
  if (isString(v)) {
    map = _defineProperty({}, count, v);
  }
  var keys = _Object$keys(map);
  return keys.sort(function (a, b) {
    return a - b;
  }).reduce(function (s, k) {
    s[k] = map[k];
    return s;
  }, {});
}

function getValueFromMap(v, map) {
  var keys = _Object$keys(map);
  var current = keys.find(function (key, index) {
    var next = keys[index + 1];
    return index === 0 && v < key || v >= key && (v < next || !next);
  });
  return map[current];
}

var __vue_render__ = function __vue_render__() {
  var _obj;
  var _vm = this;var _h = _vm.$createElement;var _c = _vm._self._c || _h;return _c('div', { class: [_vm.prefix, (_obj = {}, _obj[_vm.prefix + "-disabled"] = _vm.disabled, _obj), _vm.rateClass], attrs: { "aria-valuenow": _vm.currentValue, "aria-valuetext": _vm.text, "aria-valuemin": "0", "aria-valuemax": _vm.count, "tabindex": "0" }, on: { "mouseleave": _vm.resetCurrentValue } }, [_vm._l(_vm.count, function (item) {
    return _c('mtd-tooltip', _vm._b({ key: item, class: _vm.prefix + "-item-wrapper", attrs: { "placement": "top", "disabled": _vm.disabled || !_vm.$scopedSlots.tooltip && !_vm.texts, "close-delay": 0, "open-delay": 0 } }, 'mtd-tooltip', _vm.tooltipProps, false), [_c('div', { attrs: { "slot": "content" }, slot: "content" }, [_vm._t("tooltip", [_vm._v(" " + _vm._s(_vm.texts ? _vm.texts[item - 1] : '') + " ")], { "value": item })], 2), _c('span', { class: [_vm.prefix + "-item", _vm.getItemClass(item)], on: { "mousemove": function mousemove($event) {
          return _vm.setCurrentValue(item, $event);
        }, "click": function click($event) {
          return _vm.selectValue(item);
        } } }, [_c('i', { class: [_vm.prefix + "-icon", _vm.iconClasses[item - 1], { 'hover': _vm.hoverIndex === item }], style: _vm.getIconStyle(item) }), _vm.showDecimalIcon(item) ? _c('i', { class: [_vm.prefix + "-decimal", _vm.activeIconClass], style: _vm.decimalStyle }) : _vm._e()])]);
  }), _vm.text || _vm.$scopedSlots.default ? _c('span', { class: _vm.prefix + "-text" }, [_vm._t("default", [_vm._v(_vm._s(_vm.text))], { "value": _vm.value })], 2) : _vm._e()], 2);
};
var __vue_staticRenderFns__ = [];

export default {
  render: __vue_render__,

  staticRenderFns: __vue_staticRenderFns__,

  name: 'Rate',

  components: {
    MtdTooltip: MtdTooltip
  },

  props: {
    value: {
      type: Number,
      default: 0
    },
    count: {
      type: Number,
      default: 5
    },
    classes: {
      type: Object
    },
    icon: {
      type: [String, Object]
    },
    color: {
      type: [String, Object]
    },
    disabled: Boolean,
    voidColor: {
      type: String
    },
    disabledVoidColor: {
      type: String
    },
    voidIcon: String,
    disabledVoidIcon: String,
    allowHalf: {
      type: Boolean,
      default: false
    },
    allowClear: {
      type: Boolean,
      default: false
    },
    texts: {
      type: Array
    },
    tooltipProps: {
      type: Object,
      default: function _default() {
        return {};
      }
    }
  },
  inject: {
    config: {
      from: CONFIG_PROVIDER,
      default: {
        getPrefixCls: getPrefixCls,
        getIconCls: getIconCls
      }
    }
  },

  data: function data() {
    return {
      currentValue: this.value,
      hoverIndex: -1,
      pointerAtLeftHalf: false
    };
  },


  computed: {
    prefix: function prefix() {
      return this.config.getPrefixCls('rate');
    },
    _icon: function _icon() {
      return this.icon || this.config.getIconCls('star');
    },
    rateClass: function rateClass() {
      if (this.classes) {
        return getValueFromMap(this.value, this.classes);
      }
      return undefined;
    },
    text: function text() {
      if (this.texts) {
        // todo: 需要和设计确认是否是向上取整
        return this.texts[Math.ceil(this.value) - 1];
      }
      return '';
    },
    valueInteger: function valueInteger() {
      return parseInt(this.value);
    },
    valueDecimal: function valueDecimal() {
      return this.value * 100 - this.valueInteger * 100;
    },
    icons: function icons() {
      return parseToKV(this._icon);
    },
    activeIconClass: function activeIconClass() {
      return getValueFromMap(this.value, this.icons);
    },
    voidIconClass: function voidIconClass() {
      var icon = this.disabled ? this.disabledVoidIcon : this.voidIcon;
      return icon || this.activeIconClass;
    },
    iconClasses: function iconClasses() {
      var result = [];
      var i = 0;
      var threshold = this.currentValue;
      if (this.allowHalf && this.currentValue !== Math.floor(this.currentValue)) {
        threshold--;
      }
      for (; i < threshold; i++) {
        result.push(this.activeIconClass);
      }
      for (; i < this.count; i++) {
        result.push(this.voidIconClass);
      }
      return result;
    },
    colors: function colors() {
      return this.color ? parseToKV(this.color) : {};
    },
    activeColor: function activeColor() {
      return getValueFromMap(this.currentValue, this.colors);
    },
    decimalStyle: function decimalStyle() {
      var width = '';
      if (this.disabled) {
        width = this.valueDecimal + '%';
      } else if (this.allowHalf) {
        width = '50%';
      }
      return {
        color: this.activeColor,
        width: width
      };
    }
  },

  watch: {
    value: {
      immediate: true,
      handler: function handler(val) {
        this.currentValue = val;
        this.pointerAtLeftHalf = this.value !== Math.floor(this.value);
      }
    }
  },

  methods: {
    getIconStyle: function getIconStyle(item) {
      var voidColor = this.disabled ? this.disabledVoidColor : this.voidColor;
      var color = item <= this.currentValue ? this.activeColor : voidColor;
      return {
        color: color
      };
    },
    getItemClass: function getItemClass(itemValue) {
      var prefix = this.prefix;

      if (this.currentValue !== parseInt(this.currentValue)) {
        // 包含小数
        if (this.currentValue > itemValue) {
          return prefix + '-item-full';
        } else if (this.currentValue + 1 > itemValue) {
          return prefix + '-item-half';
        }
      } else if (this.currentValue >= itemValue) {
        return prefix + '-item-full';
      }
      return '';
    },
    showDecimalIcon: function showDecimalIcon(item) {
      var showWhenDisabled = this.disabled && this.valueDecimal > 0 && item - 1 < this.value && item > this.value;
      /* istanbul ignore next */
      var showWhenAllowHalf = this.allowHalf && this.pointerAtLeftHalf && item - 0.5 <= this.currentValue && item > this.currentValue;
      return showWhenDisabled || showWhenAllowHalf;
    },
    setCurrentValue: function setCurrentValue(value, event) {
      if (this.disabled) {
        return;
      }
      /* istanbul ignore if */
      if (this.allowHalf) {
        var target = event.currentTarget;
        this.pointerAtLeftHalf = event.offsetX * 2 <= target.clientWidth;
        this.currentValue = this.pointerAtLeftHalf ? value - 0.5 : value;
      } else {
        this.currentValue = value;
      }
      this.hoverIndex = value;
    },
    resetCurrentValue: function resetCurrentValue() {
      if (this.disabled) {
        return;
      }
      if (this.allowHalf) {
        this.pointerAtLeftHalf = this.value !== Math.floor(this.value);
      }
      this.currentValue = this.value;
      this.hoverIndex = -1;
    },
    selectValue: function selectValue(value) {
      if (this.disabled) {
        return;
      }
      var nextValue = value;
      if (this.allowHalf && this.pointerAtLeftHalf) {
        nextValue = this.currentValue;
      }
      if (this.allowClear && nextValue === this.value) {
        nextValue = 0;
      }
      this.resetCurrentValue();
      this.$emit('input', nextValue);
      this.$emit('change', nextValue);
    }
  }
};