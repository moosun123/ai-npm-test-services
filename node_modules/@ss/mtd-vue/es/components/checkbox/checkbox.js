import _defineProperty from 'babel-runtime/helpers/defineProperty';
import { CONFIG_PROVIDER, getPrefixCls, getIconCls, getSize } from '@ss/mtd-vue/es/utils/config';

var __vue_render__ = function __vue_render__() {
  var _vm = this;var _h = _vm.$createElement;var _c = _vm._self._c || _h;return _c('label', { class: _vm.wrapperCls }, [_c('input', { class: _vm.prefix + "-input", staticStyle: { "display": "none" }, attrs: { "type": "checkbox", "name": _vm.name, "disabled": _vm.disabled }, domProps: { "checked": _vm.checked }, on: { "change": _vm.handleChange } }), _c('span', { class: _vm.prefix + "-inner" }, [_vm.indeterminate ? _c('i', { class: _vm.prefix + "-indeterminate-inner" }) : _vm.checked ? _c('i', { class: _vm.iconPrefix('check-thick') }) : _vm._e()]), _vm.$slots.default ? _c('span', { class: _vm.prefix + "-text" }, [_vm._t("default", [_vm._v(_vm._s(_vm.label))])], 2) : _vm._e()]);
};
var __vue_staticRenderFns__ = [];

export default {
  render: __vue_render__,

  staticRenderFns: __vue_staticRenderFns__,

  name: 'Checkbox',
  props: {
    // value: [String, Number, Boolean, Function, Object, Symbol],
    size: String,
    disabled: Boolean,
    name: String,
    checked: Boolean,
    indeterminate: Boolean,
    label: [String, Number]
  },
  inject: {
    config: {
      from: CONFIG_PROVIDER,
      default: {
        getPrefixCls: getPrefixCls,
        getIconCls: getIconCls,
        getSize: getSize
      }
    }
  },
  computed: {
    iconPrefix: function iconPrefix() {
      return this.config.getIconCls;
    },
    prefix: function prefix() {
      return this.config.getPrefixCls('checkbox');
    },
    _size: function _size() {
      return this.config.getSize(this);
    },
    wrapperCls: function wrapperCls() {
      var _ref;

      return [this.prefix, (_ref = {}, _defineProperty(_ref, this.prefix + '-checked', this.checked), _defineProperty(_ref, this.prefix + '-disabled', this.disabled), _defineProperty(_ref, this.prefix + '-indeterminate', this.indeterminate), _defineProperty(_ref, this.prefix + '-' + this._size, this._size), _ref)];
    }
  },
  methods: {
    handleChange: function handleChange(e) {
      if (!this.disabled) {
        this.$emit('input', !this.checked);
      }
    }
  }
};