import Color from './utils/color';
import PickerDropdown from './components/picker-dropdown';
import { Popper, Drop, Reference } from '@ss/mtd-vue/es/components/popper';
import { CONFIG_PROVIDER, getPrefixCls, getIconCls, getSize } from '@ss/mtd-vue/es/utils/config';

var __vue_render__ = function __vue_render__() {
  var _obj;
  var _vm = this;var _h = _vm.$createElement;var _c = _vm._self._c || _h;return _c('Popper', _vm._b({ class: [_vm.prefix, _vm._size ? _vm.prefix + "-" + _vm._size : ''], attrs: { "trigger": "click", "placement": _vm.placement, "visible": _vm.visible, "show-arrow": _vm.showArrow, "append-to-container": _vm.appendToContainer, "get-popup-container": _vm.getPopupContainer }, on: { "clickoutside": _vm.handleClickoutside } }, 'Popper', _vm.$attrs, false), [_c('Reference', [_c('div', { class: _vm.prefix + "-wrapper" }, [_vm.disabled ? _c('div', { class: _vm.prefix + "-mask" }) : _vm._e(), _c('div', { class: [_vm.prefix + "-trigger", _vm.disabled ? _vm.prefix + "-disabled" : ''], on: { "click": _vm.handleTrigger } }, [_c('span', { class: (_obj = {}, _obj[_vm.prefix + "-color"] = true, _obj['is-alpha'] = _vm.showAlpha, _obj) }, [_c('span', { class: _vm.prefix + "-color-inner", style: {
      backgroundColor: _vm.displayedColor
    } }), !_vm.value && !_vm.showPanelColor ? _c('span', { class: _vm.prefix + "-empty " + _vm.iconPrefix('close-thick') }) : _vm._e()]), _c('span', { directives: [{ name: "show", rawName: "v-show", value: _vm.value || _vm.showPanelColor, expression: "value || showPanelColor" }], class: _vm.prefix + "-icon " + _vm.iconPrefix('down') })])])]), _c('Drop', { class: [_vm.prefix + "-panel", _vm.popperClass || ''] }, [_c('picker-dropdown', { ref: "dropdown", attrs: { "color": _vm.color, "show-alpha": _vm.showAlpha, "predefine": _vm.predefine }, on: { "pick": _vm.confirmValue, "clear": _vm.clearValue } })], 1)], 1);
};
var __vue_staticRenderFns__ = [];

export default {
  render: __vue_render__,

  staticRenderFns: __vue_staticRenderFns__,

  name: 'MtdColorPicker',
  components: {
    PickerDropdown: PickerDropdown,
    Popper: Popper,
    Drop: Drop,
    Reference: Reference
  },
  props: {
    value: String,
    showAlpha: Boolean,
    colorFormat: String,
    disabled: Boolean,
    size: String,
    popperClass: String,
    predefine: Array,
    showArrow: {
      type: Boolean,
      default: false
    },
    placement: {
      type: String,
      default: 'bottom-start'
    },
    appendToContainer: {
      type: Boolean,
      default: true
    },
    getPopupContainer: Function
  },
  inject: {
    config: {
      from: CONFIG_PROVIDER,
      default: {
        getPrefixCls: getPrefixCls,
        getIconCls: getIconCls,
        getSize: getSize
      }
    }
  },
  data: function data() {
    var color = new Color({
      enableAlpha: this.showAlpha,
      format: this.colorFormat
    });

    return {
      color: color,
      showPicker: false,
      showPanelColor: false
    };
  },


  computed: {
    prefix: function prefix() {
      return this.config.getPrefixCls('color-picker');
    },
    _size: function _size() {
      return this.config.getSize(this);
    },
    iconPrefix: function iconPrefix() {
      return this.config.getIconCls;
    },
    displayedColor: function displayedColor() {
      if (!this.value && !this.showPanelColor) {
        return 'transparent';
      }

      return this.displayedRgb(this.color, this.showAlpha);
    },
    visible: function visible() {
      return !this.disabled && this.showPicker;
    }
  },

  watch: {
    value: function value(val) {
      if (!val) {
        this.showPanelColor = false;
      } else if (val && val !== this.color.value) {
        this.color.fromString(val);
      }
    },

    color: {
      deep: true,
      handler: function handler() {
        this.showPanelColor = true;
      }
    },
    displayedColor: function displayedColor(val) {
      if (!this.showPicker) return;
      var currentValueColor = new Color({
        enableAlpha: this.showAlpha,
        format: this.colorFormat
      });
      currentValueColor.fromString(this.value);

      var currentValueColorRgb = this.displayedRgb(currentValueColor, this.showAlpha);
      if (val !== currentValueColorRgb) {
        this.$emit('active-change', val);
      }
    },
    visible: function visible(_visible) {
      this.$emit('update:visible', _visible);
    }
  },

  mounted: function mounted() {
    var value = this.value;
    if (value) {
      this.color.fromString(value);
    }
  },


  methods: {
    handleClickoutside: function handleClickoutside() {
      this.showPicker = false;
    },
    handleTrigger: function handleTrigger() {
      if (this.disabled) return;
      this.showPicker = !this.showPicker;
    },
    confirmValue: function confirmValue() {
      var value = this.color.value;
      this.$emit('input', value);
      this.$emit('change', value);
      this.showPicker = false;
    },
    clearValue: function clearValue() {
      this.$emit('input', null);
      this.$emit('change', null);
      this.showPanelColor = false;
      this.showPicker = false;
      this.resetColor();
    },
    hide: function hide() {
      this.showPicker = false;
      this.resetColor();
    },
    resetColor: function resetColor() {
      var _this = this;

      this.$nextTick(function (_) {
        if (_this.value) {
          _this.color.fromString(_this.value);
        } else {
          _this.showPanelColor = false;
        }
      });
    },
    displayedRgb: function displayedRgb(color, showAlpha) {
      if (!(color instanceof Color)) {
        throw Error('color should be instance of Color Class');
      }

      var _color$toRgb = color.toRgb(),
          r = _color$toRgb.r,
          g = _color$toRgb.g,
          b = _color$toRgb.b;

      return showAlpha ? 'rgba(' + r + ', ' + g + ', ' + b + ', ' + color.get('alpha') / 100 + ')' : 'rgb(' + r + ', ' + g + ', ' + b + ')';
    }
  }
};