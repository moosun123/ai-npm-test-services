import Color from '../utils/color';
import { CONFIG_PROVIDER, getPrefixCls } from '@ss/mtd-vue/es/utils/config';

var __vue_render__ = function __vue_render__() {
  var _vm = this;var _h = _vm.$createElement;var _c = _vm._self._c || _h;return _c('div', { class: _vm.prefix + "-predefine" }, [_c('div', { class: _vm.prefix + "-predefine-colors" }, _vm._l(_vm.rgbaColors, function (item, index) {
    return _c('div', { key: _vm.colors[index], class: [_vm.prefix + "-predefine-color-selector", { selected: item.selected, 'is-alpha': item._alpha < 100 }], on: { "click": function click($event) {
          return _vm.handleSelect(index);
        } } }, [_c('div', { style: { 'background-color': item.value } })]);
  }), 0)]);
};
var __vue_staticRenderFns__ = [];

export default {
  render: __vue_render__,

  staticRenderFns: __vue_staticRenderFns__,

  name: 'MtdColorPredefine',
  props: {
    colors: {
      type: Array,
      required: true
    },
    color: {
      required: true,
      type: Object
    }
  },
  inject: {
    config: {
      from: CONFIG_PROVIDER,
      default: {
        getPrefixCls: getPrefixCls
      }
    }
  },
  data: function data() {
    return {
      rgbaColors: this.parseColors(this.colors, this.color)
    };
  },

  computed: {
    prefix: function prefix() {
      return this.config.getPrefixCls('color');
    }
  },
  watch: {
    '$parent.currentColor': function $parentCurrentColor(val) {
      var color = new Color();
      color.fromString(val);

      this.rgbaColors.forEach(function (item) {
        item.selected = color.compare(item);
      });
    },
    colors: function colors(newVal) {
      this.rgbaColors = this.parseColors(newVal, this.color);
    },
    color: function color(newVal) {
      this.rgbaColors = this.parseColors(this.colors, newVal);
    }
  },
  methods: {
    handleSelect: function handleSelect(index) {
      this.color.fromString(this.colors[index]);
    },
    parseColors: function parseColors(colors, color) {
      return colors.map(function (value) {
        var c = new Color();
        c.enableAlpha = true;
        c.format = 'rgba';
        c.fromString(value);
        c.selected = c.value === color.value;
        return c;
      });
    }
  }
};