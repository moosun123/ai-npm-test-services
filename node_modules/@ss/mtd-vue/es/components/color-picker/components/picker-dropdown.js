import SvPanel from './sv-panel';
import HueSlider from './hue-slider';
import AlphaSlider from './alpha-slider';
import Predefine from './predefine';
import Locale from '@ss/mtd-vue/es/mixins/locale';
import MtdInput from '@ss/mtd-vue/es/components/input';
import MtdButton from '@ss/mtd-vue/es/components/button';
import { CONFIG_PROVIDER, getPrefixCls } from '@ss/mtd-vue/es/utils/config';

var __vue_render__ = function __vue_render__() {
  var _vm = this;var _h = _vm.$createElement;var _c = _vm._self._c || _h;return _c('transition', { attrs: { "name": _vm.tn } }, [_c('div', { class: _vm.prefix + "-dropdown" }, [_c('div', { class: _vm.prefix + "-dropdown-main-wrapper" }, [_c('hue-slider', { ref: "hue", staticStyle: { "float": "right" }, attrs: { "color": _vm.color, "vertical": "" } }), _c('sv-panel', { ref: "sl", attrs: { "color": _vm.color } })], 1), _vm.showAlpha ? _c('alpha-slider', { ref: "alpha", attrs: { "color": _vm.color } }) : _vm._e(), _vm.predefine ? _c('predefine', { attrs: { "color": _vm.color, "colors": _vm.predefine } }) : _vm._e(), _c('div', { class: _vm.prefix + "-dropdown-btns" }, [_c('span', { class: _vm.prefix + "-dropdown-value" }, [_c('mtd-input', { attrs: { "validate-event": false, "size": "small" }, on: { "blur": _vm.handleConfirm }, nativeOn: { "keyup": function keyup($event) {
        if (!$event.type.indexOf('key') && _vm._k($event.keyCode, "enter", 13, $event.key, "Enter")) {
          return null;
        }return _vm.handleConfirm($event);
      } }, model: { value: _vm.customInput, callback: function callback($v) {
        _vm.customInput = $v;
      }, expression: "customInput" } })], 1), _c('mtd-button', { attrs: { "size": "small", "type": "text" }, on: { "click": _vm.clearColor } }, [_vm._v(" 清空 ")]), _c('mtd-button', { class: _vm.prefix + "-dropdown-btn", attrs: { "plain": "", "size": "small" }, on: { "click": _vm.confirmValue } }, [_vm._v(" 确定 ")])], 1)], 1)]);
};
var __vue_staticRenderFns__ = [];

export default {
  render: __vue_render__,

  staticRenderFns: __vue_staticRenderFns__,

  name: 'MtdColorPickerDropdown',

  components: {
    SvPanel: SvPanel,
    HueSlider: HueSlider,
    AlphaSlider: AlphaSlider,
    MtdInput: MtdInput,
    MtdButton: MtdButton,
    Predefine: Predefine
  },

  mixins: [Locale],

  props: {
    color: {
      required: true,
      type: Object
    },
    showAlpha: Boolean,
    predefine: Array
  },

  inject: {
    config: {
      from: CONFIG_PROVIDER,
      default: {
        getPrefixCls: getPrefixCls
      }
    }
  },

  data: function data() {
    return {
      customInput: ''
    };
  },


  computed: {
    tn: function tn() {
      return this.config.getPrefixCls('zoom-in-top');
    },
    prefix: function prefix() {
      return this.config.getPrefixCls('color');
    },
    currentColor: function currentColor() {
      return this.color ? this.color.value : '';
    }
  },

  watch: {
    visible: function visible(val) {
      var _this = this;

      if (val === true) {
        this.$nextTick(function () {
          var _$refs = _this.$refs,
              sl = _$refs.sl,
              hue = _$refs.hue,
              alpha = _$refs.alpha;

          sl && sl.update();
          hue && hue.update();
          alpha && alpha.update();
        });
      }
    },


    currentColor: {
      immediate: true,
      handler: function handler(val) {
        this.customInput = val;
      }
    }
  },

  methods: {
    confirmValue: function confirmValue() {
      this.$emit('pick');
    },
    handleConfirm: function handleConfirm() {
      this.color.fromString(this.customInput);
    },
    clearColor: function clearColor() {
      this.$emit('clear');
      this.customInput = '';
    }
  }
};