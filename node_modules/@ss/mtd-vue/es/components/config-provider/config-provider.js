import _defineProperty from 'babel-runtime/helpers/defineProperty';
import _Object$keys from 'babel-runtime/core-js/object/keys';
import _extends from 'babel-runtime/helpers/extends';
import { CONFIG_PROVIDER, getConfig, getPrefix, getIconPrefix, getSize } from '@ss/mtd-vue/es/utils/config';
import { hasProps } from '@ss/mtd-vue/es/utils/vnode';

// skip undefined prop merged and return new object.
function combine(option1, option2) {
  var option = _extends({}, option1);
  _Object$keys(option2).forEach(function (key) {
    var value = option2[key];
    if (value !== undefined) {
      option[key] = value;
    }
  });
  return option;
}

var __vue_render__ = function __vue_render__() {
  var _vm = this;var _h = _vm.$createElement;var _c = _vm._self._c || _h;return _c(_vm.tag, _vm._g({ tag: "div", class: _vm.prefix + "-config-provider" }, _vm.$listeners), [_vm._t("default")], 2);
};
var __vue_staticRenderFns__ = [];

export default {
  render: __vue_render__,

  staticRenderFns: __vue_staticRenderFns__,

  name: 'MtdConfigProvider',
  props: {
    prefixCls: String,
    iconPrefixCls: String,
    tag: {
      type: String,
      default: 'div'
    },
    getPopupContainer: Function,
    componentSize: String
  },
  provide: function provide() {
    return _defineProperty({}, CONFIG_PROVIDER, this);
  },

  inject: {
    config: {
      from: CONFIG_PROVIDER,
      default: {
        options: {}
      }
    }
  },
  computed: {
    options: function options() {
      return combine(this.config.options, this.$props);
    },

    prefix: {
      get: function get() {
        return this.options.prefixCls || getPrefix();
      }
    },
    iconPrefix: {
      get: function get() {
        return this.options.iconPrefixCls || getIconPrefix();
      }
    },
    _componentSize: {
      get: function get() {
        return this.options.componentSize || getSize();
      }
    }
  },
  methods: {
    getSize: function getSize(comp) {
      return hasProps(comp, 'size') ? comp.size : this._componentSize || comp.size;
    },
    getPrefixCls: function getPrefixCls(suffixCls, customizePrefixCls) {
      return customizePrefixCls || this.prefix + '-' + suffixCls;
    },
    getIconCls: function getIconCls(suffixCls, customizePrefixCls) {
      return customizePrefixCls || this.iconPrefix + ' ' + this.iconPrefix + '-' + suffixCls;
    },
    getPContainer: function getPContainer() {
      var fn = this.options.getPopupContainer || getConfig().getPopupContainer;
      return fn();
    }
  }
};