import _extends from 'babel-runtime/helpers/extends';
import { Popper, Reference, Drop } from '@ss/mtd-vue/es/components/popper';
import SelectInput from '@ss/mtd-vue/es/components/select-input';
import { hasProps } from '@ss/mtd-vue/es/utils/vnode';
import Menus from './menus';
import { DEFAULT_FIELD_NAMES, getActivePaths } from './util.js';
import debounce from 'throttle-debounce/debounce';
import MtdMultipleInput from '../multiple-input';
import { CONFIG_PROVIDER, getPrefixCls, getIconCls, getSize } from '@ss/mtd-vue/es/utils/config';

function ValuesCached() {
  this.keys = []; // 二维数组
  this.values = [];
}

/**
 * @param key string[] | number[] | object[]
 */
ValuesCached.prototype.indexOf = function (key) {
  var keys = this.keys;

  var result = -1;
  for (var i = 0; i < keys.length; i++) {
    var current = keys[i];
    if (current === key || current.length === key.length && current.every(function (k, i) {
      return k === key[i];
    })) {
      result = i;
      break;
    }
  }
  return result;
};
/**
 * @param key string[] | number[] | object[]
 * @param value string[]
 */
ValuesCached.prototype.set = function (key, value) {
  this.keys.push(key);
  this.values.push(value);
};

ValuesCached.prototype.get = function (key) {
  var index = this.indexOf(key);
  if (index > -1) {
    return this.values[index];
  }
  return undefined;
};

var __vue_render__ = function __vue_render__() {
  var _obj;
  var _vm = this;var _h = _vm.$createElement;var _c = _vm._self._c || _h;return _c('popper', { ref: "popper", class: (_obj = {}, _obj["" + _vm.prefix] = true, _obj[_vm.prefix + "-disabled"] = _vm.disabled, _obj[_vm.prefix + "-" + _vm._size] = _vm._size, _obj['focus'] = _vm.visible, _obj), attrs: { "popper-disabled": _vm.disabled, "visible": _vm.visible, "trigger": "click", "placement": _vm.placement, "append-to-container": _vm.appendToContainer, "get-popup-container": _vm.getPopupContainer, "popper-options": _vm.popperOptions }, on: { "clickoutside": _vm.handleClickoutside } }, [_c('Reference', [_c('div', [!_vm.multiple ? _c('select-input', { ref: "input", attrs: { "size": _vm._size, "placeholder": _vm.currentPlaceholder, "disabled": _vm.disabled, "readonly": !_vm.filterable, "clearable": _vm.clearable, "suffix-icon": _vm.sIcon, "invalid": _vm.invalid }, on: { "focus": _vm.handleFocus, "clear": _vm.handleClear, "input": _vm.handleInput, "compositionstart": _vm.handleComposition, "compositionupdate": _vm.handleComposition, "compositionend": _vm.handleComposition }, nativeOn: { "click": function click($event) {
        return _vm.handleInputClick($event);
      } }, model: { value: _vm.inputValue, callback: function callback($v) {
        _vm.inputValue = $v;
      }, expression: "inputValue" } }) : _c('mtd-multiple-input', { ref: "multipleInput", attrs: { "value": _vm.valueStrs, "size": _vm._size, "input-value": _vm.inputValue, "max-tag-count": _vm.maxTagCount, "readonly": _vm.disabled || !_vm.filterable, "disabled": _vm.disabled, "clearable": _vm.clearable, "closable": !_vm.disabled, "suffix-icon": _vm.sIcon, "placeholder": _vm.placeholder, "focused": _vm.visible, "invalid": _vm.invalid }, on: { "update:inputValue": _vm.handleInputChange, "remove": _vm.handleTagRemove, "clear": _vm.handleClear, "focus": _vm.handleFocus, "compositionstart": _vm.handleComposition, "compositionupdate": _vm.handleComposition, "compositionend": _vm.handleComposition }, nativeOn: { "click": function click($event) {
        return _vm.handleInputClick($event);
      } } })], 1)]), _c('Drop', { class: [_vm.popperClass, _vm.prefix + "-popper"], attrs: { "use-show": "" } }, [_vm._t("addendum-header"), _c('mtd-cascader-menus', { ref: "menus", attrs: { "filterable": _vm.filterable && !_vm.remote, "filter": _vm.filter, "filter-method": _vm.filterMethod, "filter-parent": !_vm.changeOnSelect, "menu-width": _vm.inputWidth, "data": _vm.data, "show-select-all": _vm.showSelectAll, "props": _vm.fieldNames, "change-on-select": _vm.changeOnSelect, "expand-trigger": _vm.expandTrigger, "load-data": _vm.loadData, "loading": _vm.loading, "loading-text": _vm.loadingText, "no-data-text": _vm.noDataText, "no-match-text": _vm.noMatchText, "expandable-on-disabled": _vm.expandableOnDisabled, "default-expand-first-item": _vm.defaultExpandFirstItem && _vm.value && _vm.value.length === 0, "expanded-value": _vm.expandedValue, "value": _vm.expandedValue, "update-after-loaded": _vm.updateAfterLoaded, "multiple": _vm.multiple, "check-strictly": _vm.checkStrictly, "checked-strategy": _vm.checkedStrategy, "checked-values": _vm.value, "disabled-strictly": _vm.disabledStrictly }, on: { "expanded-change": _vm.handleExpandedChange, "select": _vm.handleSelect, "click": _vm.handleClickItem, "update:checkedValues": _vm.handleCheckedChange }, scopedSlots: _vm._u([{ key: "default", fn: function fn(ref) {
        var node = ref.node;
        var data = ref.data;
        return [_vm._t("default", [_c('span', [_vm._v(_vm._s(node.label))])], { "node": node, "data": data })];
      } }], null, true) }), _vm._t("addendum-footer")], 2)], 1);
};
var __vue_staticRenderFns__ = [];

export default {
  render: __vue_render__,

  staticRenderFns: __vue_staticRenderFns__,

  name: 'Cascader',
  components: {
    Popper: Popper,
    Reference: Reference,
    Drop: Drop,
    SelectInput: SelectInput,
    MtdMultipleInput: MtdMultipleInput,
    MtdCascaderMenus: Menus
  },
  props: {
    icon: String,
    data: {
      type: Array,
      default: function _default() {
        return [];
      }
    },
    value: {
      type: Array,
      default: function _default() {
        return [];
      }
    },
    noDataText: String,
    props: {
      type: Object,
      default: function _default() {
        return {};
      }
    },
    changeOnSelect: Boolean,
    expandTrigger: String,
    formatter: Function,
    separator: {
      type: String,
      default: ' / '
    },
    loadData: Function,
    filterable: Boolean,
    debounce: {
      type: Number,
      default: 300
    },
    filterMethod: Function,
    remote: Boolean,
    remoteMethod: Function,
    noMatchText: String,
    invalid: Boolean,
    loading: Boolean,
    loadingText: String,
    disabled: Boolean,
    clearable: Boolean,
    size: String,
    placeholder: {
      type: String,
      default: function _default() {
        return '请选择';
      }
    },
    popperClass: String,
    placement: {
      type: String,
      default: 'bottom-start'
    },
    visible: Boolean,
    appendToContainer: {
      type: Boolean,
      default: true
    },
    getPopupContainer: Function,

    multiple: Boolean,
    checkStrictly: Boolean,
    checkedStrategy: {
      type: String,
      default: 'parent',
      validator: function validator(v) {
        return ['all', 'parent', 'children'].indexOf(v) > -1;
      }
    },
    maxTagCount: Number,
    popperOptions: Object,
    closeOnSelect: Boolean,
    reserveKeyword: {
      type: Boolean,
      default: true
    },
    expandableOnDisabled: {
      // see: https://ones.sankuai.com/ones/product/4348/workItem/requirement/detail/9014200
      type: Boolean,
      default: false
    },
    disabledStrictly: {
      type: Boolean,
      default: true
    },
    useCache: {
      // todo:临时属性，用于是否启用 value 匹配缓存，后续通过变更实现来去除改属性
      type: Boolean,
      default: false
    },
    defaultExpandFirstItem: {
      type: Boolean,
      default: false
    },
    showSelectAll: { // 先不建议使用，和其他属性还未做兼容
      type: Boolean,
      default: false
    },
    updateAfterLoaded: Boolean
  },
  inject: {
    config: {
      from: CONFIG_PROVIDER,
      default: {
        getPrefixCls: getPrefixCls,
        getIconCls: getIconCls,
        getSize: getSize
      }
    }
  },
  data: function data() {
    return {
      inputValue: '',
      expandedValue: this.multiple ? [] : this.value,
      focused: false,
      previousQuery: null,
      filter: '',
      inputWidth: '',
      valueStrs: '',
      cached: new ValuesCached()
    };
  },

  computed: {
    sIcon: function sIcon() {
      return hasProps(this, 'icon') ? this.icon : this.config.getIconCls('down-thick');
    },
    prefix: function prefix() {
      return this.config.getPrefixCls('cascader');
    },
    _size: function _size() {
      return this.config.getSize(this);
    },
    fieldNames: function fieldNames() {
      return _extends({}, DEFAULT_FIELD_NAMES, this.props);
    },
    currentPlaceholder: function currentPlaceholder() {
      return !this.filterable || !this.focused ? this.placeholder : this.valueStrs[0] || this.placeholder;
    }
  },
  watch: {
    visible: {
      immediate: true,
      handler: function handler(n) {
        n ? this.handleMenuVisible() : this.handleMenuHidden();
      }
    },
    value: {
      immediate: true,
      handler: function handler(n, v) {
        /**
         * 保留历史计算结果，所以没有将其作为计算属性
         * 存在远程搜索的情况，在此情况下历史 data 会被重新赋值，如果重新计算会找不到原有对应值
         * */
        this.updateValueStrs();
      }
    },
    valueStrs: {
      immediate: true,
      handler: function handler(n, old) {
        var _this = this;

        if (!this.multiple) {
          if (!old || n[0] !== old[0]) {
            var isQuerying = this.previousQuery;
            if (!n[0] && isQuerying) {
              // 修复 Cascader 异步搜索的时候会清空query的问题 [TT](https://tt.sankuai.com/ticket/detail?id=70083671)
              // value 对应不上 data 里面的时候保留query
              return;
            }
            this.setInputValue(n, { force: true });
          }
        } else {
          this.$nextTick(function () {
            _this.updatePopper();
          });
        }
      }
    },
    expandedValue: function expandedValue() {
      var _this2 = this;

      this.$nextTick(function () {
        _this2.updatePopper();
      });
    },
    data: function data(n, v) {
      this.updateValueStrs();
      if (this.visible && n !== v) {
        this.expandedValue = this.multiple ? [] : this.value;
      }
    }
  },

  created: function created() {
    this.debouncedQuery = !this.debounce ? this.handleQuery : debounce(this.debounce, this.handleQuery);
  },

  methods: {
    openMenu: function openMenu() {
      if (!this.visible) {
        this.$emit('update:visible', true);
      }
    },
    closeMenu: function closeMenu() {
      if (this.visible) {
        this.$emit('update:visible', false);
      }
    },
    handleMenuVisible: function handleMenuVisible() {
      var nextExpandedValue = this.multiple ? [] : this.value;
      if (nextExpandedValue.length !== 0) {
        this.expandedValue = nextExpandedValue;
      };
      this.focused = true;
      this.setInputValue(['']);
      var input = this.$refs.input;

      if (input) {
        this.inputWidth = input.$el.getBoundingClientRect().width + 'px';
      }
      this.$nextTick(this.updatePopper);
      this.$nextTick(this.scrollMenu);
    },
    handleMenuHidden: function handleMenuHidden() {
      this.setInputValue(this.valueStrs);
      this.focused = false;
      this.filter = '';
      this.previousQuery = '';
    },
    handleClickoutside: function handleClickoutside(e) {
      if (this.disabled) {
        return;
      }
      this.closeMenu();
      this.$emit('clickoutside', e);
      this.$emit('blur', e);
    },
    handleFocus: function handleFocus(e) {
      this.focused = true;
      this.$emit('focus', e);
    },
    handleClear: function handleClear() {
      // 如果是过滤中点击清空按钮则清空当前搜索条件，否则清空当前值
      if (this.visible && this.filterable && this.inputValue) {
        this.setInputValue(['']);
      } else {
        this.$emit('clear');
        this.setValue([], [], []);
      }
    },
    handleInput: function handleInput(v) {
      if (!this.visible) {
        // to fix: https://tt.sankuai.com/ticket/detail?id=5934989
        this.openMenu();
      }
      this.debouncedQuery(this.inputValue);
    },
    handleInputChange: function handleInputChange(v) {
      this.inputValue = v;
      this.$nextTick(this.updatePopper);
      this.handleInput(v);
    },
    handleComposition: function handleComposition(e) {
      var type = e.type;

      if (type === 'compositionend') {
        this.isOnComposition = false;
        // 当混合输入前后值不变时，不会触发后续的 input 事件，所以需要再次触发 query
        this.debouncedQuery(this.inputValue);
      } else {
        this.isOnComposition = true;
      }
    },
    handleInputClick: function handleInputClick() {
      if (this.disabled) {
        return;
      }
      if (!this.visible) {
        this.openMenu();
      } else if (!this.filterable) {
        this.closeMenu();
      }
    },
    handleQuery: function handleQuery(val) {
      var _this3 = this;

      if (this.previousQuery === val || this.isOnComposition) {
        return;
      }
      this.previousQuery = val;
      if (this.remote) {
        this.remoteMethod && this.remoteMethod(val);
      } else {
        this.filter = val;
      }
      // 如果通过样式修改面板高为不定高后，依赖此方法重新定位
      this.$nextTick(function () {
        _this3.updatePopper();
      });
      this.$emit('filter', val);
    },
    setValue: function setValue(values, nodes) {
      this.$emit('input', values);
      var datas = nodes.map(function (node) {
        return node.data;
      });
      this.$emit('change', values, datas, nodes);
    },
    setInputValue: function setInputValue(values) {
      var option = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

      if (this.filterable || option.force) {
        this.inputValue = this.multiple ? '' : values[0];
      }
    },
    setMultipleValue: function setMultipleValue(values, paths, lastNode) {
      this.$emit('input', values);
      var datas = paths.map(function (path) {
        return path.map(function (node) {
          return node.data;
        });
      });
      this.$emit('change', values, datas, paths, lastNode);
      if (this.filterable) {
        this.focus();
      }
    },
    handleSelect: function handleSelect(value, nodes) {
      this.setValue(value, nodes);
      this.closeMenu();
    },
    handleClickItem: function handleClickItem(value, nodes) {
      this.setValue(value, nodes);

      if (this.closeOnSelect) {
        this.closeMenu();
      }
    },
    handleExpandedChange: function handleExpandedChange(values, nodes) {
      this.expandedValue = values;
      var datas = nodes.map(function (node) {
        return node.data;
      });
      // 展开项发生变化
      this.$emit('active-item-change', datas);
    },
    handleCheckedChange: function handleCheckedChange(values, paths, lastNode) {
      if (!this.reserveKeyword) {
        this.filter = '';
        this.inputValue = '';
        this.previousQuery = '';
      }
      this.setMultipleValue(values, paths, lastNode);
    },
    handleTagRemove: function handleTagRemove(tag, index) {
      var menus = this.$refs.menus;


      var oldNodes = menus.getNodes(this.value[index]);
      if (oldNodes && oldNodes.length) {
        var last = oldNodes[oldNodes.length - 1];

        var _menus$setChecked = menus.setChecked(last, { checked: false }),
            nextCheckedValues = _menus$setChecked.nextCheckedValues,
            checkedPaths = _menus$setChecked.checkedPaths,
            lastNode = _menus$setChecked.lastNode;

        this.setMultipleValue(nextCheckedValues, checkedPaths, lastNode);
        menus.setNextRefresh(); // 防止用户手动赋值没有响应
      }
    },
    scrollMenu: function scrollMenu() {
      var menus = this.$refs.menus;
      if (menus) {
        menus.scrollIntoView();
      }
    },
    focus: function focus() {
      if (this.multiple) {
        this.$refs.multipleInput.focus();
      } else {
        this.$refs.input.focus();
      }
      this.openMenu();
    },
    blur: function blur() {
      if (this.multiple) {
        this.$refs.multipleInput.blur();
      } else {
        this.$refs.input.blur();
      }
      this.closeMenu();
    },
    updatePopper: function updatePopper() {
      if (this.visible) {
        this.$refs.popper.updatePopper();
      }
    },
    updateValueStrs: function updateValueStrs() {
      var _this4 = this;

      var labelField = this.fieldNames.label;
      var values = this.multiple ? this.value : [this.value];
      var cached = this.cached;

      var newCached = new ValuesCached();
      this.valueStrs = values.map(function (value) {
        var actived = _this4.useCache ? cached.get(value) : undefined;
        if (!actived) {
          var _getActivePaths = getActivePaths(_this4.data, value, _this4.fieldNames),
              result = _getActivePaths.result,
              matched = _getActivePaths.matched;

          actived = result;
          if (_this4.useCache && matched) {
            newCached.set(value, actived);
          }
        } else {
          newCached.set(value, actived);
        }
        var labels = actived.map(function (item) {
          return item[labelField];
        });
        if (_this4.formatter) {
          return _this4.formatter(labels, actived, value);
        }
        return labels.join('' + _this4.separator);
      }).filter(function (str) {
        return str !== null && str !== undefined;
      });
      this.cached = newCached;
    },
    getNodes: function getNodes(values) {
      var menus = this.$refs.menus;

      if (menus) {
        return menus.getNodes(values);
      }
      return [];
    },
    getNode: function getNode(value) {
      var menus = this.$refs.menus;

      if (menus) {
        return menus.getNode(value);
      }
      return undefined;
    }
  }
};