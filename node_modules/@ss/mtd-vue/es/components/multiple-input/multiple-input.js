import _toConsumableArray from 'babel-runtime/helpers/toConsumableArray';
import _extends from 'babel-runtime/helpers/extends';
import MtdTag from '@ss/mtd-vue/es/components/tag';
import Icon from '@ss/mtd-vue/es/components/icon';
import { CONFIG_PROVIDER, getPrefixCls } from '@ss/mtd-vue/es/utils/config';

var __vue_render__ = function __vue_render__() {
  var _obj;
  var _vm = this;var _h = _vm.$createElement;var _c = _vm._self._c || _h;return _c('div', { class: (_obj = {}, _obj[_vm.prefix] = true, _obj[_vm.prefix + "-prefix"] = _vm.hasPrefix, _obj[_vm.prefix + "-suffix"] = _vm.hasSuffix, _obj[_vm.prefix + "-disabled"] = _vm.disabled, _obj[_vm.prefix + "-readonly"] = _vm.readonly, _obj[_vm.prefix + "-invalid"] = _vm.invalid, _obj[_vm.prefix + "-" + _vm.size] = !!_vm.size, _obj[_vm.prefix + "-" + _vm.genre] = !!_vm.genre, _obj['focus'] = _vm.focused, _obj), attrs: { "tabindex": "0" }, on: { "click": _vm.handleClick, "mouseenter": function mouseenter($event) {
        _vm.hovering = true;
      }, "mouseleave": function mouseleave($event) {
        _vm.hovering = false;
      } } }, [_vm.hasPrefix ? _c('span', { class: _vm.prefix + "-prefix-inner" }, [_vm._t("prefix", [_c('i', { class: _vm.prefixIcon, on: { "click": _vm.handlePrefixClick } })])], 2) : _vm._e(), _c('div', { class: _vm.prefix + "-rendered" }, [_c('div', { directives: [{ name: "show", rawName: "v-show", value: !_vm.tags.length && !_vm.inputValue, expression: "!tags.length && !inputValue" }], class: _vm.prefix + "-placeholder" }, [_vm._v(" " + _vm._s(_vm.placeholder) + " ")]), _vm._l(_vm.tags, function (val, $index) {
    return _c('mtd-tag', { key: $index, attrs: { "closable": _vm.closable, "size": _vm.size, "theme": "" }, on: { "close": function close($event) {
          return _vm.remove($index);
        } } }, [_vm._v(" " + _vm._s(val) + " ")]);
  }), _vm.omittedValues.length ? _c('mtd-tag', { attrs: { "size": _vm.size, "theme": "" } }, [_vm._t("default", [_vm._v("+" + _vm._s(_vm.omittedValues.length))], { "omittedValues": _vm.omittedValues })], 2) : _vm._e(), !_vm.readonly ? _c('div', { class: _vm.prefix + "-field-wrap" }, [_c('input', _vm._g({ ref: "input", class: _vm.prefix + "-field", attrs: { "type": "text" }, domProps: { "value": _vm.inputValue } }, _vm.inputListeners)), _c('span', { ref: "mirror", class: _vm.prefix + "-field-mirror" }, [_vm._v(_vm._s(_vm.inputValue))])]) : _vm._e()], 2), _vm.hasSuffix ? _c('span', { class: _vm.prefix + "-suffix-inner" }, [_vm.loading ? _c('Icon', { attrs: { "name": "loading" } }) : _vm.showClear ? _c('Icon', { class: _vm.prefix + "-clear", attrs: { "name": "error-circle" }, on: { "click": function click($event) {
        $event.stopPropagation();return _vm.handleClearClick($event);
      } } }) : _vm._t("suffix", [_c('i', { class: _vm.suffixIcon, on: { "click": _vm.handleSuffixClick } })])], 2) : _vm._e()]);
};
var __vue_staticRenderFns__ = [];

export default {
  render: __vue_render__,

  staticRenderFns: __vue_staticRenderFns__,

  name: 'MtdMultipleInput',
  components: {
    MtdTag: MtdTag,
    Icon: Icon
  },
  inheritAttrs: false,
  props: {
    placeholder: String,
    value: {
      type: [Array],
      required: true,
      default: function _default() {
        return [];
      }
    },
    inputValue: String,
    closable: Boolean,
    disabled: Boolean,
    readonly: Boolean,
    maxTagCount: Number,
    clearable: Boolean,
    loading: Boolean,
    prefixIcon: String,
    suffixIcon: String,

    invalid: Boolean,
    genre: String,
    size: String,
    focused: Boolean
  },
  data: function data() {
    return {
      hovering: false
    };
  },

  inject: {
    config: {
      from: CONFIG_PROVIDER,
      default: {
        getPrefixCls: getPrefixCls
      }
    }
  },
  computed: {
    prefix: function prefix() {
      return this.config.getPrefixCls('multiple-input');
    },
    hasPrefix: function hasPrefix() {
      return !!(this.prefixIcon || this.$slots.prefix);
    },
    hasSuffix: function hasSuffix() {
      return this.loading || this.clearable || !!(this.suffixIcon || this.$slots.suffix);
    },
    hasValue: function hasValue() {
      return !!(this.value && this.value.length);
    },
    tags: function tags() {
      if (this.maxTagCount && this.maxTagCount < this.value.length) {
        return this.value.slice(0, this.maxTagCount);
      }
      return this.value;
    },
    omittedValues: function omittedValues() {
      var omittedLength = this.tags.length - this.value.length;
      if (omittedLength) {
        return this.value.slice(omittedLength);
      }
      return [];
    },
    showClear: function showClear() {
      return this.clearable && !this.disabled && this.hasValue && this.hovering;
    },
    inputListeners: function inputListeners() {
      var listeners = _extends({}, this.$listeners, { input: this.handleInput });
      delete listeners.click;
      delete listeners.focus;
      return listeners;
    }
  },
  watch: {
    inputValue: function inputValue() {
      this.$nextTick(this.syncMirrorWidth);
    }
  },
  methods: {
    syncMirrorWidth: function syncMirrorWidth() {
      var _$refs = this.$refs,
          mirror = _$refs.mirror,
          input = _$refs.input;

      var width = mirror.clientWidth;
      input.style.width = width ? width + 'px' : '';
    },
    remove: function remove(index) {
      var values = [].concat(_toConsumableArray(this.value));
      var removedValue = values[index];
      values.splice(index, 1);
      this.$emit('remove', removedValue, index);
      this.$emit('input', values);
    },
    handleFocus: function handleFocus(e) {
      if (this.$refs.input) {
        this.$refs.input.focus();
        if (!this.focused) {
          this.$emit('focus', e);
        }
      }
    },
    handleInput: function handleInput(e) {
      var inputValue = e.target.value;
      this.$emit('update:inputValue', inputValue);
    },
    handleClearClick: function handleClearClick(e) {
      this.$emit('clear');
      this.$emit('input', []);
    },
    handlePrefixClick: function handlePrefixClick(e) {
      this.$emit('click-prefix', e);
    },
    handleSuffixClick: function handleSuffixClick(e) {
      this.focus();
      this.$emit('click-suffix', e);
    },
    handleClick: function handleClick(e) {
      this.handleFocus(e);
      this.$emit('click', e);
    },
    focus: function focus() {
      this.$refs.input && this.$refs.input.focus();
    },
    blur: function blur() {
      this.$refs.input && this.$refs.input.blur();
    }
  }
};