import MtdCheckbox from '@ss/mtd-vue/es/components/checkbox';
import MtdCollapseTransition from '@ss/mtd-vue/es/transitions/collapse-transition';
import { isFunction, isArray } from '@ss/mtd-vue/es/utils/type';
import { CONFIG_PROVIDER, getPrefixCls, getIconCls } from '@ss/mtd-vue/es/utils/config';

var __vue_render__ = function __vue_render__() {
  var _obj, _obj$1;
  var _vm = this;var _h = _vm.$createElement;var _c = _vm._self._c || _h;return _c('div', { directives: [{ name: "show", rawName: "v-show", value: _vm.node.visible, expression: "node.visible" }], class: [_vm.prefix, _vm.className, (_obj = {}, _obj[_vm.prefix + "-leaf"] = _vm.node.isLeaf, _obj[_vm.prefix + "-expanded"] = _vm.node.expanded, _obj[_vm.prefix + "-disabled"] = _vm.disabled, _obj[_vm.prefix + "-selected"] = _vm.node.selected, _obj)], attrs: { "draggable": _vm.draggable }, on: { "dragstart": function dragstart($event) {
        $event.stopPropagation();return _vm.handleDragStart($event);
      }, "dragover": function dragover($event) {
        $event.stopPropagation();return _vm.handleDragOver($event);
      }, "dragend": function dragend($event) {
        $event.stopPropagation();return _vm.handleDragEnd($event);
      }, "drop": function drop($event) {
        $event.stopPropagation();return _vm.handleDrop($event);
      } } }, [_c('div', { class: _vm.prefix + "-content", style: { 'padding-left': _vm.indent + "px" }, on: { "click": function click($event) {
        $event.stopPropagation();return _vm.handleClick($event);
      } } }, [_c('i', { class: (_obj$1 = {}, _obj$1[_vm.hiddenCls] = !_vm.expandable, _obj$1[_vm.prefix + "-expand-icon"] = !_vm.loading, _obj$1[_vm.expandIcon] = !_vm.loading, _obj$1[_vm.prefix + "-loading-icon"] = _vm.loading, _obj$1[_vm.iconPrefix('loading')] = _vm.loading, _obj$1), on: { "click": function click($event) {
        $event.stopPropagation();return _vm.handleExpandIconClick($event);
      } } }), _vm.checkable ? _c('mtd-checkbox', { attrs: { "size": "large", "checked": _vm.node.checked, "indeterminate": _vm.node.indeterminate, "is-under-control": false, "disabled": _vm.disableCheckbox }, on: { "input": _vm.handleCheckboxInput }, nativeOn: { "click": function click($event) {
        $event.stopPropagation();
      } } }) : _vm._e(), _vm.node.icon ? _c('i', { class: [_vm.prefix + "-icon", _vm.node.icon] }) : _vm._e(), _c('span', { class: _vm.prefix + "-content-wrapper" }, [_vm._t("default", [_vm._v(_vm._s(_vm.node.title))], { "node": _vm.node, "data": _vm.data })], 2)], 1), !!_vm.$scopedSlots.extend ? _c('div', { class: _vm.prefix + "-extend-wrapper", style: { 'padding-left': _vm.indent + "px" } }, [_c('div', { class: _vm.prefix + "-extend" }, [_vm._t("extend", null, { "node": _vm.node, "data": _vm.data })], 2)]) : _vm._e(), _c('mtd-collapse-transition', [_vm.expandable && _vm.node.expanded && _vm.node.children ? _c('div', { class: _vm.prefix + "-children" }, _vm._l(_vm.node.children, function (child) {
    return _c('mtd-tree-node', { key: child.key, attrs: { "expand-icon": _vm.expandIcon, "node": child, "data": child.data } });
  }), 1) : _vm._e()])], 1);
};
var __vue_staticRenderFns__ = [];

export default {
  render: __vue_render__,

  staticRenderFns: __vue_staticRenderFns__,

  name: 'TreeNode',
  components: {
    MtdCheckbox: MtdCheckbox,
    MtdCollapseTransition: MtdCollapseTransition
  },
  inheritAttrs: false,
  props: {
    nodeClass: {
      type: [String, Function],
      default: ''
    },
    expandIcon: String,
    node: {
      type: Object,
      required: true
    },
    data: {
      type: Object,
      required: true
    },
    selectable: Boolean,
    destroyOnCollapse: Boolean,
    expandOnClickNode: Boolean,
    checkOnClickNode: Boolean,
    indent: Number,
    loadData: Function,

    draggable: Boolean
  },
  inject: {
    config: {
      from: CONFIG_PROVIDER,
      default: {
        getPrefixCls: getPrefixCls,
        getIconCls: getIconCls
      }
    }
  },
  data: function data() {
    return {
      loading: false
    };
  },

  computed: {
    hiddenCls: function hiddenCls() {
      return this.config.getPrefixCls('visible-hidden');
    },
    prefix: function prefix() {
      return this.config.getPrefixCls('tree-node');
    },
    iconPrefix: function iconPrefix() {
      return this.config.getIconCls;
    },
    className: function className() {
      var nodeClass = this.nodeClass;

      return isFunction(nodeClass) ? nodeClass(this.node, this.data) : nodeClass;
    },
    disabled: function disabled() {
      return this.node.disabled;
    },
    expandable: function expandable() {
      return !!this.node.children || this.loadData && !this.node.isLeaf;
    },
    disableCheckbox: function disableCheckbox() {
      return this.node.disableCheckbox;
    },
    checkable: function checkable() {
      return this.node.checkable;
    },
    checked: function checked() {
      return this.node.checked;
    },
    nextNode: function nextNode() {
      var parent = this.node.$parent;
      if (parent) {
        var index = parent.children.indexOf(this.node);
        if (index > -1) {
          return parent.children[index + 1];
        }
      }
      return null;
    },
    previousNode: function previousNode() {
      var parent = this.node.$parent;
      if (parent) {
        var index = parent.children.indexOf(this.node);
        if (index > -1) {
          return index > 0 ? parent.children[index - 1] : null;
        }
      }
      return null;
    },
    hasNoChildren: function hasNoChildren() {
      // 空数组也代表无子
      return !this.node.children || isArray(this.node.children) && this.node.children.length === 0;
    }
  },
  methods: {
    handleClick: function handleClick(e) {
      if (this.expandOnClickNode) {
        this.handleExpandIconClick();
      }
      if (this.checkOnClickNode) {
        this.handleCheckboxInput(!this.checked);
      }
      if (this.selectable && !this.disabled && !this.node.selected) {
        this.$emit('selected', this.node, true);
      }
      this.$emit('node-click', this.node, this.data, e);
    },
    handleExpandIconClick: function handleExpandIconClick() {
      if (this.expandable && !this.loading) {
        var expanded = !this.node.expanded;
        if (expanded && this.loadData && !this.node.loaded && !this.node.isLeaf && this.hasNoChildren) {
          this.loading = true;
          this.loadData(this.node, this.handleLoadData);
        }
        this.$emit('expandedChange', this.node, expanded);
        // todo 看下 loadData 时需不需要发送 expanded 事件
      }
    },
    handleCheckboxInput: function handleCheckboxInput(v) {
      if (!this.disabled && !this.disableCheckbox) {
        this.$emit('checkedChange', this.node, v);
      }
    },
    handleLoadData: function handleLoadData(children) {
      this.loading = false;
      this.$emit('loadedData', this.node, this.data, children);
    },
    handleDragStart: function handleDragStart(event) {
      if (!this.draggable) return;
      this.$emit('tree-node-drag-start', event, this);
    },
    handleDragOver: function handleDragOver(event) {
      if (!this.draggable) return;
      this.$emit('tree-node-drag-over', event, this);
      event.preventDefault();
    },
    handleDrop: function handleDrop(event) {
      event.preventDefault();
    },
    handleDragEnd: function handleDragEnd(event) {
      if (!this.draggable) return;
      this.$emit('tree-node-drag-end', event, this);
    }
  }
};