import _defineProperty from 'babel-runtime/helpers/defineProperty';
import Icon from '@ss/mtd-vue/es/components/icon';
import { CONFIG_PROVIDER, getPrefixCls, getIconCls } from '@ss/mtd-vue/es/utils/config';

var TYPE_CLASSES_MAP = {
  'success': 'success-circle',
  'warning': 'warning-circle',
  'error': 'error-circle',
  'info': 'info-circle'
};
var __vue_render__ = function __vue_render__() {
  var _obj;
  var _vm = this;var _h = _vm.$createElement;var _c = _vm._self._c || _h;return _c('transition', { attrs: { "name": _vm.prefix + "-fade" } }, [_c('div', { directives: [{ name: "show", rawName: "v-show", value: _vm.visible, expression: "visible" }], class: _vm.typeClass }, [_vm.showIcon ? _c('i', { class: [_vm.iconClass, _vm.prefix + "-icon"] }) : _vm._e(), _c('div', { class: _vm.prefix + "-content" }, [_c('div', { class: (_obj = {}, _obj[_vm.prefix + "-title"] = true, _obj[_vm.prefix + "-title-large"] = _vm.description || this.$slots.description, _obj) }, [_vm._t("default", [_vm._v(_vm._s(_vm.title))])], 2), _vm.description || _vm.$slots.description ? _c('div', { class: _vm.prefix + "-description" }, [_vm._t("description", [_vm._v(_vm._s(_vm.description))])], 2) : _vm._e(), _c('a', { directives: [{ name: "show", rawName: "v-show", value: _vm.canClosed, expression: "canClosed" }], class: _vm.prefix + "-close", on: { "click": _vm.close } }, [_vm._t("close", [_c('Icon', { attrs: { "name": "close-thick" } })])], 2)])])]);
};
var __vue_staticRenderFns__ = [];

export default {
  render: __vue_render__,

  staticRenderFns: __vue_staticRenderFns__,

  name: 'MtdAnnouncement',
  components: {
    Icon: Icon
  },
  props: {
    title: {
      type: String,
      default: ''
    },
    description: {
      type: String,
      default: ''
    },
    type: {
      type: String,
      default: 'warning'
    },
    closeable: Boolean, // 兼容历史
    closable: Boolean,

    showIcon: Boolean
  },

  inject: {
    config: {
      from: CONFIG_PROVIDER,
      default: {
        getPrefixCls: getPrefixCls,
        getIconCls: getIconCls
      }
    }
  },

  data: function data() {
    return {
      visible: true
    };
  },


  computed: {
    prefix: function prefix() {
      return this.config.getPrefixCls('announcement');
    },
    iconPrefix: function iconPrefix() {
      return this.config.getIconCls;
    },
    TYPE_CLASSES_MAP: function TYPE_CLASSES_MAP() {
      return {
        'success': this.iconPrefix('success-circle'),
        'warning': this.iconPrefix('warning-circle'),
        'error': this.iconPrefix('error-circle'),
        'info': this.iconPrefix('info-circle')
      };
    },
    canClosed: function canClosed() {
      return this.closable || this.closeable;
    },
    typeClass: function typeClass() {
      var _ref;

      return _ref = {}, _defineProperty(_ref, this.prefix, true), _defineProperty(_ref, this.prefix + '-' + this.type, this.type), _defineProperty(_ref, this.prefix + '-closable', this.closable), _defineProperty(_ref, this.prefix + '-has-description', this.description || this.$slots.description), _ref;
    },
    iconClass: function iconClass() {
      return this.iconPrefix(TYPE_CLASSES_MAP[this.type] || 'warning');
    }
  },

  methods: {
    close: function close() {
      this.visible = false;
      this.$emit('close');
    }
  }
};