import _Array$from from 'babel-runtime/core-js/array/from';
import _defineProperty from 'babel-runtime/helpers/defineProperty';

import { applyProps, isSame } from '@ss/mtd-vue/es/utils/vnode';
import { addResizeListener, removeResizeListener } from '@ss/mtd-vue/es/utils/resize-event';
import { CONFIG_PROVIDER, getIconCls, getPrefixCls } from '@ss/mtd-vue/es/utils/config';

function getCarouselItems(vnodes) {
  return (vnodes || []).filter(function (vnode) {
    if (vnode.componentOptions) {
      return vnode.componentOptions.Ctor.options.name === 'MtdCarouselItem';
    }
    return false;
  });
}

export default {
  name: 'MtdCarousel',
  props: {
    initialIndex: {
      type: Number,
      default: 0
    },
    autoplay: {
      type: Boolean,
      default: true
    },
    indicatorPosition: {
      type: String,
      default: 'inside',
      validator: function validator(val) {
        return ['inside', 'outside', 'none'].indexOf(val) !== -1;
      }
    },
    speed: {
      type: Number,
      default: 600
    },
    interval: {
      type: Number,
      default: 3000
    },
    loop: {
      type: Boolean,
      default: true
    },
    arrow: {
      type: String,
      default: 'always',
      validator: function validator(val) {
        return ['always', 'hover', 'never'].indexOf(val) !== -1;
      }
    },
    direction: {
      type: String,
      default: 'horizontally',
      validator: function validator(val) {
        return ['horizontally', 'vertical'].indexOf(val) !== -1;
      }
    }
  },
  inject: {
    config: {
      from: CONFIG_PROVIDER,
      default: {
        getPrefixCls: getPrefixCls,
        getIconCls: getIconCls
      }
    }
  },
  data: function data() {
    return {
      size: 0,
      activeIndex: this.initialIndex || 0,
      isTransition: false,
      items: [],
      isShowNextBtn: true
    };
  },

  computed: {
    prefix: function prefix() {
      return this.config.getPrefixCls('carousel');
    },
    iconPrefix: function iconPrefix() {
      return this.config.getIconCls;
    },
    len: function len() {
      return this.items.length;
    },
    activeDot: function activeDot() {
      var activeDot = void 0;
      if (this.activeIndex === this.len) {
        activeDot = 0;
      } else if (this.activeIndex === -1) {
        activeDot = this.len - 1;
      } else {
        activeDot = this.activeIndex;
      }
      return activeDot;
    },
    cssProp: function cssProp() {
      return this.direction === 'vertical' ? 'height' : 'width';
    },
    upCssProp: function upCssProp() {
      return this.direction === 'vertical' ? 'Height' : 'Width';
    },
    showArrow: function showArrow() {
      return this.direction !== 'vertical';
    }
  },
  watch: {
    autoplay: function autoplay() {
      if (this.autoplay) {
        this.autoplayHandler();
      } else {
        this.clearTimeout();
      }
    }
  },
  created: function created() {
    this.isMouseover = false; // 控制autoplay和next函数
    this.timer = null; // autoplay的时间锚
  },
  mounted: function mounted() {
    var _this = this;

    var wrapper = this.$refs.wrapper;
    // 获取容器宽度，容器为100%,拿到真实宽度后渲染children的宽度
    this.size = wrapper && wrapper['offset' + this.upCssProp];
    this.calcCarousel();
    this.translated(this.activeIndex + 1);
    setTimeout(function () {
      _this.isTransition = true; // tofix: https://tt.sankuai.com/ticket/detail?id=40600798
    }, 0);
    // 当页面宽度改变时，更新width属性
    addResizeListener(this.$el, this.handleWindowResized);
  },
  updated: function updated() {
    this.calcCarousel();
  },
  destroyed: function destroyed() {
    removeResizeListener(this.$el, this.handleWindowResized);
  },

  methods: {
    handlePrevBtnClick: function handlePrevBtnClick() {
      this.isMouseover = false;
      this.prev();
    },
    handleNextBtnClick: function handleNextBtnClick() {
      this.isMouseover = false;
      this.next();
    },
    handleDotClick: function handleDotClick(index) {
      this.isMouseover = false;
      this.setActiveItem(index);
    },
    handleWindowResized: function handleWindowResized() {
      var wrapper = this.$refs.wrapper;
      var size = wrapper && wrapper['offset' + this.upCssProp];
      this.size = size;
      this.setActiveItem(this.activeIndex);
    },
    handleMouseEnter: function handleMouseEnter() {
      if (!this.autoplay) {
        return;
      }
      this.isMouseover = true;
      this.autoplayHandler();
    },
    handleMouseLeave: function handleMouseLeave() {
      if (!this.autoplay) {
        return;
      }
      this.isMouseover = false;
      this.autoplayHandler();
    },
    setActiveItem: function setActiveItem(num) {
      this.move(num - this.activeIndex);
    },
    autoplayHandler: function autoplayHandler() {
      var _this2 = this;

      if (!this.isMouseover) {
        var nextIndex = (this.activeIndex + 1) % this.len;
        // 修复loop属性不生效，自动播放到最后一张时如果loop属性为false则表示不自动循环，就清空定时器退出自动播放,隐藏next按钮
        if (nextIndex === 0 && !this.loop) {
          clearTimeout(this.timer);
          this.isShowNextBtn = false;
          return;
        }
        this.isShowNextBtn = true;
        this.timer = setTimeout(function () {
          _this2.next();
          _this2.autoplayHandler();
        }, this.interval);
      } else {
        this.clearTimeout();
      }
    },
    clearTimeout: function (_clearTimeout) {
      function clearTimeout() {
        return _clearTimeout.apply(this, arguments);
      }

      clearTimeout.toString = function () {
        return _clearTimeout.toString();
      };

      return clearTimeout;
    }(function () {
      this.timer && clearTimeout(this.timer);
      this.timer = null;
    }),
    next: function next() {
      if (!this.isMouseover && this.activeIndex < this.len) {
        this.move(1);
      } else {
        this.move(0);
      }
    },
    prev: function prev() {
      if (!this.isMouseover && this.activeIndex > -1) {
        this.move(-1);
      } else {
        this.move(0);
      }
    },
    move: function move(num) {
      var _this3 = this;

      if (!this.len) {
        return;
      }
      var activeIndex = this.activeIndex;
      var tempActiveIndex = activeIndex;
      activeIndex += num;
      if (activeIndex < 0 || activeIndex >= this.len) {
        if (this.loop) {
          this.activeIndex = activeIndex < 0 ? this.len - 1 : 0;
        } else {
          this.activeIndex = activeIndex = activeIndex < 0 ? 0 : this.len - 1;
        }
      } else {
        this.activeIndex = activeIndex;
      }
      this.translated(activeIndex + 1);
      if (this.activeIndex !== activeIndex) {
        setTimeout(function () {
          _this3.isTransition = false;
          _this3.$nextTick(function () {
            // 等 transition 生效
            _this3.translated(_this3.activeIndex + 1);
            setTimeout(function () {
              // 等 transform 生效
              _this3.isTransition = true;
            }, 20);
          });
        }, this.speed);
      }
      if (tempActiveIndex !== activeIndex) {
        this.$emit('change', tempActiveIndex, this.activeIndex);
      }
    },
    translated: function translated(num) {
      var dom = this.$refs.itemList;

      if (dom) {
        dom.style.transform = this.direction === 'vertical' ? 'translate3d(0, ' + -this.size * num + 'px, 0)' : 'translate3d(' + -this.size * num + 'px, 0, 0)';
      }
    },
    calcCarousel: function calcCarousel() {
      var _this4 = this;

      var items = getCarouselItems(this.$slots.default);
      var changed = !(items.length === this.len && items.every(function (item, index) {
        return isSame(item, _this4.items[index]);
      }));
      if (changed) {
        this.items = items;
        var activeIndex = this.initialIndex || 0;
        this.activeIndex = activeIndex;
        this.setActiveItem(activeIndex);
        if (this.autoplay) {
          this.clearTimeout();
          this.autoplayHandler();
        }
      }
    }
  },
  render: function render() {
    var _this5 = this;

    var h = arguments[0];
    var prefix = this.prefix,
        size = this.size,
        arrow = this.arrow,
        indicatorPosition = this.indicatorPosition,
        activeDot = this.activeDot,
        activeIndex = this.activeIndex;

    var items = this.len ? this.items.map(function (i, index) {
      var _applyProps;

      return applyProps(i, (_applyProps = {
        index: index
      }, _defineProperty(_applyProps, _this5.cssProp, size), _defineProperty(_applyProps, 'activeIndex', activeIndex), _applyProps));
    }) : [];
    var liList = [];
    var itemListStyle = {};
    if (this.len) {
      liList = _Array$from(new Array(this.len), function (val, index) {
        return index;
      });
      itemListStyle[this.cssProp] = (this.len + 2) * size + 'px';
      if (this.isTransition) {
        itemListStyle.transition = 'transform ' + this.speed / 1000 + 's ease-in-out';
      }
      var firstSlot = items[0];
      var lastSlot = items[this.len - 1];

      var firstSlotFaker = applyProps(firstSlot, {
        fake: true,
        index: -1
      });
      var lastSlotFaker = applyProps(lastSlot, {
        fake: true,
        index: this.len
      });
      firstSlotFaker.key = 'firstFaker-' + firstSlotFaker.key;
      lastSlotFaker.key = 'lastFaker-' + lastSlotFaker.key;
      items.push(firstSlotFaker);
      items.unshift(lastSlotFaker);
    }
    return h(
      'div',
      { 'class': [prefix, prefix + '-' + this.direction], ref: 'wrapper', on: {
          'mouseenter': this.handleMouseEnter,
          'mouseleave': this.handleMouseLeave
        }
      },
      [h(
        'div',
        { 'class': prefix + '-itemList-outer' },
        [h(
          'div',
          { 'class': prefix + '-itemList', style: itemListStyle, ref: 'itemList' },
          [size ? items : null]
        )]
      ), this.showArrow && h(
        'button',
        {
          'class': [prefix + '-btn', prefix + '-prev', prefix + '-' + arrow], on: {
            'click': this.handlePrevBtnClick
          }
        },
        [h('i', { 'class': this.iconPrefix('left') })]
      ), this.isShowNextBtn && this.showArrow && h(
        'button',
        {
          'class': [prefix + '-btn', prefix + '-next', prefix + '-' + arrow], on: {
            'click': this.handleNextBtnClick
          }
        },
        [h('i', { 'class': this.iconPrefix('right') })]
      ), indicatorPosition !== 'none' && h(
        'ul',
        { 'class': [prefix + '-indicator', prefix + '-' + indicatorPosition]
        },
        [liList.map(function (item) {
          return h('span', { 'class': [prefix + '-dot', _defineProperty({}, prefix + '-active-dot', activeDot === item)],
            on: {
              'click': function click() {
                return _this5.handleDotClick(item);
              }
            }
          });
        })]
      )]
    );
  }
};