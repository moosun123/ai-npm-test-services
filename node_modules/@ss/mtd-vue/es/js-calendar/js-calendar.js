import _Object$assign from 'babel-runtime/core-js/object/assign';
// calendar with 8 column x 7 rows
import dayjs from '../utils/date';
import zh from 'dayjs/locale/zh-cn';
function getMonthCalender(year, month, iteratorFn) {
  // config passed by binding
  var onlyDays = this.onlyDays;
  var weekStart = typeof this.weekStart === 'undefined' ? 1 : this.weekStart;
  var iso = weekStart === 1;
  var monthStart = dayjs(new Date(year, month, 1)).locale(_Object$assign(zh, {
    weekStart: weekStart,
    name: 'zh-cn-' + weekStart
  }));

  var calenderStart = monthStart.weekday(0);

  var cells = [];
  var result = {
    year: year,
    month: month,
    cells: cells
  };
  for (var i = 0; i < 6; i++) {
    // 6 rows
    var _weekStart = calenderStart.add(7 * i, 'd');

    var _loop = function _loop(j) {
      // 8 columns: week nr + 7 days
      var isDay = j !== 0;
      var day = isDay ? _weekStart.add(j - 1, 'd') : _weekStart;
      var weekNr = iso ? day.isoWeek() : day.week();
      var currentMonth = day.month();
      var currentYear = day.year();
      var type = function () {
        if (j === 0) return 'weekLabel';else if (currentYear < year || currentMonth < month) return 'prevMonth';else if (currentYear > year || currentMonth > month) return 'nextMonth';else return 'monthDay';
      }();
      var dayData = {
        desc: isDay ? day.date() : weekNr,
        week: weekNr,
        type: type,
        date: isDay ? day.toDate() : false,
        year: currentYear,
        index: cells.length
      };
      var data = iteratorFn ? iteratorFn(dayData) : dayData;

      if (onlyDays && isDay) cells.push(data); // add only days
      else if (!onlyDays) cells.push(data);
    };

    for (var j = 0; j < 8; j++) {
      _loop(j);
    }
  }
  return result;
}

export default function (config) {
  return getMonthCalender.bind(config);
}