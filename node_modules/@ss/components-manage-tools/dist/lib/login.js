"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.checkLogin = exports.handleLogin = void 0;
const fs = __importStar(require("fs"));
const path = __importStar(require("path"));
const log_1 = require("../util/log");
const inquirer = require('inquirer');
const questions = [
    {
        type: 'input',
        name: 'token',
        message: '请输入用户token',
        default: '',
    },
];
const homeDir = process.env['HOME'];
const deployEnv = process.env['DEPLOY_ENV'];
const configPath = deployEnv === 'test' ? path.join(homeDir, './.cmrc-test') : path.join(homeDir, './.cmrc-prod');
async function handleLogin(options) {
    let token = options.token;
    if (!token) {
        const answer = await inquirer.prompt(questions);
        token = answer.token;
    }
    fs.writeFileSync(configPath, `token: ${token}`);
    (0, log_1.successLog)('🚀token写入成功');
    process.exit(0);
}
exports.handleLogin = handleLogin;
function checkLogin() {
    if (!fs.existsSync(configPath)) {
        (0, log_1.fatalLog)('您尚未登录，请登录后再发布，命令为yarn sign');
    }
    const configContent = fs.readFileSync(configPath).toString().trim();
    if (!configContent) {
        (0, log_1.fatalLog)('登陆已失效，请重新登录，命令为yarn sign');
    }
    const configList = configContent.split(':');
    if (configList.length !== 2) {
        (0, log_1.fatalLog)('登陆已失效，请重新登录，命令为yarn sign');
    }
    const token = configList[1].trim();
    if (!token) {
        (0, log_1.fatalLog)('登陆已失效，请重新登录，命令为yarn sign');
    }
    return token;
}
exports.checkLogin = checkLogin;
