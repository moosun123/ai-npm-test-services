"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.startScreenShot = void 0;
const chalk_1 = __importDefault(require("chalk"));
const path = __importStar(require("path"));
const fs = __importStar(require("fs"));
const imagemin_1 = __importDefault(require("imagemin"));
const childProcess = __importStar(require("child_process"));
const common_1 = require("../util/common");
const killPort = require('kill-port');
async function startScreenShot(arg) {
    try {
        const { cwd, components, templates, framework = 'vue', screenShotsPrefix = './screenshots', execBuffer = 1 << 30, screenShotsPort, materialType } = arg;
        const port = screenShotsPort ? screenShotsPort : (framework === 'react' ? await (0, common_1.findReactPort)() : await (0, common_1.findPort)());
        const baseURL = `http://localhost:${port}`;
        const child = await new Promise((resolve, reject) => {
            const server = childProcess.exec(`export PORT=${port} && npm run start`, { cwd, maxBuffer: execBuffer });
            server.on('error', function (err) {
                console.log(err);
                reject(err);
            });
            server.stdout.on('data', info => {
                if (info.toString().includes(baseURL)) {
                    resolve(server);
                }
            });
        });
        const screenShotDir = path.join(cwd, screenShotsPrefix);
        if (!fs.existsSync(screenShotDir)) {
            fs.mkdirSync(screenShotDir);
        }
        if (materialType === 'componentLib') {
            for (const name of Object.values(components)) {
                const url = framework === 'vue' ? `${baseURL}/static/#/components/${name}` : `${baseURL}/#/components/${name}`;
                const output = path.join(screenShotDir, `./${name}.png`);
                await screenShot(url, framework === 'vue' ? '.screen-area' : '.node-components', output);
            }
        }
        if (materialType === 'templateLib') {
            for (let k = 0; k < templates.length; k++) {
                const template = templates[k];
                await screenShot(`${baseURL}#template/${template.url}?hidePanel=true`, '', path.join(screenShotDir, `${template.key}.png`));
            }
        }
        child.kill();
        await killPort(port, 'tcp');
    }
    catch (err) {
        console.error(err);
    }
}
exports.startScreenShot = startScreenShot;
async function screenShot(url, selector, output) {
    try {
        const puppeteer = await (0, common_1.getPuppeteer)();
        const browser = await puppeteer.launch();
        const page = await browser.newPage();
        page.setViewport({
            width: 1240,
            height: 600,
            deviceScaleFactor: 2,
        });
        await page.goto(url);
        if (selector) {
            const el = await page.$(selector);
            if (!el) {
                throw Error(`Could not find element that matches selector: ${selector}.`);
            }
            await el.screenshot({ path: output });
        }
        else {
            await page.screenshot({ path: output });
        }
        const outputDir = path.dirname(output);
        await minifyImg(output, outputDir);
        await browser.close();
        console.log(chalk_1.default.green(`Screenshot: ${output} done`));
    }
    catch (err) {
        if (err.message === 'Chromium revision is not downloaded. Run "npm install" or "yarn install"') {
            console.log(chalk_1.default.red('\n\nPuppeteer Install fail. \nPlease install puppeteer using the following commands:'));
            console.log(chalk_1.default.white('\n  npm uninstall puppeteer -g'));
            console.log(chalk_1.default.white('\n  PUPPETEER_DOWNLOAD_HOST=https://storage.googleapis.com.cnpmjs.org npm i puppeteer -g --registry=https://registry.npm.taobao.org'));
            console.log(chalk_1.default.white('\n  screenshot -u http://www.example.com\n'));
        }
        else {
            console.error(err);
        }
        process.exit(1);
    }
}
async function minifyImg(imgPath, outputDir) {
    return (0, imagemin_1.default)([imgPath], outputDir, {
        plugins: [],
    });
}
