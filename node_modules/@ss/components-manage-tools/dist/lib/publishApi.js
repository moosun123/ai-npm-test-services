"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.publishDocsApi = exports.publishLowcodeApi = exports.publishApi = void 0;
const log_1 = require("../util/log");
const login_1 = require("./login");
const constant_1 = require("../util/constant");
const fetch = require('node-fetch');
const chalk = require('chalk');
const publishApi = async (publishParams, publishType, isCreate) => {
    const token = (0, login_1.checkLogin)();
    const url = isCreate ? constant_1.createPublishUrlMap[publishType] : constant_1.publishUrlMap[publishType];
    publishParams['token'] = token;
    try {
        const value = await fetch(`${constant_1.envHost}${url}`, {
            method: 'POST',
            body: JSON.stringify(publishParams),
            headers: {
                "Content-Type": 'application/json',
            },
        });
        const res = await value.json();
        if (res.code !== 0) {
            (0, log_1.fatalLog)(res.message);
        }
        else {
            console.log(chalk.green(`组件库发布中，发布完成后将会在大象上通知您。组件库地址: ${constant_1.envHost}/astro/material/lib/${publishParams.id || publishParams.lib_id}`));
            process.exit(0);
        }
    }
    catch (e) {
        (0, log_1.fatalLog)(`register component failed: ${e}.`);
    }
};
exports.publishApi = publishApi;
const publishLowcodeApi = async (publishParams) => {
    const token = (0, login_1.checkLogin)();
    publishParams['token'] = token;
    const value = await fetch(`${constant_1.envHost}/api/publishPro/publish`, {
        method: 'POST',
        body: JSON.stringify(publishParams),
        headers: {
            'Content-Type': 'application/json',
        },
    });
    const res = await value.json();
    if (res.code !== 0) {
        (0, log_1.fatalLog)(res.message);
    }
    else {
        console.log(chalk.green(`组件库低代码平台物料发布中，发布完成后将会在大象上通知您。组件库地址: ${constant_1.envHost}/astro/material/lib/${publishParams.id}`));
        process.exit(0);
    }
};
exports.publishLowcodeApi = publishLowcodeApi;
const publishDocsApi = async (publishParams) => {
    const token = (0, login_1.checkLogin)();
    publishParams['token'] = token;
    const value = await fetch(`${constant_1.envHost}/api/publishPro/publish`, {
        method: 'POST',
        body: JSON.stringify(publishParams),
        headers: {
            'Content-Type': 'application/json',
        },
    });
    const res = await value.json();
    if (res.code !== 0) {
        (0, log_1.fatalLog)(res.message);
    }
    else {
        console.log(chalk.green(`组件库文档站发布中，发布完成后将会在大象上通知您。组件库地址: ${constant_1.envHost}/astro/material/lib/${publishParams.id}`));
        process.exit(0);
    }
};
exports.publishDocsApi = publishDocsApi;
