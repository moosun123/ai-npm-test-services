"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.getAssetContent = exports.getAssetList = void 0;
const log_1 = require("../util/log");
const constant_1 = require("../util/constant");
const fetch = require('node-fetch');
const handleParams = (params) => {
    const queryList = [];
    Object.keys(params).map((key) => {
        if (params[key]) {
            queryList.push(`${key}=${params[key]}`);
        }
    });
    return queryList.length > 0 ? queryList.join('&') : '';
};
const getAssetList = async (params) => {
    const _octo = await (0, constant_1.getSignature)();
    try {
        const query = handleParams(params);
        const value = await fetch(query ? `${constant_1.envHost}/openapi/v1/lowcode/assetList?${query}` : `${constant_1.envHost}/openapi/v1/lowcode/assetList`, {
            method: 'GET',
            headers: {
                "Content-Type": 'application/json',
                "oceanus-auth": _octo
            },
        });
        const res = await value.json();
        if (res.code !== 0) {
            (0, log_1.fatalLog)(res.message);
        }
        else {
            return res.data || {};
        }
    }
    catch (e) {
        (0, log_1.fatalLog)(`getAssetList failed: ${e}.`);
    }
};
exports.getAssetList = getAssetList;
const getAssetContent = async (params) => {
    const _octo = await (0, constant_1.getSignature)();
    try {
        const query = handleParams(params);
        const value = await fetch(query ? `${constant_1.envHost}/openapi/v1/lowcode/assetContent?${query}` : `${constant_1.envHost}/openapi/v1/lowcode/assetContent`, {
            method: 'GET',
            headers: {
                "Content-Type": 'application/json',
                "oceanus-auth": _octo
            },
        });
        const res = await value.json();
        if (res.code !== 0) {
            (0, log_1.fatalLog)(res.message);
        }
        else {
            return res.data || {};
        }
    }
    catch (e) {
        (0, log_1.fatalLog)(`getAssetContent failed: ${e}.`);
    }
};
exports.getAssetContent = getAssetContent;
