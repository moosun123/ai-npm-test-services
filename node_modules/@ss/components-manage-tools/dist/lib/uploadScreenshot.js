"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.uploadScreenShots = void 0;
const path = __importStar(require("path"));
const nanoid_1 = require("nanoid");
const bucket = 'mtd-screenshots';
const endpoint = 's3plus.vip.sankuai.com';
const tenantId = '90f1b843ded34009946a59b66198d302';
const accessKeyId = '12f67448563c41dea6187f7f765a8b3f';
const accessKeySecret = '47fe39a394934a0ca264c93eee5c551b';
const s3PrefixPath = `https://s3plus.sankuai.com/v1/mss_90f1b843ded34009946a59b66198d302`;
const prefixPath = `${s3PrefixPath}/${bucket}`;
async function uploadScreenShots(cwd, materials, screenShotsPrefix, materialType) {
    const s3plus = require('@mosfe/s3plus');
    const directoryId = (0, nanoid_1.nanoid)();
    const s3Client = new s3plus({
        accessKeyId: accessKeyId,
        accessKeySecret: accessKeySecret,
        tenantId: tenantId,
        endpoint: endpoint,
        bucket: bucket,
        customPath: directoryId,
        deployCatalog: path.join(cwd, screenShotsPrefix),
    });
    await s3Client.deploy();
    const screenshotsURL = {};
    if (materialType === 'componentLib') {
        Object.entries(materials).forEach(([component, name]) => {
            screenshotsURL[component] = `${prefixPath}/${directoryId}/${name}.png`;
        });
    }
    if (materialType === 'templateLib') {
        materials && materials.length > 0 && materials.forEach((template) => {
            screenshotsURL[template.key] = `${prefixPath}/${directoryId}/${template.key}.png`;
        });
    }
    return screenshotsURL;
}
exports.uploadScreenShots = uploadScreenShots;
