import { fatalLog } from '../util/log';
import { checkLogin } from './login';
import { publishUrlMap, createPublishUrlMap, envHost, getSignature } from '../util/constant';

const fetch = require('node-fetch');
const chalk = require('chalk');

export const publishApi = async (publishParams: any, publishType: any, isCreate?: any) => {
    const token = checkLogin();
    // const _octo = await getSignature();
    const url = isCreate ? createPublishUrlMap[publishType] : publishUrlMap[publishType];
    publishParams['token'] = token;
    try {
        const value = await fetch(`${envHost}${url}`, {
            method: 'POST',
            body: JSON.stringify(publishParams),
            headers: {
                "Content-Type": 'application/json',
                // "oceanus-auth": _octo
            },
        });
        const res = await value.json();
        if (res.code !== 0) {
            fatalLog(res.message);
        } else {
            console.log(
                chalk.green(
                    `组件库发布中，发布完成后将会在大象上通知您。组件库地址: ${envHost}/astro/material/lib/${publishParams.id || publishParams.lib_id}`,
                ),
            );
            process.exit(0);
        }
    } catch (e: any) {
        fatalLog(`register component failed: ${e}.`)
    }
}

export const publishLowcodeApi = async (publishParams: any) => {
    const token = checkLogin();
    publishParams['token'] = token;
    const value = await fetch(`${envHost}/api/publishPro/publish`, {
        method: 'POST',
        body: JSON.stringify(publishParams),
        headers: {
            'Content-Type': 'application/json',
        },
    });
    const res = await value.json();
    if (res.code !== 0) {
        fatalLog(res.message);
    } else {
        console.log(
            chalk.green(
                `组件库低代码平台物料发布中，发布完成后将会在大象上通知您。组件库地址: ${envHost}/astro/material/lib/${
                    publishParams.id
                }`,
            ),
        );
        process.exit(0);
    }
}

export const publishDocsApi = async (publishParams: any) => {
    const token = checkLogin();
    publishParams['token'] = token;
    const value = await fetch(`${envHost}/api/publishPro/publish`, {
        method: 'POST',
        body: JSON.stringify(publishParams),
        headers: {
            'Content-Type': 'application/json',
        },
    });
    const res = await value.json();
    if (res.code !== 0) {
        fatalLog(res.message);
    } else {
        console.log(
            chalk.green(
                `组件库文档站发布中，发布完成后将会在大象上通知您。组件库地址: ${envHost}/astro/material/lib/${
                    publishParams.id
                }`,
            ),
        );
        process.exit(0);
    }
}