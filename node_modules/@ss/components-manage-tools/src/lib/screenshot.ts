import chalk from 'chalk';
import * as path from 'path';
import * as fs from 'fs';
import imageMin from 'imagemin';
import * as childProcess from 'child_process';
import { getPuppeteer, findPort, findReactPort } from '../util/common';

const killPort = require('kill-port');

interface ScreenShotPayload {
    cwd: string;
    framework?: string;
    components: any;
    templates: any;
    selector?: string;
    screenShotsPrefix: any;
    execBuffer: any;
    screenShotsPort?: any;
    materialType: any;
}

export async function startScreenShot(arg: ScreenShotPayload) {
    try {
        const { cwd, components, templates, framework = 'vue', screenShotsPrefix = './screenshots', execBuffer = 1 << 30, screenShotsPort, materialType } = arg;
        const port = screenShotsPort ? screenShotsPort : (framework === 'react' ? await findReactPort() : await findPort());
        const baseURL = `http://localhost:${port}`;
        const child: childProcess.ChildProcess = await new Promise((resolve, reject) => {
            const server = childProcess.exec(`export PORT=${port} && npm run start`, { cwd, maxBuffer: execBuffer });
            server.on('error', function (err) {
                console.log(err);
                reject(err);
            });
            server.stdout.on('data', info => {
                if (info.toString().includes(baseURL)) {
                    resolve(server);
                }
            });
        });
        const screenShotDir = path.join(cwd, screenShotsPrefix);
        if (!fs.existsSync(screenShotDir)) {
            fs.mkdirSync(screenShotDir);
        }
        if (materialType === 'componentLib') {
            for (const name of Object.values(components)) {
                const url =
                    framework === 'vue' ? `${baseURL}/static/#/components/${name}` : `${baseURL}/#/components/${name}`;
                const output = path.join(screenShotDir, `./${name}.png`);
                await screenShot(url, framework === 'vue' ? '.screen-area' : '.node-components', output);
            }
        }
        if (materialType === 'templateLib') {
            for (let k = 0; k < templates.length; k++) {
                const template = templates[k]
                await screenShot(`${baseURL}#template/${template.url}?hidePanel=true`, '', path.join(screenShotDir, `${template.key}.png`))
            }
        }
        child.kill();
        await killPort(port, 'tcp');
    } catch (err) {
        console.error(err);
        // process.exit(1);
    }
}

/**
 * take a screen shot of web page
 *
 * @param {string} url the target url
 * @param {string} selector screen shot target CSS selector
 * @param {string} output output path
 */
async function screenShot(url, selector, output) {
    // a terminal spinner

    try {
        const puppeteer = await getPuppeteer();

        // start puppeteer
        const browser = await puppeteer.launch();

        // create a new page
        const page = await browser.newPage();

        // set page's viewport
        page.setViewport({
            width: 1240,
            height: 600,
            deviceScaleFactor: 2,
        });

        // visit the target url
        await page.goto(url);

        // screen shot a element through CSS selector;
        if (selector) {
            const el = await page.$(selector);

            if (!el) {
                throw Error(`Could not find element that matches selector: ${selector}.`);
            }

            await el.screenshot({ path: output });
        } else {
            // screen shot full page
            await page.screenshot({ path: output });
        }

        const outputDir = path.dirname(output);
        // minify screen shot
        await minifyImg(output, outputDir);

        // close chromium
        await browser.close();

        console.log(chalk.green(`Screenshot: ${output} done`));
    } catch (err) {
        // chromium not download error
        // stdout reinstall puppeteer tips.
        if (err.message === 'Chromium revision is not downloaded. Run "npm install" or "yarn install"') {
            console.log(
                chalk.red('\n\nPuppeteer Install fail. \nPlease install puppeteer using the following commands:'),
            );
            console.log(chalk.white('\n  npm uninstall puppeteer -g'));
            console.log(
                chalk.white(
                    '\n  PUPPETEER_DOWNLOAD_HOST=https://storage.googleapis.com.cnpmjs.org npm i puppeteer -g --registry=https://registry.npm.taobao.org',
                ),
            );
            console.log(chalk.white('\n  screenshot -u http://www.example.com\n'));
        } else {
            console.error(err);
        }
        process.exit(1);
    }
}

async function minifyImg(imgPath: string, outputDir: string) {
    return imageMin([imgPath], outputDir, {
        plugins: [],
    });
}
