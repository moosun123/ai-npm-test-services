
import { initTimeDate } from '../../../../utils/date';
import {
  HolidayCalendarRange
} from '../../../../utils/specialDayRange';
export default {
  props: {
    showTime: {
      type: Boolean,
      default: false,
    },
    format: {
      type: String,
    },
    workCellIcon: {
      type: Boolean,
      default: false,
    },
    selectionMode: {
      type: String,
      validator (value) {
        return ['year', 'halfyear', 'month', 'date', 'time', 'quarter', 'holiday'].indexOf(value) > -1;
      },
      default: 'date',
    },
    holidays: {
      type: Object,
    },
    shortcuts: {
      type: Array,
      default: () => [],
    },
    disabledDate: {
      type: Function,
      default: () => false,
    },
    value: {
      type: Array,
      default: () => [initTimeDate(), initTimeDate()],
    },
    timePlace: {
      type: String,
      default: 'default',
    },
    timePickerOptions: {
      default: () => ({}),
      type: Object,
    },
    showWeekNumbers: {
      type: Boolean,
      default: false,
    },
    startDate: {
      type: Date,
    },
    pickerType: {
      type: String,
      required: true,
    },
    isoWeek: {
      type: Boolean,
      default: false,
    },
    focusedDate: {
      type: Date,
      required: true,
    },
    visible: Boolean,
    weekStart: {
      type: Number,
    },
    weekYearFirstStart: {
      type: Boolean,
      default: true,
    },
  },
  computed: {
    holidaysData() {
      let holidays = HolidayCalendarRange;
      if (this.holidays && this.holidays.details) {
        holidays = this.holidays;
      }
      return holidays;
    },
    firstYear() {
      const data = Object.keys(this.holidaysData.details).sort((a, b) => a - b);
      return Number(data[0]);
    },
    lastYear() {
      const data = Object.keys(this.holidaysData.details).sort((a, b) => a - b);
      return Number(data[data.length - 1]);
    },
  },
  methods: {
    handleToggleTime () {
      this.currentView = this.currentView === 'time' ? 'date' : 'time';
    },
  },
};
