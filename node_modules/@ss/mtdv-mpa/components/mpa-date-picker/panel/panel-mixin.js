import { CONFIG_PROVIDER,
  getPrefixCls,
} from './../../../utils/config';
import {
  getDatesInRange
} from './../../../utils/date';
import dayjs from 'dayjs';

export default {
  props: {
    confirm: {
      type: Boolean,
      default: false,
    },
    showBtnNow: Boolean,
  },
  inject: {
    config: {
      from: CONFIG_PROVIDER,
      default: {
        getPrefixCls,
      },
    },
  },
  computed: {
    prefix () {
      return this.config.getPrefixCls('date-picker');
    },
    panelPrefix () {
      return this.config.getPrefixCls('picker-panel');
    },
  },
  methods: {
    iconBtnCls (direction, type = '') {
      const { prefix, panelPrefix } = this;
      return [
        `${panelPrefix}-icon-btn`,
        `${prefix}-${direction}-btn`,
        `${prefix}-${direction}-btn-arrow${type}`,
      ];
    },
    handleShortcutClick (shortcut) {
      if (shortcut.value) {
        this.$emit('pick', shortcut.value());
      }
      if (shortcut.onClick) shortcut.onClick(this);
    },
    handleholidayCutClick (shortcut, notAllowClick) {
      if (!notAllowClick) {
        if (shortcut.value) {
          this.$emit('pick', shortcut.value());
        }
        if (shortcut.onClick) shortcut.onClick(this);
        if (typeof shortcut === 'string') {
          // 取 endDate 判断当前是哪年
          const labelYear = parseInt(this.leftDatePanelLabel.labels[0].label.match(/\d+/)[0]);
          const currentYear = this.holidaysData['details'][labelYear] || {};
          let holidayList = [];
          for (const i of Object.keys(currentYear)) {
            const d1 = new Date(currentYear[i].dates[0]);
            const d2 = new Date(currentYear[i].dates[1]);
            const range = this.holidaysData['range'][i] && this.holidaysData['range'][i][0] || 0;
            const range2 = this.holidaysData['range'][i] && this.holidaysData['range'][i][1] || 0;
            if (currentYear[i].isHoliday) {
              holidayList = holidayList.concat(getDatesInRange(dayjs(d1).add(range, 'd'), dayjs(d2).add(range2, 'd')));
            }
          }
          let date;
          let date2;
          if (currentYear[shortcut]) {
            date = new Date(currentYear[shortcut].dates[0]);
            date2 = new Date(currentYear[shortcut].dates[1]);
          }
          this.$emit('pick', [date, date2], true);
          this.activeHoliday = shortcut;
        }
      }
    },
    handlePickClickNow () {
      this.resetView();
      this.$emit('pick-click-now');
    },
    handlePickSuccess () {
      this.resetView();
      this.$emit('pick-success');
    },
    resetView () {
      setTimeout(
        () => { this.currentView = this.selectionMode; },
        500, // 500ms so the dropdown can close before changing
      );
    },
    handleClear () {
      this.dates = this.dates.map(() => null);
      this.rangeState = {};
      this.$emit('pick', this.dates);
      this.handleConfirm();
    },
    handleConfirm (visible, type) {
      this.$emit('pick', this.dates, visible, type || this.type);
    },
    onToggleVisibility (open) {
      const {timeSpinner, timeSpinnerEnd} = this.$refs;
      if (open && timeSpinner) timeSpinner.updateScroll();
      if (open && timeSpinnerEnd) timeSpinnerEnd.updateScroll();
    },
  },
};
