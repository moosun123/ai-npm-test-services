import {
    ICustomOptionItem,
    SelectedValueItem,
    SelectedValueList,
    ICustomObject,
} from '../types';

import { pinyin } from 'pinyin-pro';

import {
    SPECIAL_REGION_CITY_CODE,
    MUNICIPALITY_VALUES,
    VIRTUAL_PROVINCE_VALUES,
} from '../constants';

export const updateNodeStatus = (node: ICustomOptionItem, active = false) => {
    const { children } = node;
    node.active = active;
    if (children) {
        children.forEach((child: ICustomOptionItem) => {
            updateNodeStatus(child, active);
        });
    }
};

const isAlphabet = (str: string) => {
    return /^[a-zA-Z]+$/.test(str);
};

export const isValueNode = (str: string) => {
    return isAlphabet(str) || VIRTUAL_PROVINCE_VALUES.includes(str);
};

// 查找符合条件的子树（同级节点中只返回符合条件的节点）
export const filterSearchTree = (
    tree: ICustomOptionItem[],
    filterFunc: (para: ICustomOptionItem) => boolean,
    stopFunc?: (para: ICustomOptionItem) => boolean,
    specialFilter: boolean = false
) => {
    if (tree) {
        tree = JSON.parse(JSON.stringify(tree));
        // 当子节点全部选中时，返回父节点选中项
        if (stopFunc && tree.every(stopFunc) && !specialFilter) {
            return [];
        }
    }
    if (!tree || tree.length === 0) {
        return [];
    }
    const newChildren: ICustomOptionItem[] = [];
    tree.forEach((node: ICustomOptionItem) => {
        const { children } = node;
        // value是字母的，或者value是直辖市、港澳的，最终结果中过滤掉这些节点
        const specialFilter: boolean = isValueNode(node.value);
        const subs: ICustomOptionItem[] = filterSearchTree(
            children as ICustomOptionItem[],
            filterFunc,
            stopFunc,
            specialFilter
        );
        if ((subs && subs.length) || filterFunc(node)) {
            node.children = subs || [];
            if (specialFilter) {
                node.children.forEach((child: ICustomOptionItem) => {
                    newChildren.push(child);
                });
            } else {
                newChildren.push(node);
            }
        }
    });
    return newChildren.length ? newChildren : [];
};

// 数转换成二维数组
export const treeToMatrix = (tree: ICustomOptionItem[], key?: string) => {
    const result: SelectedValueList = [];
    const getPath = (node: ICustomObject, res: any) => {
        if (key) {
            res.push(node[key]);
        } else {
            res.push(node);
        }
        const { children } = node;
        if (children && children.length > 0) {
            children.forEach((item: ICustomOptionItem) =>
                getPath(item, [...res])
            );
        } else {
            result.push(res);
        }
    };
    tree.forEach((node: ICustomOptionItem) => getPath(node, []));
    return result;
};

// 根据路径获取节点列表
export const getTreeByPath = (
    arr: ICustomOptionItem[],
    value: SelectedValueItem
) => {
    // value是字母的，或者value是直辖市、港澳的，直接遍历其children组成的list
    let target: ICustomOptionItem[] = arr;
    const flag: boolean = target.some((item: ICustomOptionItem) =>
        isValueNode(item.value)
    );
    if (flag) {
        target = [];
        arr.forEach((item: ICustomOptionItem) => {
            target.push(...(item.children as ICustomOptionItem[]));
        });
    }
    let matched: boolean = true;
    const result: ICustomOptionItem[] = [];
    for (let i = 0, len = value.length; i < len && target; i++) {
        const n: ICustomOptionItem = target.find(
            (item: ICustomOptionItem) => item.value === value[i]
        ) as ICustomOptionItem;
        if (!n) {
            matched = false;
            break;
        }
        result[i] = n;
        n.active = true;
        target = n.children as ICustomOptionItem[];
    }
    return { result, matched };
};

// 计算首字母
const getNodeWithLetter = (node: ICustomOptionItem) => {
    node.firstLetter = pinyin(node.label.charAt(0), {
        pattern: 'first',
        toneType: 'none',
    }).toUpperCase();
    let { children } = node;
    if (children && children.length) {
        children = children.map(getNodeWithLetter);
    }
    return node;
};

const refreshCityListByLetter = (
    result: ICustomOptionItem[],
    city: ICustomOptionItem
) => {
    const { firstLetter } = city;
    const currentCity: ICustomOptionItem = result.find(
        (c: ICustomOptionItem) => c.value === firstLetter
    ) as ICustomOptionItem;
    if (currentCity) {
        (currentCity.children as ICustomOptionItem[]).push(city);
    } else {
        result.push({
            label: firstLetter as string,
            value: firstLetter as string,
            children: [city],
        });
    }
};

// 获取城市音序列表
export const getCityByLetter = (data: ICustomOptionItem[]) => {
    const cityList: ICustomOptionItem[] = [];
    data.map(getNodeWithLetter).forEach((city: ICustomOptionItem) => {
        refreshCityListByLetter(cityList, city);
    });
    cityList.sort(
        (a: ICustomOptionItem, b: ICustomOptionItem) =>
            a.value.charCodeAt(0) - b.value.charCodeAt(0)
    );
    return cityList;
};

// 获取省份音序列表
export const getProvinceByLetter = (data: ICustomOptionItem[]) => {
    const provinceList: ICustomOptionItem[] = [];
    data.map(getNodeWithLetter).forEach((province: ICustomOptionItem) => {
        provinceList.push(province);
    });
    provinceList.sort(
        (a: ICustomOptionItem, b: ICustomOptionItem) =>
            (a.firstLetter as string).charCodeAt(0) -
            (b.firstLetter as string).charCodeAt(0)
    );
    return provinceList;
};

// 处理兜底数据（得到省份音序列表、城市音序列表）
export const getDataByLetter = (data: ICustomOptionItem[]) => {
    const directList: ICustomOptionItem = {
        label: VIRTUAL_PROVINCE_VALUES[0],
        value: VIRTUAL_PROVINCE_VALUES[0],
        children: [],
    };
    const specialList: ICustomOptionItem = {
        label: VIRTUAL_PROVINCE_VALUES[1],
        value: VIRTUAL_PROVINCE_VALUES[1],
        children: [],
    };
    const cityList: ICustomOptionItem[] = [];
    const provinceList: ICustomOptionItem[] = [];
    data.map(getNodeWithLetter).forEach((item: ICustomOptionItem) => {
        // 省份数据
        if (SPECIAL_REGION_CITY_CODE.includes(item.cityCode as string)) {
            (specialList.children as ICustomOptionItem[]).push(item);
        } else if (MUNICIPALITY_VALUES.includes(item.value)) {
            (directList.children as ICustomOptionItem[]).push(
                (item.children as ICustomOptionItem[])[0]
            );
        } else {
            provinceList.push(item);
        }

        // 城市数据
        const { children } = item;
        if (children && children.length) {
            children.forEach((child: ICustomOptionItem) => {
                refreshCityListByLetter(cityList, child);
            });
        }
    });
    cityList.sort(
        (a: ICustomOptionItem, b: ICustomOptionItem) =>
            a.value.charCodeAt(0) - b.value.charCodeAt(0)
    );
    provinceList.sort(
        (a: ICustomOptionItem, b: ICustomOptionItem) =>
            (a.firstLetter as string).charCodeAt(0) -
            (b.firstLetter as string).charCodeAt(0)
    );
    // 单独处理直辖市数据和港澳数据
    provinceList.unshift(directList);
    provinceList.push(specialList);
    return {
        cityList,
        provinceList,
    };
};
