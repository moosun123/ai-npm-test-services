/**
 * Created by dongchunhai on 6/5/20.
 */
import axios, { AxiosInstance, AxiosResponse, AxiosRequestConfig } from "axios";
import { DEFAULT_SC_ACCESS_CONFIG, PROXY_PATH, LOGIN_COUNTER } from "./config/const";
import { ScConfig } from "./types";
// import qs from "qs";
import { loginIframe } from "./util/iframe_util";
import { localHostTips } from "./util/local_tips";

let requestEvents: any[] = [];
let isLogining: boolean = false;
let loginCounter: number = LOGIN_COUNTER;
let loginTimestamp: number = +new Date();
let isShowLoginConfirm: boolean = false;
let accessToken: string = '';
const testClient = '7c4be9d597';
const prodClient = 'c0cd718bba';
// 本地开发环境
const isLocal = (window.location.host.includes('localhost') ||
window.location.host.includes('127.0.0.1'));

// 清除登陆login状态
function clearLoginStatus() {
  isLogining = false;
  isShowLoginConfirm = false;
}

export function axiosSet(configs: ScConfig): AxiosInstance {
  // configs.accessEnv 访问环境 production, test，默认为 production
  // 网络环境：内外网
  const netEnv = (configs.accessEnv === "production" && configs.netEnv === "out") ?
    ((window.location.host.includes('meituan.com') && !((configs.version as number) > 0)) ? "_out_mt" : "_out_sk") : "";
  // 除test外，st和线上均用线上sso
  const ssoidName = configs.netEnv === 'test'
                 ? `sc_${testClient}_ssoid` 
                 : `sc_${prodClient}_ssoid`;

  const _loginUrl = `loginUrl${netEnv}`;
  const _loginOrigin = `loginOrigin${netEnv}`;
  const _apiHost = `apiHost${netEnv}`;
  const accessConfig = DEFAULT_SC_ACCESS_CONFIG[configs.accessEnv];

  const loginUrl: string = `${accessConfig[_loginUrl]}?origin=${window.location.origin}`;
  let fetch: AxiosInstance;

  configs.loginImmediately && loginIframe(loginUrl, netEnv, loginTimestamp, configs).send().then((event: any) => {
    accessToken = event.data.token;
    localStorage.setItem(`${ssoidName}`, event.data.token);
  });
  fetch = axios.create({
    baseURL: `${accessConfig.http[_apiHost]}/${PROXY_PATH}`,
    timeout: 60000,
    // withCredentials: true,
    // withCredentials: isShowLoginConfirm, // 本地开发环境使用cookie，非本地开发环境使用access-token
    headers: {
      "Content-Type": "application/json",
      "X-Requested-With": "XMLHttpRequest",
      "X-Sc-Component-Id": configs.componentId,
      "X-Sc-Access-Env": configs.accessEnv,
    },
    responseType: configs.responseType || "json"
  });

  fetch.interceptors.request.use((config: AxiosRequestConfig) => {
    if (
      config.method === "post" ||
      config.method === "put" ||
      config.method === "delete"
    ) {
      // 序列化
      if (config.data instanceof FormData) {
        config.headers["Content-Type"] = "application/x-www-form-urlencoded";
      } else {
        // config.data = qs.parse(config.data);
      }
    }

    config.headers["access-token"] = localStorage.getItem(`${ssoidName}`) || `${accessToken}`;

    return config;
  });

  fetch.interceptors.response.use(
    (res: AxiosResponse) => {
      const data = res.data;
      const config: any = res.config || {};

      if (!data) {
        console.error(`error: 接口异常，返回体data为空`);
        return Promise.reject(data);
      }
      // 根据 action 判断为新处理逻辑，根据 status 判断为老逻辑，老逻辑有待修改下线
      if (data.action === 'callReloginBySC' || data.status == 401) {
        localStorage.removeItem(`${ssoidName}`);
        // 登录信息失效，请求失败
        if (!isLogining) { // 未登陆，则开始登陆
          // 登陆次数最大限制
          if (--loginCounter < 0) { return Promise.reject(data); }
          isLogining = true;
          // 定时清除login状态
          setTimeout(() => { clearLoginStatus() }, 1000);
          // 增加本地环境提示登陆逻辑start
          // 1s内只允许弹出一个confim框
          if ((configs.accessEnv === 'test') && isLocal && !accessToken && !isShowLoginConfirm) {
            // 本地开发环境
            isShowLoginConfirm = true;
            // const openTimestamp = +new Date();
            // return localHostTips(accessConfig[_loginUrl], accessConfig[_loginOrigin], location.origin, openTimestamp).then((event: any) => {
            return localHostTips({
              loginUrl: accessConfig[_loginUrl],
              loginOrigin: accessConfig[_loginOrigin]
            }).then((event: any) => {
              accessToken = event.data.token;
              localStorage.setItem(`${ssoidName}`, event.data.token);
              requestEvents.forEach((fn: Function) => {
                fn(config);
              });
              requestEvents = [];
              return fetch(config);
            });
          }
          // 增加本地环境提示登陆逻辑end
          // 更新时间戳
          loginTimestamp = +new Date();
          return loginIframe(loginUrl, netEnv, loginTimestamp, configs).send().then((event: any) => {
            accessToken = event.data.token;
            localStorage.setItem(`${ssoidName}`, event.data.token);
            requestEvents.forEach((fn: Function) => {
              fn(config);
            });
            requestEvents = [];
            clearLoginStatus();
            return fetch(config);
          }, () => {
            return Promise.reject(data);
          });
        } else {
          // 正在登陆中，同时发起的多个请求，放进requestEvents中
          return new Promise((resolve) => {
            requestEvents.push(() => {
              resolve(fetch(config));
            });
          });
        }
      }
      loginCounter = LOGIN_COUNTER;
      return res;
    },
    (error: any) => {
      console.error("请求出错了: ", error.message);
      return Promise.reject(error);
    }
  );

  return fetch;
}
