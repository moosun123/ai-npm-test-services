import { AxiosInstance } from "axios";
import { axiosSet } from "./axios";
import { ScConfig } from "./types";

const envOptions = ["test","staging","production"];

interface SCModel {
  init(): void;
}

class SC implements SCModel {
  // public projectId: string;
  public fetch: AxiosInstance;
  public instanceMap: Map<any, SC>;

  constructor(configs: ScConfig) {
    // super(configs.projectId);
    this.instanceMap = new Map();
    if(!envOptions.includes(configs.accessEnv)) {
      configs.accessEnv = envOptions[0];
      console.warn("accessEnv值缺少，参数的可选值为：production staging test，默认为test");
    }
    // 初始化fetch
    if(configs.componentId) {
      this.fetch = axiosSet(configs);
    } else {
      console.error(new Error('sc-web初始化缺少必须参数: componentId'));
    }
  }

  init() {}

  getChildInstance(configs) {
    const key = configs.componentId;
    let instance = this.instanceMap.get(key);
    if (!instance) {
      instance = new SC(configs)
      this.instanceMap.set(key, instance);
    }
    return instance;
  }

  setChildInstance(key: any, val: SC) {
    this.instanceMap.set(key, val);
  }
}

// let scInstance: SC;
// 导出单例 sc
export default function singletonWrapper(configs: ScConfig): SC {
  // if (!scInstance) {
  //   scInstance = new SC(configs);
  //   if (configs.hasOwnProperty('componentId')) {
  //     scInstance.setChildInstance(configs.componentId, scInstance);
  //   }
  // } else {
  //   // 创建子实例
  //   if (configs.componentId) {
  //     return scInstance.getChildInstance(configs);
  //   }
  // }

  // return scInstance;
  return new SC(configs);
}
