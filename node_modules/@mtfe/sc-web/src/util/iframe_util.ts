/**
 * Created by dongchunhai on 6/5/20.
 */
import { DEFAULT_SC_ACCESS_CONFIG, IFRAME_ID, LOGIN_TIMEOUT, LOGIN_THROTTLE_TIME } from "../config/const";
import { ScConfig } from "../types";

// 动态构造不可见iframe登陆sso
function createIframe(src: string, timestamp: string, timerId: string, onlyLogin: string) {
  const iframe: HTMLIFrameElement = document.createElement("iframe");
  iframe.src = src;
  iframe.id = IFRAME_ID;
  iframe.width = "0";
  iframe.height = "0";
  iframe.frameBorder = "0";
  iframe.setAttribute("timestamp", timestamp);
  iframe.setAttribute("timer-id", timerId);
  iframe.setAttribute("only-login", onlyLogin);
  document.body.appendChild(iframe);
  return iframe;
}

class LoginIframe {
  // private iframe: HTMLIFrameElement;
  private src: string;
  private env: string;
  private netEnv: string;
  private timestamp: number;
  private onlyLogin: boolean | undefined;
  private timer: ReturnType<typeof setTimeout>;
  constructor(
    src: string,
    netEnv: string,
    timestamp: number,
    configs?: ScConfig
  ){
    this.src = src;
    this.env = (configs as ScConfig).accessEnv;
    this.netEnv = netEnv;
    this.timestamp = timestamp;
    this.onlyLogin = (configs as ScConfig).loginImmediately;
  }

  public send() { // 创建iframe去登陆 sc
    return new Promise((resolve, reject) => {
      this.timer && clearTimeout(this.timer);
      this.timer = setTimeout(() => {
        const iframe = this.getIframe();
        if (iframe && iframe.getAttribute('only-login') === '0') {
          reject();
        }
        this.clear();
      }, LOGIN_TIMEOUT);

      this.setIframe();
      // 添加sc-web内的监听事件
      // !this.onlyLogin && window.addEventListener(
      window.addEventListener(
        "message",
        (event: any) => {
          const origin = event.origin || event.originalEvent.origin;
          if (origin !== DEFAULT_SC_ACCESS_CONFIG[this.env][`loginOrigin${this.netEnv}`]
              || event.data.timestamp != this.timestamp) return;
          if (event.data.code === 200) {
            resolve(event);
          } else {
            console.error('登陆sc失败，请检查是否已登陆sso');
            reject();
          }
          this.clear();
        },
        false
      );
    });
  }

  private setIframe() {
    const iframe = this.getIframe();
    if(iframe) {
      const now = +new Date();
      // 限流，防止多个组件同时登陆时创建多个iframe
      if (this.onlyLogin && (now - Number(iframe.getAttribute("timestamp")) < LOGIN_THROTTLE_TIME)) {
        return;
      } else if (iframe.getAttribute('only-login') === '1' && (now - Number(iframe.getAttribute("timestamp")) < LOGIN_TIMEOUT)) {
        // 已有纯登陆iframe，且时间戳 < 登陆超时时间，将ajax请求时间戳改为iframe时间戳，以便使用iframe的message消息
        this.timestamp = Number(iframe.getAttribute("timestamp"));
        return;
      } else {
        this.clear();
      }
      // if(iframe.getAttribute('only-login') === '0') {
      //   console.log('*************')
      //   // 在非纯登陆情况下新建iframe时清除旧iframe
      //   this.clear();
      // }
    }
    const onlyLogin = this.onlyLogin ? 1 : 0;
    createIframe(`${this.src}&timestamp=${this.timestamp}`, `${this.timestamp}`, `${this.timer}`, `${onlyLogin}`);
  }

  private getIframe() {
    const iframe = document.getElementById(`${IFRAME_ID}`) as HTMLIFrameElement;
    return iframe;
  }

  clear() {
    // 如果有login-iframe，则清除
    const iframe = this.getIframe();
    let timerId: string | null = null;
    if (iframe) {
      timerId = iframe.getAttribute("timer-id");
      iframe.parentNode && iframe.parentNode.removeChild(iframe);
    }
    timerId && clearTimeout(Number(timerId));
  }
}

export function loginIframe(src: string, netEnv: string, timestamp: number, configs?: ScConfig) {
  return new LoginIframe(src, netEnv, timestamp, configs);
}
