"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
/**
 * @Desc
 * @Author leon <leondwong@gmail.com>
 * @Date 8/2/18
 */
var minimatch_1 = __importDefault(require("minimatch"));
var Logger = /** @class */ (function () {
    function Logger(name) {
        this.moduleName = name;
    }
    Logger.prototype.log = function () {
        var args = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            args[_i] = arguments[_i];
        }
        console.log.apply(console, ["[LOG] " + this.moduleName + " - "].concat(args));
    };
    Logger.prototype.warn = function () {
        var args = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            args[_i] = arguments[_i];
        }
        console.warn.apply(console, ["[WARN] " + this.moduleName + " - "].concat(args));
    };
    Logger.prototype.error = function () {
        var args = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            args[_i] = arguments[_i];
        }
        console.error.apply(console, ["[ERROR] " + this.moduleName + " - "].concat(args));
    };
    return Logger;
}());
exports.Logger = Logger;
var Url = /** @class */ (function () {
    function Url() {
    }
    Url.prototype.getSearchString = function (name) {
        var reg = new RegExp("(/?|&)" + name + "=([^&]*)(&|$)", 'i');
        var url = location.href.split(location.host).splice(1).join(location.host);
        var result = url.match(reg);
        if (result != null) {
            /*  IMPORTANT!!
                sso异地部署版本后,code格式修改,其内容会有百分号
                web sdk获取到code后在这里decodeURIComponent,导致换取token时用的code参数被修改,后端异常
                与后端协商后,后端对pcke换token接口特别处理,而前端这里要保留decodeURICompoent操作
            */
            return decodeURIComponent(result[2]);
        }
        return null;
    };
    Url.prototype.getReqPath = function (href, origin, prefix) {
        if (prefix === void 0) { prefix = ''; }
        return href.replace(origin, '').replace(prefix, '');
    };
    return Url;
}());
exports.urlObj = new Url();
// support java ant style matcher by minimatch
exports.whiteListAndBlackListCheck = function (url, whiteLists, includeUrlList) {
    if (whiteLists === void 0) { whiteLists = []; }
    if (includeUrlList === void 0) { includeUrlList = []; }
    // if (typeof whiteLists === 'function') return whiteLists(url);
    if (includeUrlList && includeUrlList.length > 0)
        return !includeUrlList.some(function (il) { return minimatch_1.default(url, il); });
    // avoid null
    if (!whiteLists)
        whiteLists = [];
    return whiteLists.some(function (wl) { return minimatch_1.default(url, wl); });
};
/**
 * check original url for not allow schema
 *
 * @param {string} url - original url
 * */
exports.hasSchema = function (url) {
    var schemaReg = /^(http|https|ftp):/;
    var noSchemaReg = /^(\/|\\)(\/|\\)/;
    return schemaReg.test(url) || noSchemaReg.test(url);
};
/**
 * 获取浏览器的版本--仅大版本
 * Chrome
 */
exports.getBrowserVersion = function (browser) {
    var userAgent = navigator.userAgent.toLowerCase();
    var returnObj = {};
    if (userAgent.indexOf("chrome") > -1 && userAgent.indexOf("safari") > -1) {
        returnObj['chrome'] = parseInt(userAgent.match(/chrome\/([\d.]+)/)[1], 10);
    }
    return browser ? returnObj[browser] : returnObj;
};
//# sourceMappingURL=common_util.js.map