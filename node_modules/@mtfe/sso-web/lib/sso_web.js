"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
/**
 * @Desc
 * @Author leon <leondwong@gmail.com>
 * @Date 6/13/18
 */
require("whatwg-fetch");
var const_1 = require("./config/const");
var config_client_1 = require("./config_client");
var common_util_1 = require("./util/common_util");
var en_GB_1 = __importDefault(require("./locale/en_GB"));
var rest_client_1 = require("./rest_client");
var storage_1 = require("./storage");
var store_util_1 = require("./util/store_util");
var crypto_util_1 = require("./util/crypto_util");
var SHOULD_NO_SCHEMA_IN_ORIGINAL_URL = en_GB_1.default.SHOULD_NO_SCHEMA_IN_ORIGINAL_URL, ORIGINAL_URL_LOST = en_GB_1.default.ORIGINAL_URL_LOST, PROTOCOL_UNDEFINED = en_GB_1.default.PROTOCOL_UNDEFINED, STATE_ERROR = en_GB_1.default.STATE_ERROR;
var SSOWeb = /** @class */ (function () {
    function SSOWeb(configs) {
        var clientId = configs.clientId, accessEnv = configs.accessEnv;
        this.clientId = clientId;
        this.accessEnv = accessEnv;
        this.configClient = new config_client_1.ConfigClient(configs);
        this.isInitial = false;
    }
    SSOWeb.prototype.init = function () {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.configClient.init()];
                    case 1:
                        _a.sent();
                        return [4 /*yield*/, this.initConfig(this.configClient.getConfig())];
                    case 2:
                        _a.sent();
                        // defined logger at very beginning, for tracking all log
                        this.logger = new common_util_1.Logger('SSOClient');
                        return [2 /*return*/];
                }
            });
        });
    };
    SSOWeb.prototype.initConfig = function (_a) {
        var clientId = _a.clientId, logoutUri = _a.logoutUri, loginUrl = _a.loginUrl, rewriteLocation = _a.rewriteLocation, schema = _a.schema, sameSite = _a.sameSite, isDebug = _a.isDebug, excludedUriList = _a.excludedUriList, includedUriList = _a.includedUriList, openApiHost = _a.openApiHost, ssoSvHost = _a.ssoSvHost, callbackUrl = _a.callbackUrl;
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_b) {
                this.logoutUrl = logoutUri || const_1.SSO_SPECIAL_ROUTE.logoutUrl;
                this.callbackUrl = callbackUrl || const_1.SSO_SPECIAL_ROUTE.callbackUrl;
                this.loginUrl = loginUrl;
                this.SSO_URL = {
                    SSO_API_URL: openApiHost,
                    SSO_LOGIN_URL: ssoSvHost,
                };
                this.isInitial = true;
                // correct path: /path/ , /path , path/ , path => /path
                this.rewriteLocation = rewriteLocation ? '/' + rewriteLocation.replace(/^\/+/, '').replace(/\/+$/, '') : ''; // avoid null
                this.schema = schema && schema.slice(-1) !== ':' ? schema + ":" : schema;
                this.sameSite = sameSite !== false;
                this.isDebug = isDebug === true; //默认为false
                this.excludedUriList =
                    excludedUriList && excludedUriList.length > 0
                        ? excludedUriList.split(',')
                        : excludedUriList;
                this.includedUriList =
                    includedUriList && includedUriList.length > 0
                        ? includedUriList.split(',')
                        : includedUriList;
                this.client = new rest_client_1.RestClient({
                    apiUrlLogin: this.SSO_URL.SSO_LOGIN_URL,
                    apiUrlOpen: this.SSO_URL.SSO_API_URL,
                });
                this.store = new storage_1.Storage({
                    clientId: clientId,
                    method: const_1.HARD_CODE_METHOD,
                });
                return [2 /*return*/];
            });
        });
    };
    SSOWeb.prototype.login = function () {
        return __awaiter(this, void 0, void 0, function () {
            var _a, logoutUrl, callbackUrl, rewriteLocation, includedUriList, excludedUriList, _b, stateStore, verifier, tokenStore, code, originalUrl, token, href, origin, reqPath, defaultCallbackUrl, defaultLogoutUrl, defaultRobotUrl, defaultCheckPath, state, webNewUuid, stateInBrowser, codeVerifier, result, accessToken, redirectUrlObj, loginUrl_1;
            return __generator(this, function (_c) {
                switch (_c.label) {
                    case 0:
                        if (!!this.isInitial) return [3 /*break*/, 2];
                        return [4 /*yield*/, this.init()];
                    case 1:
                        _c.sent();
                        _c.label = 2;
                    case 2:
                        _a = this, logoutUrl = _a.logoutUrl, callbackUrl = _a.callbackUrl, rewriteLocation = _a.rewriteLocation, includedUriList = _a.includedUriList, excludedUriList = _a.excludedUriList;
                        _b = this.store, stateStore = _b.stateStore, verifier = _b.verifier, tokenStore = _b.tokenStore;
                        code = common_util_1.urlObj.getSearchString('code');
                        originalUrl = common_util_1.urlObj.getSearchString('original-url');
                        token = tokenStore.getToken();
                        href = location.href;
                        origin = location.origin;
                        reqPath = code ? decodeURIComponent(common_util_1.urlObj.getReqPath(href, origin, rewriteLocation)) : common_util_1.urlObj.getReqPath(href, origin, rewriteLocation);
                        if (this.isDebug) {
                            console.log("================== ssoweb debug =================");
                            console.log("logoutUrl: ", this.logoutUrl);
                            console.log("callbackUrl: ", this.callbackUrl);
                            console.log("href: ", decodeURIComponent(href));
                            console.log("origin: ", origin);
                            console.log("rewriteLocation: ", rewriteLocation);
                            console.log("reqPath: ", reqPath);
                            console.log("originalUrl: ", originalUrl);
                            console.log("code: ", code);
                            console.log("token: ", token);
                            console.log("=================================================");
                        }
                        defaultCallbackUrl = const_1.SSO_SPECIAL_ROUTE.callbackUrl, defaultLogoutUrl = const_1.SSO_SPECIAL_ROUTE.logoutUrl, defaultRobotUrl = const_1.SSO_SPECIAL_ROUTE.robotUrl;
                        defaultCheckPath = [
                            defaultCallbackUrl,
                            defaultLogoutUrl,
                            defaultRobotUrl,
                            logoutUrl,
                            callbackUrl,
                        ];
                        if (!defaultCheckPath.includes(reqPath) &&
                            common_util_1.whiteListAndBlackListCheck(reqPath, excludedUriList, includedUriList)) {
                            return [2 /*return*/, { type: 'info', message: 'no need to check' }];
                        }
                        if (!(code && this.isCallbackPath(reqPath))) return [3 /*break*/, 4];
                        state = common_util_1.urlObj.getSearchString('state');
                        webNewUuid = common_util_1.urlObj.getSearchString('webNewUuid');
                        stateInBrowser = stateStore.getState();
                        if (common_util_1.hasSchema(originalUrl)) {
                            this.logger.error('error', new Error(SHOULD_NO_SCHEMA_IN_ORIGINAL_URL));
                            return [2 /*return*/, { type: 'error', message: SHOULD_NO_SCHEMA_IN_ORIGINAL_URL }];
                        }
                        if (!state || state !== stateInBrowser) {
                            this.logger.error('error', new Error(STATE_ERROR));
                            return [2 /*return*/, { type: 'error', message: STATE_ERROR }];
                        }
                        codeVerifier = verifier.getCodeVerifier();
                        return [4 /*yield*/, this.getToken(code, codeVerifier)];
                    case 3:
                        result = _c.sent();
                        if (typeof result === 'string') {
                            this.logger.error(result);
                            return [2 /*return*/, { type: 'error', message: result }];
                        }
                        accessToken = result.accessToken;
                        if (!originalUrl) {
                            this.logger.error('error', new Error(ORIGINAL_URL_LOST));
                            originalUrl = rewriteLocation + "/";
                        }
                        tokenStore.setToken(accessToken, this.sameSite);
                        if (webNewUuid) {
                            tokenStore.setCookieStr('webNewUuid', webNewUuid);
                        }
                        token = accessToken;
                        // 解决firefox可能不跳转的bug
                        setTimeout(function () {
                            location.href = originalUrl;
                        }, 1);
                        return [3 /*break*/, 7];
                    case 4:
                        if (!(this.isLogoutPath(reqPath) || !token)) return [3 /*break*/, 7];
                        redirectUrlObj = this.createRedirectUrl("" + rewriteLocation + reqPath);
                        if (!this.isLogoutPath(reqPath)) return [3 /*break*/, 6];
                        return [4 /*yield*/, this.logout(token)];
                    case 5:
                        _c.sent();
                        redirectUrlObj = this.createRedirectUrl(rewriteLocation + "/");
                        _c.label = 6;
                    case 6:
                        loginUrl_1 = this.getLoginUrl(redirectUrlObj);
                        // 解决firefox可能不跳转的bug
                        setTimeout(function () {
                            location.href = loginUrl_1;
                        }, 1);
                        return [2 /*return*/, { type: 'info', message: "redirect to " + loginUrl_1 }];
                    case 7: return [2 /*return*/, token];
                }
            });
        });
    };
    SSOWeb.prototype.logout = function (token) {
        return __awaiter(this, void 0, void 0, function () {
            var clientId, tokenStore;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (!this.isInitial)
                            throw Error('should init first');
                        if (!token) {
                            token = this.store.tokenStore.getToken();
                        }
                        clientId = this.clientId;
                        tokenStore = this.store.tokenStore;
                        return [4 /*yield*/, this.client.logout(token, clientId)];
                    case 1:
                        _a.sent();
                        tokenStore.clearToken();
                        return [2 /*return*/];
                }
            });
        });
    };
    /**
     * 获得登录页地址
     * @param redirectUrlObj
     * @see [getLoginUrl](https://docs.sankuai.com/mt/it/web-sso-sdk/docs/apis/#getloginurlredirecturl-url)
     */
    SSOWeb.prototype.getLoginUrl = function (redirectUrlObj) {
        if (!this.isInitial)
            throw Error('should init first');
        var rewriteLocation = this.rewriteLocation;
        if (!redirectUrlObj) {
            var reqPath = common_util_1.urlObj.getReqPath(location.href, location.origin, rewriteLocation);
            redirectUrlObj = this.createRedirectUrl("" + rewriteLocation + reqPath);
        }
        var loginUrlObj = new URL(this.loginUrl, location.origin);
        var _a = this.store, verifier = _a.verifier, stateStore = _a.stateStore;
        var state = store_util_1.generateState();
        var codeVerifier = crypto_util_1.cryptoGenerateRandom();
        stateStore.clearState();
        stateStore.setState(state);
        verifier.clearCodeVerifier();
        verifier.setCodeVerifier(codeVerifier);
        var codeChallengeMethod = verifier.getCodeChallengeMethod();
        var codeChallenge = verifier.isSha256()
            ? crypto_util_1.sha256Crypto(codeVerifier)
            : codeVerifier;
        // // 解决pathname中`#`自动被编码问题
        var redirectUrl = "" + redirectUrlObj.origin + decodeURIComponent(redirectUrlObj.pathname) + redirectUrlObj.search;
        loginUrlObj.search = "client_id=" + this.clientId + "&redirect_uri=" + encodeURIComponent(redirectUrl) + "&state=" + state + "&code_challenge=" + encodeURIComponent(codeChallenge) + "&code_challenge_method=" + codeChallengeMethod;
        if (this.isDebug) {
            console.log("================== ssoweb debug =================");
            console.log("redirect_uri origin: ", redirectUrlObj.origin);
            console.log("redirect_uri pathname: ", redirectUrlObj.pathname);
            console.log("redirect_uri search: ", decodeURIComponent(redirectUrlObj.search));
            console.log("redirect_uri: ", decodeURIComponent(redirectUrl));
            console.log("=================================================");
        }
        return loginUrlObj.href;
    };
    /**
     * 获得redirectUrl的URL对象
     * @description
     *   redirectUrl的地址是 `域名{{callbackUrl}?original-url={{originalUrl}}`
     * @param originalUrl 只能是相对路径
     * @see [createRedirectUrl](https://docs.sankuai.com/mt/it/web-sso-sdk/docs/apis/#createredirecturloriginalurlstring)
     * @example
     *
     * ``` js
     * location.href = ssoWeb.getLoginUrl(ssoWeb.createRedirectUrl('/abc'))
     * // 当从sso登录页跳转回来,最终停留在  '{你的域名}/abc'
     * ```
     *
     */
    SSOWeb.prototype.createRedirectUrl = function (originalUrl) {
        var redirectUrlObj = new URL(location.origin);
        var defaultCallbackUrl = const_1.SSO_SPECIAL_ROUTE.callbackUrl;
        var _a = this, schema = _a.schema, rewriteLocation = _a.rewriteLocation, callbackUrl = _a.callbackUrl;
        if (schema)
            redirectUrlObj.protocol = schema;
        if (!redirectUrlObj.protocol) {
            console.warn(PROTOCOL_UNDEFINED);
            // set default protocol
            redirectUrlObj.protocol = 'http:';
        }
        redirectUrlObj.pathname = "" + rewriteLocation + (callbackUrl ||
            defaultCallbackUrl);
        redirectUrlObj.search = "original-url=" + encodeURIComponent(originalUrl);
        return redirectUrlObj;
    };
    SSOWeb.prototype.isLogoutPath = function (reqPath) {
        var logoutUrl = this.logoutUrl;
        var defaultLogoutUrl = const_1.SSO_SPECIAL_ROUTE.logoutUrl;
        return (reqPath.startsWith(logoutUrl) || reqPath.startsWith(defaultLogoutUrl));
    };
    SSOWeb.prototype.isCallbackPath = function (reqPath) {
        var callbackUrl = this.callbackUrl;
        var defaultCallbackUrl = const_1.SSO_SPECIAL_ROUTE.callbackUrl;
        return (reqPath.startsWith(callbackUrl) || reqPath.startsWith(defaultCallbackUrl));
    };
    SSOWeb.prototype.getToken = function (code, verifier) {
        var clientId = this.clientId;
        return this.client.getToken(code, verifier, clientId);
    };
    return SSOWeb;
}());
var ssoInstance;
// add singleton mode for web SDK to avoid too many instance in use
/**
 * 构造SSOWeb对象
 * @param configs SDK配置
 * @see [配置项文档](https://docs.sankuai.com/mt/it/web-sso-sdk/docs/configuration/)
 */
function singletonWrapper(configs) {
    // @ts-ignore
    if (configs.accessEnv === 'ppe') {
        console.error('sso beta环境即将下线，请切换至test环境，详情参考 https://km.sankuai.com/page/173996827');
    }
    if (!ssoInstance) {
        ssoInstance = new SSOWeb(configs);
    }
    return ssoInstance;
}
exports.default = singletonWrapper;
/**
 * 仅用于单元测试
 */
// tslint:disable-next-line
exports._dispose = function () {
    // tslint:disable-next-line
    ssoInstance = null;
};
//# sourceMappingURL=sso_web.js.map