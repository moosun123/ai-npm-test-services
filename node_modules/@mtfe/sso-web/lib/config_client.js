"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
/**
 * Created by leon on 6/14/18.
 */
// import packageInfo from "../package.json"
var const_1 = require("./config/const");
var common_util_1 = require("./util/common_util");
var request_1 = require("./request");
var config_util_1 = require("./util/config_util");
// default locale is english, doesn't support multiple language yet
var en_GB_1 = __importDefault(require("./locale/en_GB"));
var CONFIG_USING_LOCAL_ACCESS_POINT = en_GB_1.default.CONFIG_USING_LOCAL_ACCESS_POINT, CONFIG_INIT_ERROR = en_GB_1.default.CONFIG_INIT_ERROR;
var pkgVersion;
var ConfigClient = /** @class */ (function () {
    function ConfigClient(configArgs) {
        var clientId = configArgs.clientId, userCfgs = __rest(configArgs, ["clientId"]);
        this.clientId = clientId;
        this.env = userCfgs.accessEnv;
        this.userCfgs = userCfgs;
        this.configUrl = const_1.CONFIG_API_URL[this.localEnvMatchedEnv(this.env)].SSO_CONFIG_URL;
        this.logger = new common_util_1.Logger('ConfigClient(线下环境请忽略)');
    }
    ConfigClient.prototype.init = function () {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.startRequest()];
                    case 1:
                        _a.sent();
                        return [2 /*return*/];
                }
            });
        });
    };
    ConfigClient.prototype.getConfig = function () {
        return this.availableCfgs;
    };
    ConfigClient.prototype.startRequest = function () {
        return __awaiter(this, void 0, void 0, function () {
            var _a, userCfgs, clientId, env;
            return __generator(this, function (_b) {
                _a = this, userCfgs = _a.userCfgs, clientId = _a.clientId, env = _a.env;
                this.reportConfig();
                // const cacheOjb = {
                //   digest: '',
                // };
                // const _configInfo = await this.getConfigInfo(
                //   this.getExchangeReqParams(cacheOjb, false), this.clientId
                // );
                // if (typeof _configInfo === 'string') {
                //   this.logger.warn(CONFIG_INIT_ERROR);
                //   this.availableCfgs = Object.assign(
                //     configModelTranslator({
                //       accessPoint: DEFAULT_SSO_ACCESS_CONFIG[this.localEnvMatchedEnv(env)]
                //     }),
                //     userCfgs,
                //     { clientId }
                //   );
                //   return;
                // }
                // this.availableCfgs = Object.assign(
                //   configModelTranslator(
                //     this.noAccessPointWorkAround(this.getConfigsParamFromRes(_configInfo)
                //   )),
                //   userCfgs,
                //   { clientId }
                // )
                this.availableCfgs = Object.assign(config_util_1.configModelTranslator({ accessPoint: const_1.DEFAULT_SSO_ACCESS_CONFIG[this.localEnvMatchedEnv(env)] }), userCfgs, { clientId: clientId });
                return [2 /*return*/];
            });
        });
    };
    ConfigClient.prototype.getConfigInfo = function (params, clientId) {
        return __awaiter(this, void 0, void 0, function () {
            var url, opts, data;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        url = this.configUrl + "/exchange";
                        opts = {
                            headers: {
                                clientId: clientId,
                                'Content-Type': 'application/json'
                            },
                            method: 'POST',
                            body: JSON.stringify(params),
                        };
                        return [4 /*yield*/, request_1.fetchRequest(url, opts)];
                    case 1:
                        data = _a.sent();
                        // report response data is null
                        if (data !== null && data.msg) {
                            this.logger.warn('getConfigInfo:', data.msg);
                            return [2 /*return*/, data.msg];
                        }
                        return [2 /*return*/, data];
                }
            });
        });
    };
    ConfigClient.prototype.reportConfig = function () {
        return __awaiter(this, void 0, void 0, function () {
            var cacheOjb, clientId, err_1;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        cacheOjb = {
                            digest: '',
                        };
                        clientId = this.clientId;
                        _a.label = 1;
                    case 1:
                        _a.trys.push([1, 3, , 4]);
                        return [4 /*yield*/, this.getConfigInfo(this.getExchangeReqParams(cacheOjb, true), clientId)];
                    case 2:
                        _a.sent();
                        return [3 /*break*/, 4];
                    case 3:
                        err_1 = _a.sent();
                        this.logger.warn('reportConfig:', err_1);
                        return [3 /*break*/, 4];
                    case 4: return [2 /*return*/];
                }
            });
        });
    };
    ConfigClient.prototype.localEnvMatchedEnv = function (env) {
        return env;
    };
    ConfigClient.prototype.getExchangeReqParams = function (cacheObj, isReport) {
        var version = '1.0';
        var cmd = 'REPORT_CONFIGS';
        var sdkVersion = "web-" + (pkgVersion || '0.0.0');
        var _a = this, env = _a.env, clientId = _a.clientId, userCfgs = _a.userCfgs;
        var _b = cacheObj.digest, digest = _b === void 0 ? '' : _b;
        var params = {
            ssoConfigs: {
                digest: digest,
                configs: userCfgs,
            },
            clientInfo: {
                sdkVersion: sdkVersion,
                env: env,
                clientId: clientId,
                ip: const_1.WEB_DEFAULT_IP,
            },
        };
        // request cmd only
        if (!isReport) {
            cmd = 'REQUEST_CONFIGS';
            return {
                version: version,
                cmd: cmd,
                params: {
                    accessEnv: this.env,
                },
            };
        }
        return {
            version: version,
            cmd: cmd,
            params: params,
        };
    };
    ConfigClient.prototype.getConfigsParamFromRes = function (resParams) {
        return resParams.configs;
    };
    ConfigClient.prototype.noAccessPointWorkAround = function (configParams) {
        var env = this.env;
        if ("accessPoint" in configParams && configParams.accessPoint !== null) {
            return configParams;
        }
        this.logger.warn(CONFIG_USING_LOCAL_ACCESS_POINT);
        configParams.accessPoint =
            const_1.DEFAULT_SSO_ACCESS_CONFIG[this.localEnvMatchedEnv(env)];
        return configParams;
    };
    return ConfigClient;
}());
exports.ConfigClient = ConfigClient;
exports.setPkgVersion = function (version) {
    pkgVersion = version;
};
//# sourceMappingURL=config_client.js.map