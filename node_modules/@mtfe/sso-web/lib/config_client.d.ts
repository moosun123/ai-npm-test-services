import { ConfigsInConfigInfo, ConfigInfo, ExchangeParamsReport, ExchangeParamsRequest, SSOWebConfig } from './types';
import { LoggerModel } from './util/common_util';
export interface ConfigClientModel {
    init(): void;
    startRequest(): void;
    getConfig(): any;
    getConfigInfo(params: ExchangeParamsReport | ExchangeParamsRequest, clientId: string): Promise<ConfigInfo | null | string>;
    reportConfig(): Promise<void>;
    getExchangeReqParams(cacheObj: ConfigInfo | {
        digest: string;
    }, isReport: boolean): ExchangeParamsReport | ExchangeParamsRequest;
    localEnvMatchedEnv(env: string): string;
}
export interface ConfigArgs extends SSOWebConfig {
    clientId: string;
}
export declare class ConfigClient implements ConfigClientModel {
    private availableCfgs;
    private clientId;
    private env;
    private userCfgs;
    private configUrl;
    logger: LoggerModel;
    constructor(configArgs: ConfigArgs);
    init(): Promise<void>;
    getConfig(): object;
    startRequest(): Promise<void>;
    getConfigInfo(params: ExchangeParamsReport | ExchangeParamsRequest, clientId: string): Promise<ConfigInfo | null | string>;
    reportConfig(): Promise<void>;
    localEnvMatchedEnv(env: string): string;
    getExchangeReqParams(cacheObj: ConfigInfo | {
        digest: string;
    }, isReport: boolean): ExchangeParamsReport | ExchangeParamsRequest;
    getConfigsParamFromRes(resParams: ConfigInfo): ConfigsInConfigInfo;
    noAccessPointWorkAround(configParams: ConfigsInConfigInfo): ConfigsInConfigInfo;
}
export declare const setPkgVersion: (version: string) => void;
