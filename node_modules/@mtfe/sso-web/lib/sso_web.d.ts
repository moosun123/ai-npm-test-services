/**
 * @Desc
 * @Author leon <leondwong@gmail.com>
 * @Date 6/13/18
 */
import 'whatwg-fetch';
import { ConfigClientModel } from './config_client';
import { LoggerModel } from './util/common_util';
import { RestClientModel } from './rest_client';
import { Storage } from './storage';
import { SSOWebConfig } from './types';
interface SSOWebModel {
    init(): Promise<void>;
    login(): Promise<string | {
        type: string;
        message: string;
    }>;
    logout(token?: string): Promise<void>;
    getLoginUrl(redirectUrl?: URL): string;
    createRedirectUrl(originalUrl: string): URL;
}
declare class SSOWeb implements SSOWebModel {
    clientId: string;
    accessEnv: string;
    isInitial: boolean;
    SSO_URL: {
        SSO_API_URL: string;
        SSO_LOGIN_URL: string;
    };
    logoutUrl: string;
    callbackUrl: string;
    loginUrl: string;
    rewriteLocation?: string;
    schema: string;
    sameSite: boolean;
    isDebug: boolean;
    excludedUriList: string[];
    includedUriList: string[];
    configClient: ConfigClientModel;
    logger: LoggerModel;
    client: RestClientModel;
    store: Storage;
    constructor(configs: SSOWebConfig);
    init(): Promise<void>;
    private initConfig;
    login(): Promise<string | {
        type: string;
        message: string;
    }>;
    logout(token?: string): Promise<void>;
    /**
     * 获得登录页地址
     * @param redirectUrlObj
     * @see [getLoginUrl](https://docs.sankuai.com/mt/it/web-sso-sdk/docs/apis/#getloginurlredirecturl-url)
     */
    getLoginUrl(redirectUrlObj?: URL): string;
    /**
     * 获得redirectUrl的URL对象
     * @description
     *   redirectUrl的地址是 `域名{{callbackUrl}?original-url={{originalUrl}}`
     * @param originalUrl 只能是相对路径
     * @see [createRedirectUrl](https://docs.sankuai.com/mt/it/web-sso-sdk/docs/apis/#createredirecturloriginalurlstring)
     * @example
     *
     * ``` js
     * location.href = ssoWeb.getLoginUrl(ssoWeb.createRedirectUrl('/abc'))
     * // 当从sso登录页跳转回来,最终停留在  '{你的域名}/abc'
     * ```
     *
     */
    createRedirectUrl(originalUrl: string): URL;
    private isLogoutPath;
    private isCallbackPath;
    private getToken;
}
/**
 * 构造SSOWeb对象
 * @param configs SDK配置
 * @see [配置项文档](https://docs.sankuai.com/mt/it/web-sso-sdk/docs/configuration/)
 */
export default function singletonWrapper(configs: SSOWebConfig): SSOWeb;
/**
 * 仅用于单元测试
 */
export declare const _dispose: () => void;
export {};
