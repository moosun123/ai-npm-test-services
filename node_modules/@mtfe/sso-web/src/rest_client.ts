/**
 * @Desc
 * @Author leon <leondwong@gmail.com>
 * @Date 8/3/18
 */
import { fetchRequest } from './request';
import { Logger, LoggerModel } from './util/common_util'
import locale from './locale/en_GB'

const { SYS_ERROR } = locale;

export interface RestClientModel {
    getToken(code: string, code_verifier: string, clientId: string): Promise<getTokenSuccessDataModel | string>;
    logout(token: string, clientId: string): Promise<void>;
}

export interface getTokenSuccessDataModel {
    accessToken: string;
    expires?: number;
    refreshExpires?: number;
    refreshToken?: string;
}

export class RestClient implements RestClientModel {
    apiUrlLogin: string;
    apiUrlOpen: string;

    logger: LoggerModel;

    constructor(args: { apiUrlLogin: string, apiUrlOpen: string }) {
        this.apiUrlLogin = args.apiUrlLogin;
        this.apiUrlOpen = args.apiUrlOpen;

        this.logger = new Logger('RestClient');
    }

    async getToken(code: string, codeVerifier: string, clientId: string) {
        let url = `${this.apiUrlLogin}/oauth2.0/pkce/access-token?code=${code}&code_verifier=${codeVerifier}&client_id=${clientId}`;
        const opts = {
            headers: {
                "Content-Type": 'application/json',
            },
            method: 'GET',
        };
        let data: any;

        try {
            data = await fetchRequest(url, opts);
        } catch (err) {
            data = {};
            data.msg = err.stack || SYS_ERROR;

            this.logger.error('getToken', err);
        }

        if (data.msg) {
            return data.msg;
        }

        return data;
    }

    async logout(accessToken: string, clientId: string) {
        let url = `${this.apiUrlLogin}/oauth2.0/pkce/logout`;
        const opts = {
            headers: {
                "Content-Type": 'application/json',
            },
            method: 'POST',
            body: JSON.stringify({
                accessToken,
                clientId,
            }),
        };
        let data: any;

        try {
            data = await fetchRequest(url, opts);
        } catch (err) {
            data = {};
            data.msg = err.stack || SYS_ERROR;

            this.logger.error('logout', err);
        }

        // logout response data: null for success
        if (data !== null && data.msg) {
            return data.msg;
        }

        return data;
    }
}