/**
 * Created by leon on 6/14/18.
 */
// import packageInfo from "../package.json"
import { DEFAULT_SSO_ACCESS_CONFIG, CONFIG_API_URL, WEB_DEFAULT_IP } from './config/const';
import { ConfigsInConfigInfo, ConfigInfo, ExchangeParamsReport, ExchangeParamsRequest, SSOWebConfig } from './types';
import { Logger, LoggerModel } from './util/common_util';
import { fetchRequest } from './request';

import { configModelTranslator } from './util/config_util';

// default locale is english, doesn't support multiple language yet
import locale from './locale/en_GB';

const {
  CONFIG_USING_LOCAL_ACCESS_POINT,
  CONFIG_INIT_ERROR
} = locale;
let pkgVersion: string;

export interface ConfigClientModel {
  init(): void;
  startRequest(): void;
  getConfig(): any;
  getConfigInfo(params: ExchangeParamsReport | ExchangeParamsRequest, clientId: string): Promise<ConfigInfo | null | string>;
  reportConfig(): Promise<void>;
  getExchangeReqParams(cacheObj: ConfigInfo | { digest: string }, isReport: boolean): ExchangeParamsReport | ExchangeParamsRequest;
  localEnvMatchedEnv(env: string): string;
}

export interface ConfigArgs extends SSOWebConfig {
  clientId: string;
}

export class ConfigClient implements ConfigClientModel {
  private availableCfgs: object;
  private clientId: string;
  private env: string;
  private userCfgs: object;
  private configUrl: string;

  logger: LoggerModel;

  constructor(configArgs: ConfigArgs) {
    const { clientId, ...userCfgs } = configArgs;

    this.clientId = clientId;
    this.env = userCfgs.accessEnv;
    this.userCfgs = userCfgs;

    this.configUrl = CONFIG_API_URL[this.localEnvMatchedEnv(this.env)].SSO_CONFIG_URL;
    this.logger = new Logger('ConfigClient(线下环境请忽略)');
  }

  async init() {
    await this.startRequest();
  }

  getConfig() {
    return this.availableCfgs;
  }

  async startRequest() {
    const { userCfgs, clientId, env } = this;
    this.reportConfig();
    // const cacheOjb = {
    //   digest: '',
    // };
    // const _configInfo = await this.getConfigInfo(
    //   this.getExchangeReqParams(cacheOjb, false), this.clientId
    // );
    // if (typeof _configInfo === 'string') {
    //   this.logger.warn(CONFIG_INIT_ERROR);
    //   this.availableCfgs = Object.assign(
    //     configModelTranslator({
    //       accessPoint: DEFAULT_SSO_ACCESS_CONFIG[this.localEnvMatchedEnv(env)]
    //     }),
    //     userCfgs,
    //     { clientId }
    //   );
    //   return;
    // }

    // this.availableCfgs = Object.assign(
    //   configModelTranslator(
    //     this.noAccessPointWorkAround(this.getConfigsParamFromRes(_configInfo)
    //   )),
    //   userCfgs,
    //   { clientId }
    // )
    this.availableCfgs = Object.assign(configModelTranslator({ accessPoint: DEFAULT_SSO_ACCESS_CONFIG[this.localEnvMatchedEnv(env)] }), userCfgs, { clientId });
  }

  async getConfigInfo(params: ExchangeParamsReport | ExchangeParamsRequest, clientId: string): Promise<ConfigInfo | null | string> {
    let url = `${this.configUrl}/exchange`;
    const opts = {
      headers: {
        clientId,
        'Content-Type': 'application/json'
      },
      method: 'POST',
      body: JSON.stringify(params),
    };

    let data = await fetchRequest(url, opts);

    // report response data is null
    if (data !== null && data.msg) {
      this.logger.warn('getConfigInfo:', data.msg);

      return data.msg;
    }

    return data;
  }

  async reportConfig() {
    let cacheOjb = {
      digest: '',
    };
    const { clientId } = this;

    try {
      await this.getConfigInfo(this.getExchangeReqParams(cacheOjb, true), clientId);
    } catch (err) {
      this.logger.warn('reportConfig:', err);
    }
  }

  localEnvMatchedEnv(env: string): string {
    return env;
  }

  getExchangeReqParams(cacheObj: ConfigInfo | { digest: string }, isReport: boolean): ExchangeParamsReport | ExchangeParamsRequest {
    const version = '1.0';
    let cmd = 'REPORT_CONFIGS';
    const sdkVersion = `web-${pkgVersion || '0.0.0'}`;
    const { env, clientId, userCfgs } = this;
    const { digest = '' } = cacheObj;

    let params = {
      ssoConfigs: {
        digest, // 摘要
        configs: userCfgs,
      },
      clientInfo: { // 客户端信息，本次调用的客户端信息
        sdkVersion,
        env,
        clientId,
        ip: WEB_DEFAULT_IP,
      },
    };

    // request cmd only
    if (!isReport) {
      cmd = 'REQUEST_CONFIGS';
      return {
        version, // 指定协议的版本号，后续升级扩展，不至于影响已接入的客户端
        cmd, // 其中，REQUEST_CONFIGS表示要请求配置数据，
        params: {
          accessEnv: this.env,
        },
      };
    }

    return {
      version, // 指定协议的版本号，后续升级扩展，不至于影响已接入的客户端
      cmd, // 其中，REQUEST_CONFIGS表示要请求配置数据，
      params,
    };
  }

  getConfigsParamFromRes(resParams: ConfigInfo) {
    return resParams.configs;
  }

  noAccessPointWorkAround(configParams: ConfigsInConfigInfo) {
    const { env } = this;
    if ("accessPoint" in configParams && configParams.accessPoint !== null) {
      return configParams;
    }

    this.logger.warn(CONFIG_USING_LOCAL_ACCESS_POINT);

    configParams.accessPoint =
      DEFAULT_SSO_ACCESS_CONFIG[this.localEnvMatchedEnv(env)];

    return configParams;
  }
}

export const setPkgVersion = (version: string): void => {
  pkgVersion = version;
};
