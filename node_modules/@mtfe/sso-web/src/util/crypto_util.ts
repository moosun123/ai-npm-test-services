/**
 * Created by leon on 6/13/18.
 */
import sha256 from 'crypto-js/sha256';
import Base64 from 'crypto-js/enc-base64';

const CHARSET = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';

export function bufferToString(buffer: Uint8Array) {
    let state = [];
    for (let i = 0; i < buffer.byteLength; i += 1) {
        let index = (buffer[i] % CHARSET.length) | 0;
        state.push(CHARSET[index]);
    }
    return state.join('');
}

export type RandomGenerator = (sizeInBytes?: number) => string;

const DEFAULT_SIZE = 64; /** size in bytes */
const HAS_CRYPTO = typeof window !== 'undefined' && !!(window.crypto as any);

export const cryptoGenerateRandom: RandomGenerator = (sizeInBytes = DEFAULT_SIZE) => {
    const buffer = new Uint8Array(sizeInBytes);
    if (HAS_CRYPTO) {
        window.crypto.getRandomValues(buffer);
    } else {
        // fall back to Math.random() if nothing else is available
        for (let i = 0; i < sizeInBytes; i += 1) {
            buffer[i] = +Math.random().toString().slice(2);
        }
    }
    return bufferToString(buffer);
};

export function sha256Crypto(randomBytes: string): string {
    return Base64.stringify(sha256(randomBytes));
}
