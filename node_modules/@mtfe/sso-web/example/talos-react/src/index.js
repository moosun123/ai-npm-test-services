import React from 'react'
import ReactDOM from 'react-dom'
import './index.css'
import { HashRouter as Router } from 'react-router-dom'
import App from './App'
import ssoWeb, { ssoOption } from './utils/sso';
import axios from 'axios';

ssoWeb.login().then((ssoid) => {
    if (typeof ssoid === 'string') {
        // 当前后端(Java后端)不是使用同一个clientId时，前端应把自己使用的clientId放到请求头部
        axios.defaults.headers.common['client-id'] = ssoOption.clientId;

        // web sdk内部会把ssoid种到cookie，业务后端会读取cookie中的ssoid
        // 但跨域请求推荐将ssoid放到access-token, 后端SDK优先读取它
        axios.defaults.headers.common['access-token'] = ssoid;
        ReactDOM.render(
          <Router>
            <App />
          </Router>,
          document.getElementById('root')
        )
    }
})
/** 
 * 添加一个响应拦截器
 * 当业务接口返回结果是(下面是后端SSO SDK返回结果,注意! 此时http status是200)
 * {
      "status":401,
      "data":{
        "message":"auth failed"
      }
   }
 * */
axios.interceptors.response.use(function (res) {
    // `axios`不是必须的，这里的意思是，判断每个业务接口响应结果是不是未授权的，如果是则重定向到sso登录页
    if (res.data.status == 401) {
        // 重定向到sso登入页
        window.location.href = ssoWeb.getLoginUrl(); // v1.0.1新增
    }
    return res;
}, function (error) {
    return Promise.reject(error);
});

